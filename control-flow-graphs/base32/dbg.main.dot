digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002700" [URL="dbg.main/0x00002700", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2f88\l2113: int dbg.main (int argc, char **argv);\l; var idx_t n @ rbp-0x50\l; var base32_decode_context ctx @ rbp-0x44\l; var int64_t var_8h @ rsp+0x8\l; var uint32_t var_10h @ rsp+0x10\l; var int64_t var_18h @ rsp+0x18\l; var int64_t var_20h @ rsp+0x20\l; var int64_t var_28h @ rsp+0x28\l; var char *filename @ rsp+0x30\l; var char *s2 @ rsp+0x38\l; var uint32_t var_40h @ rsp+0x40\l; var int64_t var_4ch @ rsp+0x4c\l; var int64_t var_58h @ rsp+0x58\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002700      endbr64                                                ; int main(int argc,char ** argv);\l0x00002704      push r15\l0x00002706      lea r15, obj.long_options                              ; 0xbb00 ; \"d\\x81\"\l0x0000270d      push r14\l0x0000270f      xor r14d, r14d\l0x00002712      push r13\l0x00002714      lea r13, str.diw:                                      ; 0x810f ; \"diw:\"\l0x0000271b      push r12\l0x0000271d      lea r12, [0x000080a3]                                  ; \"coreutils\"\l0x00002724      push rbp\l0x00002725      mov ebp, edi                                           ; argc\l0x00002727      push rbx\l0x00002728      mov rbx, rsi                                           ; argv\l0x0000272b      sub rsp, 0x68\l0x0000272f      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002732      mov rax, qword fs:[0x28]\l0x0000273b      mov qword [var_58h], rax\l0x00002740      xor eax, eax\l0x00002742      call dbg.set_program_name\l0x00002747      lea rsi, [0x00008b41]                                  ; const char *locale\l0x0000274e      mov edi, 6                                             ; int category\l0x00002753      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002758      lea rsi, str._usr_local_share_locale                   ; 0x80ce ; \"/usr/local/share/locale\" ; char *dirname\l0x0000275f      mov rdi, r12                                           ; char *domainname\l0x00002762      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002767      mov rdi, r12                                           ; char *domainname\l0x0000276a      mov r12d, 0x4c                                         ; 'L'\l0x00002770      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002775      lea rdi, [dbg.close_stdout]                            ; 0x3cf0 ; func function\l0x0000277c      call sym.atexit                                        ; int atexit(func function)\l0x00002781      mov byte [var_10h], 0\l"]
	"0x00002786" [URL="dbg.main/0x00002786", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x27b7, 0x284b, 0x286e\l0x00002786      xor r8d, r8d\l0x00002789      mov rcx, r15\l0x0000278c      mov rdx, r13\l0x0000278f      mov rsi, rbx\l0x00002792      mov edi, ebp\l0x00002794      call sym.imp.getopt_long\l0x00002799      cmp eax, 0xffffffff\l0x0000279c      je 0x2873\l"]
	"0x000027a2" [URL="dbg.main/0x000027a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027a2      cmp eax, 0x64\l0x000027a5      je 0x2868\l"]
	"0x000027ab" [URL="dbg.main/0x000027ab", fillcolor="white",color="#767676", fontname="Courier",label="0x000027ab      jle 0x27c0\l"]
	"0x000027ad" [URL="dbg.main/0x000027ad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027ad      cmp eax, 0x69\l0x000027b0      jne 0x2800\l"]
	"0x000027b2" [URL="dbg.main/0x000027b2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027b2      mov byte [var_10h], 1\l0x000027b7      jmp 0x2786\l"]
	"0x000027c0" [URL="dbg.main/0x000027c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27ab\l0x000027c0      cmp eax, 0xffffff7d                                    ; 4294967165\l0x000027c5      jne 0x2850\l"]
	"0x000027cb" [URL="dbg.main/0x000027cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027cb      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc088:8]=0 ; int64_t arg1\l0x000027d2      mov rcx, qword [obj.Version]                           ; [0xc010:8]=0x859b ; int64_t arg5\l0x000027d9      xor eax, eax\l0x000027db      xor r9d, r9d                                           ; int64_t arg_c0h\l0x000027de      lea r8, str.Simon_Josefsson                            ; 0x80ff ; \"Simon Josefsson\" ; int64_t arg6\l0x000027e5      lea rdx, str.GNU_coreutils                             ; 0x809f ; \"GNU coreutils\" ; int64_t arg3\l0x000027ec      lea rsi, str.base32                                    ; 0x8004 ; \"base32\" ; int64_t arg2\l0x000027f3      call dbg.version_etc\l0x000027f8      xor edi, edi                                           ; int status\l; DATA XREF from dbg.version_etc_arn @ 0x6497\l0x000027fa      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002800" [URL="dbg.main/0x00002800", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27b0\l; DATA XREF from dbg.version_etc_arn @ 0x62ed\l0x00002800      cmp eax, 0x77\l0x00002803      jne 0x2e87\l"]
	"0x00002809" [URL="dbg.main/0x00002809", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002809      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xc0a0:8]=0 ; int64_t arg1\l0x00002810      xor esi, esi                                           ; int64_t arg2\l0x00002812      lea rcx, [var_40h]                                     ; int64_t arg4\l0x00002817      lea r8, [0x00008b41]                                   ; int64_t arg5\l0x0000281e      mov edx, 0xa                                           ; int64_t arg3\l0x00002823      call dbg.xstrtoimax\l0x00002828      cmp eax, 1\l0x0000282b      ja 0x2eff\l"]
	"0x00002831" [URL="dbg.main/0x00002831", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002831      mov r12, qword [var_40h]\l0x00002836      test r12, r12\l0x00002839      js 0x2eff\l"]
	"0x0000283f" [URL="dbg.main/0x0000283f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000283f      cmp eax, 1\l0x00002842      mov eax, 0\l0x00002847      cmove r12, rax\l0x0000284b      jmp 0x2786\l"]
	"0x00002850" [URL="dbg.main/0x00002850", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27c5\l0x00002850      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002855      jne 0x2e87\l"]
	"0x0000285b" [URL="dbg.main/0x0000285b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000285b      xor edi, edi                                           ; int64_t arg1\l0x0000285d      call dbg.usage\l0x00002862      nop word [rax + rax]\l"]
	"0x00002868" [URL="dbg.main/0x00002868", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27a5\l0x00002868      mov r14d, 1\l0x0000286e      jmp 0x2786\l"]
	"0x00002873" [URL="dbg.main/0x00002873", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x279c\l0x00002873      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xc098:4]=0\l0x0000287a      mov edx, ebp\l0x0000287c      sub edx, eax\l0x0000287e      sub edx, 1\l0x00002881      jg 0x2e56\l"]
	"0x00002887" [URL="dbg.main/0x00002887", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002887      cmp eax, ebp\l0x00002889      jl 0x29c5\l"]
	"0x0000288f" [URL="dbg.main/0x0000288f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000288f      lea rax, [0x000080cc]                                  ; \"-\"\l0x00002896      mov qword [s2], rax\l0x0000289b      mov qword [filename], rax\l"]
	"0x000028a0" [URL="dbg.main/0x000028a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29e4\l0x000028a0      mov r13, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xc090:8]=0\l"]
	"0x000028a7" [URL="dbg.main/0x000028a7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a01\l0x000028a7      mov esi, 2                                             ; int64_t arg2\l0x000028ac      mov rdi, r13                                           ; int64_t arg1\l0x000028af      call dbg.fadvise\l0x000028b4      test r14b, r14b\l0x000028b7      je 0x2b33\l"]
	"0x000028bd" [URL="dbg.main/0x000028bd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028bd      mov rax, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc088:8]=0\l0x000028c4      mov edi, sym._init                                     ; 0x2000 ; size_t size\l0x000028c9      mov qword [var_18h], rax\l0x000028ce      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000028d3      mov edi, 0x1400                                        ; size_t size\l0x000028d8      mov r12, rax\l0x000028db      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000028e0      mov r14, rax\l0x000028e3      lea rax, [var_4ch]\l0x000028e8      mov rdi, rax                                           ; int64_t arg1\l0x000028eb      mov qword [var_20h], rax\l0x000028f0      call dbg.base32_decode_ctx_init\l0x000028f5      mov qword [rsp], r13\l0x000028f9      mov qword [var_8h], r12\l0x000028fe      mov qword [var_28h], r14\l0x00002903      nop dword [rax + rax]\l"]
	"0x00002908" [URL="dbg.main/0x00002908", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2af4\l0x00002908      xor ebx, ebx\l0x0000290a      jmp 0x293e\l"]
	"0x00002910" [URL="dbg.main/0x00002910", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2965, 0x296a, 0x297f\l0x00002910      mov rax, qword [rsp]\l0x00002914      add rbx, rbp\l0x00002917      mov eax, dword [rax]\l0x00002919      mov ebp, eax\l0x0000291b      and ebp, 0x20                                          ; \"@\"\l0x0000291e      jne 0x2e2a\l"]
	"0x00002924" [URL="dbg.main/0x00002924", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002924      mov edx, eax\l0x00002926      and edx, 0x10\l0x00002929      cmp rbx, 0x1fff\l0x00002930      jg 0x2a40\l"]
	"0x00002936" [URL="dbg.main/0x00002936", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002936      test edx, edx\l0x00002938      jne 0x2a40\l"]
	"0x0000293e" [URL="dbg.main/0x0000293e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x290a\l0x0000293e      mov rax, qword [var_8h]\l0x00002943      mov rcx, qword [rsp]\l0x00002947      mov edx, sym._init                                     ; 0x2000\l0x0000294c      mov esi, 1\l0x00002951      sub rdx, rbx\l0x00002954      lea rdi, [rax + rbx]\l0x00002958      call sym.imp.fread_unlocked\l0x0000295d      cmp byte [var_10h], 0\l0x00002962      mov rbp, rax\l0x00002965      je 0x2910\l"]
	"0x00002967" [URL="dbg.main/0x00002967", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002967      test rax, rax\l0x0000296a      jle 0x2910\l"]
	"0x0000296c" [URL="dbg.main/0x0000296c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000296c      xor r14d, r14d\l0x0000296f      jmp 0x2981\l"]
	"0x00002978" [URL="dbg.main/0x00002978", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x299e, 0x29a2\l0x00002978      add r14, 1\l"]
	"0x0000297c" [URL="dbg.main/0x0000297c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c3\l0x0000297c      cmp rbp, r14\l0x0000297f      jle 0x2910\l"]
	"0x00002981" [URL="dbg.main/0x00002981", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x296f\l0x00002981      mov rax, qword [var_8h]\l0x00002986      lea r12, [rbx + r14]\l0x0000298a      lea r15, [rax + r12]\l0x0000298e      movsx edi, byte [r15]\l0x00002992      mov r13d, edi\l0x00002995      call sym.isbase32\l0x0000299a      cmp r13b, 0x3d\l0x0000299e      je 0x2978\l"]
	"0x000029a0" [URL="dbg.main/0x000029a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029a0      test al, al\l0x000029a2      jne 0x2978\l"]
	"0x000029a4" [URL="dbg.main/0x000029a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029a4      sub rbp, 1\l0x000029a8      mov rax, qword [var_8h]\l0x000029ad      mov rdi, r15                                           ; void *s1\l0x000029b0      mov r8, rbp\l0x000029b3      sub r8, r14\l0x000029b6      lea rsi, [rax + r12 + 1]                               ; const void *s2\l0x000029bb      mov rdx, r8                                            ; size_t n\l0x000029be      call sym.imp.memmove                                   ; void *memmove(void *s1, const void *s2, size_t n)\l0x000029c3      jmp 0x297c\l"]
	"0x000029c5" [URL="dbg.main/0x000029c5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2889\l0x000029c5      mov rdi, qword [rbx + rax*8]                           ; const char *s1\l0x000029c9      lea rax, [0x000080cc]                                  ; \"-\"\l0x000029d0      mov rsi, rax                                           ; const char *s2\l0x000029d3      mov qword [s2], rax\l0x000029d8      mov qword [filename], rdi\l0x000029dd      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x000029e2      test eax, eax\l0x000029e4      je 0x28a0\l"]
	"0x000029ea" [URL="dbg.main/0x000029ea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029ea      mov rdi, qword [filename]                              ; const char *filename\l0x000029ef      lea rsi, [0x00008125]                                  ; \"rb\" ; const char *mode\l0x000029f6      call sym.imp.fopen                                     ; file*fopen(const char *filename, const char *mode)\l0x000029fb      mov r13, rax\l0x000029fe      test rax, rax\l0x00002a01      jne 0x28a7\l"]
	"0x00002a07" [URL="dbg.main/0x00002a07", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a07      mov rdx, qword [filename]                              ; int64_t arg3\l0x00002a0c      mov esi, 3                                             ; int64_t arg2\l0x00002a11      xor edi, edi                                           ; int64_t arg1\l0x00002a13      call sym.quotearg_n_style_colon\l0x00002a18      mov r12, rax\l0x00002a1b      call sym.imp.__errno_location\l0x00002a20      mov rcx, r12\l0x00002a23      mov edi, 1                                             ; int status\l0x00002a28      lea rdx, [0x000080fc]                                  ; \"%s\" ; char *format\l0x00002a2f      mov esi, dword [rax]                                   ; int errname\l0x00002a31      xor eax, eax\l0x00002a33      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002a38      nop dword [rax + rax]\l"]
	"0x00002a40" [URL="dbg.main/0x00002a40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2930, 0x2938\l0x00002a40      mov r12, qword [var_8h]\l0x00002a45      mov r15, qword [var_18h]\l0x00002a4a      mov qword [var_8h], rbx\l0x00002a4f      mov r14, qword [var_28h]\l0x00002a54      mov rbx, qword [var_20h]\l0x00002a59      jmp 0x2aba\l"]
	"0x00002a60" [URL="dbg.main/0x00002a60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2abc\l0x00002a60      test ebp, ebp\l0x00002a62      jne 0x2ae0\l"]
	"0x00002a64" [URL="dbg.main/0x00002a64", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ade\l0x00002a64      mov rdx, qword [var_8h]\l"]
	"0x00002a69" [URL="dbg.main/0x00002a69", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ad2, 0x2adc\l0x00002a69      mov rcx, r14                                           ; int64_t arg4\l0x00002a6c      mov rsi, r12                                           ; int64_t arg2\l0x00002a6f      lea r8, [var_40h]                                      ; int64_t arg5\l0x00002a74      mov rdi, rbx                                           ; int64_t arg1\l0x00002a77      mov qword [var_40h], 0x1400                            ; [0x1400:8]=0xbef0\l0x00002a80      call dbg.base32_decode_ctx\l0x00002a85      mov rdx, qword [var_40h]\l0x00002a8a      mov rcx, r15\l0x00002a8d      mov rdi, r14\l0x00002a90      mov esi, 1\l0x00002a95      mov r13d, eax\l0x00002a98      call sym.imp.fwrite_unlocked\l0x00002a9d      cmp rax, qword [var_40h]\l0x00002aa2      jb 0x2dfe\l"]
	"0x00002aa8" [URL="dbg.main/0x00002aa8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002aa8      test r13b, r13b\l0x00002aab      je 0x2dda\l"]
	"0x00002ab1" [URL="dbg.main/0x00002ab1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ab1      mov rax, qword [rsp]\l0x00002ab5      add ebp, 1\l0x00002ab8      mov eax, dword [rax]\l"]
	"0x00002aba" [URL="dbg.main/0x00002aba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a59\l0x00002aba      test al, 0x10\l0x00002abc      je 0x2a60\l"]
	"0x00002abe" [URL="dbg.main/0x00002abe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002abe      cmp ebp, 2\l0x00002ac1      je 0x2af9\l"]
	"0x00002ac3" [URL="dbg.main/0x00002ac3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ac3      cmp ebp, 1\l0x00002ac6      jne 0x2ad8\l"]
	"0x00002ac8" [URL="dbg.main/0x00002ac8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ac8      mov eax, dword [var_4ch]\l0x00002acc      test eax, eax\l0x00002ace      je 0x2af9\l"]
	"0x00002ad0" [URL="dbg.main/0x00002ad0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ad0      xor edx, edx\l0x00002ad2      jmp 0x2a69\l"]
	"0x00002ad8" [URL="dbg.main/0x00002ad8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ac6\l0x00002ad8      xor edx, edx\l0x00002ada      test ebp, ebp\l0x00002adc      jne 0x2a69\l"]
	"0x00002ade" [URL="dbg.main/0x00002ade", fillcolor="white",color="#767676", fontname="Courier",label="0x00002ade      jmp 0x2a64\l"]
	"0x00002ae0" [URL="dbg.main/0x00002ae0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a62\l0x00002ae0      mov qword [var_18h], r15\l0x00002ae5      mov qword [var_8h], r12\l0x00002aea      mov qword [var_28h], r14\l0x00002aef      mov qword [var_20h], rbx\l0x00002af4      jmp 0x2908\l"]
	"0x00002af9" [URL="dbg.main/0x00002af9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ac1, 0x2ace\l0x00002af9      mov r13, qword [rsp]\l"]
	"0x00002afd" [URL="dbg.main/0x00002afd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bb0\l0x00002afd      mov rdi, r13                                           ; int64_t arg1\l0x00002b00      call dbg.rpl_fclose\l0x00002b05      add eax, 1\l0x00002b08      je 0x2d4e\l"]
	"0x00002b0e" [URL="dbg.main/0x00002b0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b0e      mov rax, qword [var_58h]\l0x00002b13      sub rax, qword fs:[0x28]\l0x00002b1c      jne 0x2f68\l"]
	"0x00002b22" [URL="dbg.main/0x00002b22", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b22      add rsp, 0x68\l0x00002b26      xor eax, eax\l0x00002b28      pop rbx\l0x00002b29      pop rbp\l0x00002b2a      pop r12\l0x00002b2c      pop r13\l0x00002b2e      pop r14\l0x00002b30      pop r15\l0x00002b32      ret\l"]
	"0x00002b33" [URL="dbg.main/0x00002b33", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28b7\l0x00002b33      mov edi, 0x7800                                        ; \"A]\\xc3\\x0f\\x1fD\" ; size_t size\l0x00002b38      mov r15, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc088:8]=0\l0x00002b3f      xor ebx, ebx\l0x00002b41      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00002b46      mov edi, loc.data_start                                ; loc.__data_start\l                                                                       ; 0xc000 ; size_t size\l0x00002b4b      mov rbp, rax\l0x00002b4e      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00002b53      mov qword [var_10h], r12\l0x00002b58      mov qword [rsp], rax\l"]
	"0x00002b5c" [URL="dbg.main/0x00002b5c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c57\l0x00002b5c      xor r14d, r14d\l0x00002b5f      jmp 0x2b71\l"]
	"0x00002b68" [URL="dbg.main/0x00002b68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b94\l0x00002b68      cmp r14, 0x77ff\l0x00002b6f      jg 0x2be2\l"]
	"0x00002b71" [URL="dbg.main/0x00002b71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b5f\l0x00002b71      mov edx, 0x7800                                        ; \"A]\\xc3\\x0f\\x1fD\"\l0x00002b76      lea rdi, [rbp + r14]\l0x00002b7b      mov rcx, r13\l0x00002b7e      mov esi, 1\l0x00002b83      sub rdx, r14\l0x00002b86      call sym.imp.fread_unlocked\l0x00002b8b      add r14, rax\l0x00002b8e      mov eax, dword [r13]\l0x00002b92      test al, 0x30\l0x00002b94      je 0x2b68\l"]
	"0x00002b96" [URL="dbg.main/0x00002b96", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b96      test r14, r14\l0x00002b99      jg 0x2be2\l"]
	"0x00002b9b" [URL="dbg.main/0x00002b9b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2c4a, 0x2c5d\l0x00002b9b      mov r12, qword [var_10h]\l0x00002ba0      test r12, r12\l0x00002ba3      je 0x2bae\l"]
	"0x00002ba5" [URL="dbg.main/0x00002ba5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ba5      test rbx, rbx\l0x00002ba8      jg 0x2d8f\l"]
	"0x00002bae" [URL="dbg.main/0x00002bae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ba3, 0x2dac\l0x00002bae      test al, 0x20                                          ; \"@\"\l0x00002bb0      je 0x2afd\l"]
	"0x00002bb6" [URL="dbg.main/0x00002bb6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bb6      mov edx, 5\l0x00002bbb      lea rsi, str.read_error                                ; 0x8128 ; \"read error\"\l0x00002bc2      xor edi, edi\l0x00002bc4      call sym.imp.dcgettext\l0x00002bc9      mov r12, rax\l0x00002bcc      call sym.imp.__errno_location\l0x00002bd1      mov rdx, r12                                           ; char *format\l0x00002bd4      mov edi, 1                                             ; int status\l0x00002bd9      mov esi, dword [rax]                                   ; int errname\l0x00002bdb      xor eax, eax\l0x00002bdd      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002be2" [URL="dbg.main/0x00002be2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2b6f, 0x2b99\l0x00002be2      lea rax, [r14 + 4]\l0x00002be6      mov ecx, 5\l0x00002beb      mov r12, qword [rsp]\l0x00002bef      mov rsi, r14                                           ; int64_t arg2\l0x00002bf2      cqo\l0x00002bf4      mov rdi, rbp                                           ; int64_t arg1\l0x00002bf7      idiv rcx\l0x00002bfa      mov rdx, r12                                           ; int64_t arg3\l0x00002bfd      lea r10, [rax*8]\l0x00002c05      mov rcx, r10                                           ; int64_t arg4\l0x00002c08      mov qword [var_8h], r10\l0x00002c0d      call dbg.base32_encode\l0x00002c12      cmp qword [var_10h], 0\l0x00002c18      mov r10, qword [var_8h]\l0x00002c1d      jne 0x2c62\l"]
	"0x00002c1f" [URL="dbg.main/0x00002c1f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c1f      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc088:8]=0\l0x00002c26      mov rdx, r10\l0x00002c29      mov esi, 1\l0x00002c2e      mov rdi, r12\l0x00002c31      call sym.imp.fwrite_unlocked\l0x00002c36      mov r10, qword [var_8h]\l0x00002c3b      cmp r10, rax\l0x00002c3e      ja 0x2e91\l"]
	"0x00002c44" [URL="dbg.main/0x00002c44", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d49\l0x00002c44      mov eax, dword [r13]\l0x00002c48      test al, 0x30\l0x00002c4a      jne 0x2b9b\l"]
	"0x00002c50" [URL="dbg.main/0x00002c50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c50      cmp r14, 0x7800                                        ; \"A]\\xc3\\x0f\\x1fD\"\l0x00002c57      je 0x2b5c\l"]
	"0x00002c5d" [URL="dbg.main/0x00002c5d", fillcolor="white",color="#767676", fontname="Courier",label="0x00002c5d      jmp 0x2b9b\l"]
	"0x00002c62" [URL="dbg.main/0x00002c62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c1d\l0x00002c62      xor r12d, r12d\l0x00002c65      mov qword [var_8h], r13\l0x00002c6a      mov r13, r15\l0x00002c6d      mov r15, rbx\l0x00002c70      mov qword [var_18h], rbp\l0x00002c75      mov rbx, qword [var_10h]\l0x00002c7a      mov rbp, r10\l0x00002c7d      mov qword [var_20h], r14\l0x00002c82      mov r14, r12\l0x00002c85      jmp 0x2cb1\l"]
	"0x00002c90" [URL="dbg.main/0x00002c90", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cc7\l0x00002c90      mov rax, qword [r13 + 0x28]\l0x00002c94      cmp rax, qword [r13 + 0x30]\l0x00002c98      jae 0x2cf6\l"]
	"0x00002c9a" [URL="dbg.main/0x00002c9a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c9a      lea rdx, [rax + 1]\l0x00002c9e      mov qword [r13 + 0x28], rdx\l0x00002ca2      mov byte [rax], 0xa\l"]
	"0x00002ca5" [URL="dbg.main/0x00002ca5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d06\l0x00002ca5      xor r15d, r15d\l"]
	"0x00002ca8" [URL="dbg.main/0x00002ca8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cf4\l0x00002ca8      cmp r14, rbp\l0x00002cab      jge 0x2d34\l"]
	"0x00002cb1" [URL="dbg.main/0x00002cb1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c85\l0x00002cb1      mov r12, rbp\l0x00002cb4      mov rax, rbx\l0x00002cb7      sub r12, r14\l0x00002cba      sub rax, r15\l0x00002cbd      cmp r12, rax\l0x00002cc0      cmovg r12, rax\l0x00002cc4      test r12, r12\l0x00002cc7      je 0x2c90\l"]
	"0x00002cc9" [URL="dbg.main/0x00002cc9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cc9      mov rax, qword [rsp]\l0x00002ccd      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc088:8]=0\l0x00002cd4      mov rdx, r12\l0x00002cd7      mov esi, 1\l0x00002cdc      lea rdi, [rax + r14]\l0x00002ce0      call sym.imp.fwrite_unlocked\l0x00002ce5      cmp r12, rax\l0x00002ce8      ja 0x2f3c\l"]
	"0x00002cee" [URL="dbg.main/0x00002cee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cee      add r15, r12\l0x00002cf1      add r14, r12\l0x00002cf4      jmp 0x2ca8\l"]
	"0x00002cf6" [URL="dbg.main/0x00002cf6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c98\l0x00002cf6      mov esi, 0xa\l0x00002cfb      mov rdi, r13\l0x00002cfe      call sym.imp.__overflow\l0x00002d03      add eax, 1\l0x00002d06      jne 0x2ca5\l"]
	"0x00002d08" [URL="dbg.main/0x00002d08", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d08      mov edx, 5\l0x00002d0d      lea rsi, str.write_error                               ; 0x8133 ; \"write error\"\l0x00002d14      xor edi, edi\l0x00002d16      call sym.imp.dcgettext\l0x00002d1b      mov r12, rax\l0x00002d1e      call sym.imp.__errno_location\l0x00002d23      mov rdx, r12                                           ; char *format\l0x00002d26      mov edi, 1                                             ; int status\l0x00002d2b      mov esi, dword [rax]                                   ; int errname\l0x00002d2d      xor eax, eax\l0x00002d2f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002d34" [URL="dbg.main/0x00002d34", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cab\l0x00002d34      mov rbx, r15\l0x00002d37      mov rbp, qword [var_18h]\l0x00002d3c      mov r15, r13\l0x00002d3f      mov r14, qword [var_20h]\l0x00002d44      mov r13, qword [var_8h]\l0x00002d49      jmp 0x2c44\l"]
	"0x00002d4e" [URL="dbg.main/0x00002d4e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b08\l0x00002d4e      mov rsi, qword [s2]                                    ; const char *s2\l0x00002d53      mov rdi, qword [filename]                              ; const char *s1\l0x00002d58      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002d5d      mov ebp, eax\l0x00002d5f      call sym.imp.__errno_location\l0x00002d64      mov rbx, rax\l0x00002d67      test ebp, ebp\l0x00002d69      jne 0x2db1\l"]
	"0x00002d6b" [URL="dbg.main/0x00002d6b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d6b      mov edx, 5\l0x00002d70      lea rsi, str.closing_standard_input                    ; 0x814d ; \"closing standard input\"\l0x00002d77      xor edi, edi\l0x00002d79      call sym.imp.dcgettext\l0x00002d7e      mov esi, dword [rbx]                                   ; int errname\l0x00002d80      mov edi, 1                                             ; int status\l0x00002d85      mov rdx, rax                                           ; char *format\l0x00002d88      xor eax, eax\l0x00002d8a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002d8f" [URL="dbg.main/0x00002d8f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ba8\l0x00002d8f      mov rax, qword [r15 + 0x28]\l0x00002d93      cmp rax, qword [r15 + 0x30]\l0x00002d97      jae 0x2ebd\l"]
	"0x00002d9d" [URL="dbg.main/0x00002d9d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d9d      lea rdx, [rax + 1]\l0x00002da1      mov qword [r15 + 0x28], rdx\l0x00002da5      mov byte [rax], 0xa\l"]
	"0x00002da8" [URL="dbg.main/0x00002da8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ecd\l0x00002da8      mov eax, dword [r13]\l0x00002dac      jmp 0x2bae\l"]
	"0x00002db1" [URL="dbg.main/0x00002db1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d69\l0x00002db1      mov rdx, qword [filename]                              ; int64_t arg3\l0x00002db6      mov esi, 3                                             ; int64_t arg2\l0x00002dbb      xor edi, edi                                           ; int64_t arg1\l0x00002dbd      call sym.quotearg_n_style_colon\l0x00002dc2      mov esi, dword [rbx]                                   ; int errname\l0x00002dc4      mov edi, 1                                             ; int status\l0x00002dc9      lea rdx, [0x000080fc]                                  ; \"%s\" ; char *format\l0x00002dd0      mov rcx, rax\l0x00002dd3      xor eax, eax\l0x00002dd5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002dda" [URL="dbg.main/0x00002dda", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aab\l0x00002dda      mov edx, 5\l0x00002ddf      lea rsi, str.invalid_input                             ; 0x813f ; \"invalid input\"\l0x00002de6      xor edi, edi\l0x00002de8      call sym.imp.dcgettext\l0x00002ded      xor esi, esi                                           ; int errname\l0x00002def      mov edi, 1                                             ; int status\l0x00002df4      mov rdx, rax                                           ; char *format\l0x00002df7      xor eax, eax\l0x00002df9      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002dfe" [URL="dbg.main/0x00002dfe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aa2\l0x00002dfe      mov edx, 5\l0x00002e03      lea rsi, str.write_error                               ; 0x8133 ; \"write error\"\l0x00002e0a      xor edi, edi\l0x00002e0c      call sym.imp.dcgettext\l0x00002e11      mov r12, rax\l0x00002e14      call sym.imp.__errno_location\l0x00002e19      mov rdx, r12                                           ; char *format\l0x00002e1c      mov edi, 1                                             ; int status\l0x00002e21      mov esi, dword [rax]                                   ; int errname\l0x00002e23      xor eax, eax\l0x00002e25      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002e2a" [URL="dbg.main/0x00002e2a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x291e\l0x00002e2a      mov edx, 5\l0x00002e2f      lea rsi, str.read_error                                ; 0x8128 ; \"read error\"\l0x00002e36      xor edi, edi\l0x00002e38      call sym.imp.dcgettext\l0x00002e3d      mov r12, rax\l0x00002e40      call sym.imp.__errno_location\l0x00002e45      mov rdx, r12                                           ; char *format\l0x00002e48      mov edi, 1                                             ; int status\l0x00002e4d      mov esi, dword [rax]                                   ; int errname\l0x00002e4f      xor eax, eax\l0x00002e51      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002e56" [URL="dbg.main/0x00002e56", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2881\l0x00002e56      mov rdi, qword [rbx + rax*8 + 8]                       ; int64_t arg1\l0x00002e5b      call dbg.quote\l0x00002e60      mov edx, 5\l0x00002e65      lea rsi, str.extra_operand__s                          ; 0x8114 ; \"extra operand %s\"\l0x00002e6c      xor edi, edi\l0x00002e6e      mov r12, rax\l0x00002e71      call sym.imp.dcgettext\l0x00002e76      mov rcx, r12\l0x00002e79      xor esi, esi                                           ; int errname\l0x00002e7b      xor edi, edi                                           ; int status\l0x00002e7d      mov rdx, rax                                           ; char *format\l0x00002e80      xor eax, eax\l0x00002e82      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002e87" [URL="dbg.main/0x00002e87", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2803, 0x2855\l0x00002e87      mov edi, 1                                             ; int64_t arg1\l0x00002e8c      call dbg.usage\l"]
	"0x00002e91" [URL="dbg.main/0x00002e91", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c3e\l0x00002e91      mov edx, 5\l0x00002e96      lea rsi, str.write_error                               ; 0x8133 ; \"write error\"\l0x00002e9d      xor edi, edi\l0x00002e9f      call sym.imp.dcgettext\l0x00002ea4      mov r12, rax\l0x00002ea7      call sym.imp.__errno_location\l0x00002eac      mov rdx, r12                                           ; char *format\l0x00002eaf      mov edi, 1                                             ; int status\l0x00002eb4      mov esi, dword [rax]                                   ; int errname\l0x00002eb6      xor eax, eax\l0x00002eb8      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002ebd" [URL="dbg.main/0x00002ebd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d97\l0x00002ebd      mov esi, 0xa\l0x00002ec2      mov rdi, r15\l0x00002ec5      call sym.imp.__overflow\l0x00002eca      add eax, 1\l0x00002ecd      jne 0x2da8\l"]
	"0x00002ed3" [URL="dbg.main/0x00002ed3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ed3      mov edx, 5\l0x00002ed8      lea rsi, str.write_error                               ; 0x8133 ; \"write error\"\l0x00002edf      xor edi, edi\l0x00002ee1      call sym.imp.dcgettext\l0x00002ee6      mov r12, rax\l0x00002ee9      call sym.imp.__errno_location\l0x00002eee      mov rdx, r12                                           ; char *format\l0x00002ef1      mov edi, 1                                             ; int status\l0x00002ef6      mov esi, dword [rax]                                   ; int errname\l0x00002ef8      xor eax, eax\l0x00002efa      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002eff" [URL="dbg.main/0x00002eff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x282b, 0x2839\l0x00002eff      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xc0a0:8]=0 ; int64_t arg1\l0x00002f06      call dbg.quote\l0x00002f0b      mov edx, 5\l0x00002f10      lea rsi, str.invalid_wrap_size                         ; 0x80e6 ; \"invalid wrap size\"\l0x00002f17      xor edi, edi\l0x00002f19      mov rbx, rax\l0x00002f1c      call sym.imp.dcgettext\l0x00002f21      mov r8, rbx\l0x00002f24      xor esi, esi                                           ; int errname\l0x00002f26      mov edi, 1                                             ; int status\l0x00002f2b      mov rcx, rax\l0x00002f2e      lea rdx, str._s:__s                                    ; 0x80f8 ; \"%s: %s\" ; char *format\l0x00002f35      xor eax, eax\l0x00002f37      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002f3c" [URL="dbg.main/0x00002f3c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ce8\l0x00002f3c      mov edx, 5\l0x00002f41      lea rsi, str.write_error                               ; 0x8133 ; \"write error\"\l0x00002f48      xor edi, edi\l0x00002f4a      call sym.imp.dcgettext\l0x00002f4f      mov r12, rax\l0x00002f52      call sym.imp.__errno_location\l0x00002f57      mov rdx, r12                                           ; char *format\l0x00002f5a      mov edi, 1                                             ; int status\l0x00002f5f      mov esi, dword [rax]                                   ; int errname\l0x00002f61      xor eax, eax\l0x00002f63      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002f68" [URL="dbg.main/0x00002f68", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b1c\l0x00002f68      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x00002700" -> "0x00002786" [color="#3a96dd"];
        "0x00002786" -> "0x00002873" [color="#13a10e"];
        "0x00002786" -> "0x000027a2" [color="#c50f1f"];
        "0x000027a2" -> "0x00002868" [color="#13a10e"];
        "0x000027a2" -> "0x000027ab" [color="#c50f1f"];
        "0x000027ab" -> "0x000027c0" [color="#13a10e"];
        "0x000027ab" -> "0x000027ad" [color="#c50f1f"];
        "0x000027ad" -> "0x00002800" [color="#13a10e"];
        "0x000027ad" -> "0x000027b2" [color="#c50f1f"];
        "0x000027b2" -> "0x00002786" [color="#3a96dd"];
        "0x000027c0" -> "0x00002850" [color="#13a10e"];
        "0x000027c0" -> "0x000027cb" [color="#c50f1f"];
        "0x00002800" -> "0x00002e87" [color="#13a10e"];
        "0x00002800" -> "0x00002809" [color="#c50f1f"];
        "0x00002809" -> "0x00002eff" [color="#13a10e"];
        "0x00002809" -> "0x00002831" [color="#c50f1f"];
        "0x00002831" -> "0x00002eff" [color="#13a10e"];
        "0x00002831" -> "0x0000283f" [color="#c50f1f"];
        "0x0000283f" -> "0x00002786" [color="#3a96dd"];
        "0x00002850" -> "0x00002e87" [color="#13a10e"];
        "0x00002850" -> "0x0000285b" [color="#c50f1f"];
        "0x0000285b" -> "0x00002868" [color="#3a96dd"];
        "0x00002868" -> "0x00002786" [color="#3a96dd"];
        "0x00002873" -> "0x00002e56" [color="#13a10e"];
        "0x00002873" -> "0x00002887" [color="#c50f1f"];
        "0x00002887" -> "0x000029c5" [color="#13a10e"];
        "0x00002887" -> "0x0000288f" [color="#c50f1f"];
        "0x0000288f" -> "0x000028a0" [color="#3a96dd"];
        "0x000028a0" -> "0x000028a7" [color="#3a96dd"];
        "0x000028a7" -> "0x00002b33" [color="#13a10e"];
        "0x000028a7" -> "0x000028bd" [color="#c50f1f"];
        "0x000028bd" -> "0x00002908" [color="#3a96dd"];
        "0x00002908" -> "0x0000293e" [color="#3a96dd"];
        "0x00002910" -> "0x00002e2a" [color="#13a10e"];
        "0x00002910" -> "0x00002924" [color="#c50f1f"];
        "0x00002924" -> "0x00002a40" [color="#13a10e"];
        "0x00002924" -> "0x00002936" [color="#c50f1f"];
        "0x00002936" -> "0x00002a40" [color="#13a10e"];
        "0x00002936" -> "0x0000293e" [color="#c50f1f"];
        "0x0000293e" -> "0x00002910" [color="#13a10e"];
        "0x0000293e" -> "0x00002967" [color="#c50f1f"];
        "0x00002967" -> "0x00002910" [color="#13a10e"];
        "0x00002967" -> "0x0000296c" [color="#c50f1f"];
        "0x0000296c" -> "0x00002981" [color="#3a96dd"];
        "0x00002978" -> "0x0000297c" [color="#3a96dd"];
        "0x0000297c" -> "0x00002910" [color="#13a10e"];
        "0x0000297c" -> "0x00002981" [color="#c50f1f"];
        "0x00002981" -> "0x00002978" [color="#13a10e"];
        "0x00002981" -> "0x000029a0" [color="#c50f1f"];
        "0x000029a0" -> "0x00002978" [color="#13a10e"];
        "0x000029a0" -> "0x000029a4" [color="#c50f1f"];
        "0x000029a4" -> "0x0000297c" [color="#3a96dd"];
        "0x000029c5" -> "0x000028a0" [color="#13a10e"];
        "0x000029c5" -> "0x000029ea" [color="#c50f1f"];
        "0x000029ea" -> "0x000028a7" [color="#13a10e"];
        "0x000029ea" -> "0x00002a07" [color="#c50f1f"];
        "0x00002a07" -> "0x00002a40" [color="#3a96dd"];
        "0x00002a40" -> "0x00002aba" [color="#3a96dd"];
        "0x00002a60" -> "0x00002ae0" [color="#13a10e"];
        "0x00002a60" -> "0x00002a64" [color="#c50f1f"];
        "0x00002a64" -> "0x00002a69" [color="#3a96dd"];
        "0x00002a69" -> "0x00002dfe" [color="#13a10e"];
        "0x00002a69" -> "0x00002aa8" [color="#c50f1f"];
        "0x00002aa8" -> "0x00002dda" [color="#13a10e"];
        "0x00002aa8" -> "0x00002ab1" [color="#c50f1f"];
        "0x00002ab1" -> "0x00002aba" [color="#3a96dd"];
        "0x00002aba" -> "0x00002a60" [color="#13a10e"];
        "0x00002aba" -> "0x00002abe" [color="#c50f1f"];
        "0x00002abe" -> "0x00002af9" [color="#13a10e"];
        "0x00002abe" -> "0x00002ac3" [color="#c50f1f"];
        "0x00002ac3" -> "0x00002ad8" [color="#13a10e"];
        "0x00002ac3" -> "0x00002ac8" [color="#c50f1f"];
        "0x00002ac8" -> "0x00002af9" [color="#13a10e"];
        "0x00002ac8" -> "0x00002ad0" [color="#c50f1f"];
        "0x00002ad0" -> "0x00002a69" [color="#3a96dd"];
        "0x00002ad8" -> "0x00002a69" [color="#13a10e"];
        "0x00002ad8" -> "0x00002ade" [color="#c50f1f"];
        "0x00002ade" -> "0x00002a64" [color="#3a96dd"];
        "0x00002ae0" -> "0x00002908" [color="#3a96dd"];
        "0x00002af9" -> "0x00002afd" [color="#3a96dd"];
        "0x00002afd" -> "0x00002d4e" [color="#13a10e"];
        "0x00002afd" -> "0x00002b0e" [color="#c50f1f"];
        "0x00002b0e" -> "0x00002f68" [color="#13a10e"];
        "0x00002b0e" -> "0x00002b22" [color="#c50f1f"];
        "0x00002b33" -> "0x00002b5c" [color="#3a96dd"];
        "0x00002b5c" -> "0x00002b71" [color="#3a96dd"];
        "0x00002b68" -> "0x00002be2" [color="#13a10e"];
        "0x00002b68" -> "0x00002b71" [color="#c50f1f"];
        "0x00002b71" -> "0x00002b68" [color="#13a10e"];
        "0x00002b71" -> "0x00002b96" [color="#c50f1f"];
        "0x00002b96" -> "0x00002be2" [color="#13a10e"];
        "0x00002b96" -> "0x00002b9b" [color="#c50f1f"];
        "0x00002b9b" -> "0x00002bae" [color="#13a10e"];
        "0x00002b9b" -> "0x00002ba5" [color="#c50f1f"];
        "0x00002ba5" -> "0x00002d8f" [color="#13a10e"];
        "0x00002ba5" -> "0x00002bae" [color="#c50f1f"];
        "0x00002bae" -> "0x00002afd" [color="#13a10e"];
        "0x00002bae" -> "0x00002bb6" [color="#c50f1f"];
        "0x00002bb6" -> "0x00002be2" [color="#3a96dd"];
        "0x00002be2" -> "0x00002c62" [color="#13a10e"];
        "0x00002be2" -> "0x00002c1f" [color="#c50f1f"];
        "0x00002c1f" -> "0x00002e91" [color="#13a10e"];
        "0x00002c1f" -> "0x00002c44" [color="#c50f1f"];
        "0x00002c44" -> "0x00002b9b" [color="#13a10e"];
        "0x00002c44" -> "0x00002c50" [color="#c50f1f"];
        "0x00002c50" -> "0x00002b5c" [color="#13a10e"];
        "0x00002c50" -> "0x00002c5d" [color="#c50f1f"];
        "0x00002c5d" -> "0x00002b9b" [color="#3a96dd"];
        "0x00002c62" -> "0x00002cb1" [color="#3a96dd"];
        "0x00002c90" -> "0x00002cf6" [color="#13a10e"];
        "0x00002c90" -> "0x00002c9a" [color="#c50f1f"];
        "0x00002c9a" -> "0x00002ca5" [color="#3a96dd"];
        "0x00002ca5" -> "0x00002ca8" [color="#3a96dd"];
        "0x00002ca8" -> "0x00002d34" [color="#13a10e"];
        "0x00002ca8" -> "0x00002cb1" [color="#c50f1f"];
        "0x00002cb1" -> "0x00002c90" [color="#13a10e"];
        "0x00002cb1" -> "0x00002cc9" [color="#c50f1f"];
        "0x00002cc9" -> "0x00002f3c" [color="#13a10e"];
        "0x00002cc9" -> "0x00002cee" [color="#c50f1f"];
        "0x00002cee" -> "0x00002ca8" [color="#3a96dd"];
        "0x00002cf6" -> "0x00002ca5" [color="#13a10e"];
        "0x00002cf6" -> "0x00002d08" [color="#c50f1f"];
        "0x00002d08" -> "0x00002d34" [color="#3a96dd"];
        "0x00002d34" -> "0x00002c44" [color="#3a96dd"];
        "0x00002d4e" -> "0x00002db1" [color="#13a10e"];
        "0x00002d4e" -> "0x00002d6b" [color="#c50f1f"];
        "0x00002d6b" -> "0x00002d8f" [color="#3a96dd"];
        "0x00002d8f" -> "0x00002ebd" [color="#13a10e"];
        "0x00002d8f" -> "0x00002d9d" [color="#c50f1f"];
        "0x00002d9d" -> "0x00002da8" [color="#3a96dd"];
        "0x00002da8" -> "0x00002bae" [color="#3a96dd"];
        "0x00002db1" -> "0x00002dda" [color="#3a96dd"];
        "0x00002dda" -> "0x00002dfe" [color="#3a96dd"];
        "0x00002dfe" -> "0x00002e2a" [color="#3a96dd"];
        "0x00002e2a" -> "0x00002e56" [color="#3a96dd"];
        "0x00002e56" -> "0x00002e87" [color="#3a96dd"];
        "0x00002e87" -> "0x00002e91" [color="#3a96dd"];
        "0x00002e91" -> "0x00002ebd" [color="#3a96dd"];
        "0x00002ebd" -> "0x00002da8" [color="#13a10e"];
        "0x00002ebd" -> "0x00002ed3" [color="#c50f1f"];
        "0x00002ed3" -> "0x00002eff" [color="#3a96dd"];
        "0x00002eff" -> "0x00002f3c" [color="#3a96dd"];
        "0x00002f3c" -> "0x00002f68" [color="#3a96dd"];
}
