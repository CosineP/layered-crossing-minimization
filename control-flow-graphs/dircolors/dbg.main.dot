digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000026d0" [URL="dbg.main/0x000026d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2b78\l1148: int dbg.main (int argc, char **argv);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000026d0      endbr64                                                ; int main(int argc,char ** argv);\l0x000026d4      push r15\l0x000026d6      mov r15d, 2\l0x000026dc      push r14\l0x000026de      lea r14, obj.long_options                              ; 0xc860\l0x000026e5      push r13\l0x000026e7      lea r13, [0x00008160]                                  ; \"bcp\"\l0x000026ee      push r12\l0x000026f0      lea r12, [0x000080d9]                                  ; \"coreutils\"\l0x000026f7      push rbp\l0x000026f8      mov ebp, edi                                           ; argc\l0x000026fa      push rbx\l0x000026fb      mov rbx, rsi                                           ; argv\l0x000026fe      sub rsp, 8\l0x00002702      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002705      call dbg.set_program_name\l0x0000270a      lea rsi, [0x00008104]                                  ; const char *locale\l0x00002711      mov edi, 6                                             ; int category\l0x00002716      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000271b      lea rsi, str._usr_local_share_locale                   ; 0x8139 ; \"/usr/local/share/locale\" ; char *dirname\l0x00002722      mov rdi, r12                                           ; char *domainname\l0x00002725      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x0000272a      mov rdi, r12                                           ; char *domainname\l0x0000272d      xor r12d, r12d\l0x00002730      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002735      lea rdi, [dbg.close_stdout]                            ; 0x38f0 ; func function\l0x0000273c      call sym.atexit                                        ; int atexit(func function)\l0x00002741      nop dword [rax]\l"]
	"0x00002748" [URL="dbg.main/0x00002748", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x277a, 0x27cf, 0x27f3\l0x00002748      xor r8d, r8d\l0x0000274b      mov rcx, r14\l0x0000274e      mov rdx, r13\l0x00002751      mov rsi, rbx\l0x00002754      mov edi, ebp\l0x00002756      call sym.imp.getopt_long\l0x0000275b      cmp eax, 0xffffffff\l0x0000275e      je 0x27f8\l"]
	"0x00002764" [URL="dbg.main/0x00002764", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002764      cmp eax, 0x62\l0x00002767      je 0x27f0\l"]
	"0x0000276d" [URL="dbg.main/0x0000276d", fillcolor="white",color="#767676", fontname="Courier",label="0x0000276d      jle 0x2780\l"]
	"0x0000276f" [URL="dbg.main/0x0000276f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000276f      cmp eax, 0x63\l0x00002772      jne 0x27c0\l"]
	"0x00002774" [URL="dbg.main/0x00002774", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002774      mov r15d, 1\l0x0000277a      jmp 0x2748\l"]
	"0x00002780" [URL="dbg.main/0x00002780", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x276d\l0x00002780      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002785      jne 0x27d4\l"]
	"0x00002787" [URL="dbg.main/0x00002787", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002787      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0 ; int64_t arg1\l0x0000278e      mov rcx, qword [obj.Version]                           ; [0xd010:8]=0x983e ; \">\\x98\" ; int64_t arg5\l0x00002795      xor eax, eax\l0x00002797      xor r9d, r9d                                           ; int64_t arg_c0h\l0x0000279a      lea r8, str.H._Peter_Anvin                             ; 0x8151 ; \"H. Peter Anvin\" ; int64_t arg6\l0x000027a1      lea rdx, str.GNU_coreutils                             ; 0x80d5 ; \"GNU coreutils\" ; int64_t arg3\l0x000027a8      lea rsi, str.dircolors                                 ; 0x8037 ; \"dircolors\" ; int64_t arg2\l0x000027af      call dbg.version_etc\l0x000027b4      xor edi, edi                                           ; int status\l0x000027b6      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x000027c0" [URL="dbg.main/0x000027c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2772\l0x000027c0      cmp eax, 0x70\l0x000027c3      jne 0x2a92\l"]
	"0x000027c9" [URL="dbg.main/0x000027c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027c9      mov r12d, 1\l0x000027cf      jmp 0x2748\l"]
	"0x000027d4" [URL="dbg.main/0x000027d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2785\l0x000027d4      cmp eax, 0xffffff7e                                    ; 4294967166\l0x000027d9      jne 0x2a92\l"]
	"0x000027df" [URL="dbg.main/0x000027df", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027df      xor edi, edi                                           ; int64_t arg1\l0x000027e1      call dbg.usage\l"]
	"0x000027f0" [URL="dbg.main/0x000027f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2767\l0x000027f0      xor r15d, r15d\l0x000027f3      jmp 0x2748\l"]
	"0x000027f8" [URL="dbg.main/0x000027f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x275e\l0x000027f8      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd0b8:4]=0\l0x000027ff      sub ebp, eax\l0x00002801      lea rbx, [rbx + rax*8]\l0x00002805      cmp r15d, 2                                            ; \"\\\"?\"\l0x00002809      je 0x2814\l"]
	"0x0000280b" [URL="dbg.main/0x0000280b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000280b      test r12b, r12b\l0x0000280e      jne 0x2a71\l"]
	"0x00002814" [URL="dbg.main/0x00002814", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2809\l0x00002814      mov eax, r12d\l0x00002817      xor eax, 1\l0x0000281a      movzx eax, al\l0x0000281d      cmp eax, ebp\l0x0000281f      jl 0x2a9c\l"]
	"0x00002825" [URL="dbg.main/0x00002825", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002825      test r12b, r12b\l0x00002828      je 0x286b\l"]
	"0x0000282a" [URL="dbg.main/0x0000282a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000282a      lea rbp, obj.G_line                                    ; 0x8760 ; \"# Configuration file for dircolors, a utility to help you set the\"\l0x00002831      mov rbx, rbp\l"]
	"0x00002834" [URL="dbg.main/0x00002834", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2855\l0x00002834      mov rdi, rbx                                           ; const char *s\l0x00002837      call sym.imp.puts                                      ; int puts(const char *s)\l0x0000283c      mov rdi, rbx                                           ; const char *s\l0x0000283f      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00002844      lea rbx, [rbx + rax + 1]\l0x00002849      mov rax, rbx\l0x0000284c      sub rax, rbp\l0x0000284f      cmp rax, 0x10dd\l0x00002855      jbe 0x2834\l"]
	"0x00002857" [URL="dbg.main/0x00002857", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28fe, 0x29ba, 0x2a61\l0x00002857      xor r12d, 1\l0x0000285b      pop rdx\l0x0000285c      pop rbx\l0x0000285d      movzx eax, r12b\l0x00002861      pop rbp\l0x00002862      pop r12\l0x00002864      pop r13\l0x00002866      pop r14\l0x00002868      pop r15\l0x0000286a      ret\l"]
	"0x0000286b" [URL="dbg.main/0x0000286b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2828\l0x0000286b      cmp r15d, 2                                            ; \"\\\"?\"\l0x0000286f      je 0x29d0\l"]
	"0x00002875" [URL="dbg.main/0x00002875", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a24, 0x2a6c\l0x00002875      mov r8, qword [0x0000cfc8]                             ; [0xcfc8:8]=0xd750 reloc.free ; int64_t arg5\l0x0000287c      mov rcx, qword [0x0000cfe8]                            ; [0xcfe8:8]=0xd770 reloc.malloc ; int64_t arg4\l0x00002883      xor edx, edx                                           ; int64_t arg3\l0x00002885      xor esi, esi                                           ; int64_t arg2\l0x00002887      lea rdi, obj.lsc_obstack                               ; 0xd100 ; int64_t arg1\l0x0000288e      call dbg._obstack_begin\l0x00002893      test ebp, ebp\l0x00002895      je 0x29bf\l"]
	"0x0000289b" [URL="dbg.main/0x0000289b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000289b      mov r13, qword [rbx]\l0x0000289e      lea rsi, [0x0000816f]                                  ; \"-\" ; const char *s2\l0x000028a5      mov rdi, r13                                           ; const char *s1\l0x000028a8      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x000028ad      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xd0b0:8]=0\l0x000028b4      test eax, eax\l0x000028b6      je 0x28da\l"]
	"0x000028b8" [URL="dbg.main/0x000028b8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028b8      mov rdx, rdi                                           ; int64_t arg3\l0x000028bb      lea rsi, [0x0000984c]                                  ; \"r\" ; int64_t arg2\l0x000028c2      mov rdi, r13                                           ; int64_t arg1\l0x000028c5      call dbg.freopen_safer\l0x000028ca      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xd0b0:8]=0\l0x000028d1      test rax, rax\l0x000028d4      je 0x2a35\l"]
	"0x000028da" [URL="dbg.main/0x000028da", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28b6\l0x000028da      mov rsi, r13                                           ; int64_t arg2\l0x000028dd      call dbg.dc_parse_stream\l0x000028e2      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xd0b0:8]=0 ; int64_t arg1\l0x000028e9      mov ebx, eax\l0x000028eb      call dbg.rpl_fclose\l0x000028f0      test eax, eax\l0x000028f2      jne 0x2a35\l"]
	"0x000028f8" [URL="dbg.main/0x000028f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028f8      mov r12d, ebx\l"]
	"0x000028fb" [URL="dbg.main/0x000028fb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29cb\l0x000028fb      test r12b, r12b\l0x000028fe      je 0x2857\l"]
	"0x00002904" [URL="dbg.main/0x00002904", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002904      mov rax, qword [0x0000d118]                            ; [0xd118:8]=5\l0x0000290b      mov r13, qword [0x0000d110]                            ; [0xd110:8]=0\l0x00002912      mov r14, rax\l0x00002915      sub r14, r13\l0x00002918      cmp rax, r13\l0x0000291b      je 0x2a29\l"]
	"0x00002921" [URL="dbg.main/0x00002921", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a30\l0x00002921      mov rdx, qword [0x0000d130]                            ; [0xd130:8]=0\l0x00002928      lea rbp, str.__nexport_LS_COLORS_n                     ; 0x8118 ; \"';\\nexport LS_COLORS\\n\"\l0x0000292f      lea rdi, str.LS_COLORS                                 ; 0x812d ; \"LS_COLORS='\"\l0x00002936      add rax, rdx\l0x00002939      not rdx\l0x0000293c      and rax, rdx\l0x0000293f      mov rdx, qword [0x0000d120]                            ; [0xd120:8]=0\l0x00002946      mov rsi, rax\l0x00002949      sub rsi, qword [0x0000d108]                            ; [0xd108:8]=0\l0x00002950      mov rcx, rdx\l0x00002953      sub rcx, qword [0x0000d108]                            ; [0xd108:8]=0\l0x0000295a      cmp rsi, rcx\l0x0000295d      mov rsi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0\l0x00002964      cmovbe rdx, rax\l0x00002968      test r15d, r15d\l0x0000296b      lea rax, [0x00008102]                                  ; \"'\\n\"\l0x00002972      cmovne rbp, rax\l0x00002976      lea rax, str.setenv_LS_COLORS_                         ; 0x8105 ; \"setenv LS_COLORS '\"\l0x0000297d      cmovne rdi, rax\l0x00002981      mov qword [0x0000d118], rdx                            ; [0xd118:8]=5\l0x00002988      mov qword [0x0000d110], rdx                            ; [0xd110:8]=0\l0x0000298f      call sym.imp.fputs_unlocked\l0x00002994      mov rdi, r13\l0x00002997      mov rdx, r14\l0x0000299a      mov esi, 1\l0x0000299f      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0\l0x000029a6      call sym.imp.fwrite_unlocked\l0x000029ab      mov rsi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0\l0x000029b2      mov rdi, rbp\l0x000029b5      call sym.imp.fputs_unlocked\l0x000029ba      jmp 0x2857\l"]
	"0x000029bf" [URL="dbg.main/0x000029bf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2895\l0x000029bf      xor esi, esi                                           ; int64_t arg2\l0x000029c1      xor edi, edi                                           ; int64_t arg1\l0x000029c3      call dbg.dc_parse_stream\l0x000029c8      mov r12d, eax\l0x000029cb      jmp 0x28fb\l"]
	"0x000029d0" [URL="dbg.main/0x000029d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x286f\l0x000029d0      lea rdi, str.SHELL                                     ; 0x8164 ; \"SHELL\" ; const char *name\l0x000029d7      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x000029dc      mov rdi, rax\l0x000029df      test rax, rax\l0x000029e2      je 0x2b06\l"]
	"0x000029e8" [URL="dbg.main/0x000029e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e8      cmp byte [rax], 0\l0x000029eb      je 0x2b06\l"]
	"0x000029f1" [URL="dbg.main/0x000029f1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029f1      call dbg.last_component\l0x000029f6      lea rsi, [0x0000816b]                                  ; \"csh\" ; const char *s2\l0x000029fd      mov rdi, rax                                           ; const char *s1\l0x00002a00      mov r13, rax\l0x00002a03      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002a08      test eax, eax\l0x00002a0a      je 0x2a66\l"]
	"0x00002a0c" [URL="dbg.main/0x00002a0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a0c      lea rsi, str.tcsh                                      ; 0x816a ; \"tcsh\" ; const char *s2\l0x00002a13      mov rdi, r13                                           ; const char *s1\l0x00002a16      xor r15d, r15d\l0x00002a19      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002a1e      test eax, eax\l0x00002a20      sete r15b\l0x00002a24      jmp 0x2875\l"]
	"0x00002a29" [URL="dbg.main/0x00002a29", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x291b\l0x00002a29      or byte [0x0000d150], 2                                ; [0xd150:1]=2\l0x00002a30      jmp 0x2921\l"]
	"0x00002a35" [URL="dbg.main/0x00002a35", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28d4, 0x28f2\l0x00002a35      mov rdx, r13                                           ; int64_t arg3\l0x00002a38      xor edi, edi                                           ; int64_t arg1\l0x00002a3a      mov esi, 3                                             ; int64_t arg2\l0x00002a3f      call sym.quotearg_n_style_colon\l0x00002a44      mov r13, rax\l0x00002a47      call sym.imp.__errno_location\l0x00002a4c      mov rcx, r13\l0x00002a4f      lea rdx, [0x00009852]                                  ; \"%s\" ; char *format\l0x00002a56      xor edi, edi                                           ; int status\l0x00002a58      mov esi, dword [rax]                                   ; int errname\l0x00002a5a      xor eax, eax\l0x00002a5c      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002a61      jmp 0x2857\l"]
	"0x00002a66" [URL="dbg.main/0x00002a66", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a0a\l0x00002a66      mov r15d, 1\l0x00002a6c      jmp 0x2875\l"]
	"0x00002a71" [URL="dbg.main/0x00002a71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x280e\l0x00002a71      mov edx, 5\l0x00002a76      lea rsi, str.the_options_to_output_dircolors_internal_database_and_nto_select_a_shell_syntax_are_mutually_exclusive ; 0x8660 ; \"the options to output dircolors' internal database and\\nto select a shell syntax are mutually exclusive\"\l0x00002a7d      xor edi, edi\l0x00002a7f      call sym.imp.dcgettext\l0x00002a84      xor esi, esi                                           ; int errname\l0x00002a86      xor edi, edi                                           ; int status\l0x00002a88      mov rdx, rax                                           ; char *format\l0x00002a8b      xor eax, eax\l0x00002a8d      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002a92" [URL="dbg.main/0x00002a92", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x27c3, 0x27d9, 0x2b04, 0x2b5a\l0x00002a92      mov edi, 1                                             ; int64_t arg1\l0x00002a97      call dbg.usage\l"]
	"0x00002a9c" [URL="dbg.main/0x00002a9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x281f\l0x00002a9c      test r12b, r12b\l0x00002a9f      je 0x2b2a\l"]
	"0x00002aa5" [URL="dbg.main/0x00002aa5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002aa5      mov rdi, qword [rbx]                                   ; int64_t arg1\l0x00002aa8      call dbg.quote\l0x00002aad      xor edi, edi\l0x00002aaf      mov edx, 5\l0x00002ab4      lea rsi, str.extra_operand__s                          ; 0x8171 ; \"extra operand %s\"\l0x00002abb      mov r12, rax\l0x00002abe      call sym.imp.dcgettext\l0x00002ac3      mov rcx, r12\l0x00002ac6      xor esi, esi                                           ; int errname\l0x00002ac8      xor edi, edi                                           ; int status\l0x00002aca      mov rdx, rax                                           ; char *format\l0x00002acd      xor eax, eax\l0x00002acf      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ad4      xor edi, edi\l0x00002ad6      mov edx, 5\l0x00002adb      lea rsi, str.file_operands_cannot_be_combined_with___print_database___p_ ; 0x8708 ; \"file operands cannot be combined with --print-database (-p)\"\l0x00002ae2      call sym.imp.dcgettext\l0x00002ae7      mov rdi, qword [obj.stderr]                            ; obj.stderr_GLIBC_2.2.5\l                                                                       ; [0xd0e0:8]=0\l0x00002aee      mov esi, 1\l0x00002af3      lea rdx, [0x00009c70]                                  ; \"%s\\n\"\l0x00002afa      mov rcx, rax\l0x00002afd      xor eax, eax\l0x00002aff      call sym.imp.__fprintf_chk\l0x00002b04      jmp 0x2a92\l"]
	"0x00002b06" [URL="dbg.main/0x00002b06", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x29e2, 0x29eb\l0x00002b06      mov edx, 5\l0x00002b0b      lea rsi, str.no_SHELL_environment_variable__and_no_shell_type_option_given ; 0x86c8 ; \"no SHELL environment variable, and no shell type option given\"\l0x00002b12      xor edi, edi\l0x00002b14      call sym.imp.dcgettext\l0x00002b19      xor esi, esi                                           ; int errname\l0x00002b1b      mov edi, 1                                             ; int status\l0x00002b20      mov rdx, rax                                           ; char *format\l0x00002b23      xor eax, eax\l0x00002b25      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002b2a" [URL="dbg.main/0x00002b2a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a9f\l0x00002b2a      mov rdi, qword [rbx + 8]                               ; int64_t arg1\l0x00002b2e      call dbg.quote\l0x00002b33      xor edi, edi\l0x00002b35      mov edx, 5\l0x00002b3a      lea rsi, str.extra_operand__s                          ; 0x8171 ; \"extra operand %s\"\l0x00002b41      mov r12, rax\l0x00002b44      call sym.imp.dcgettext\l0x00002b49      mov rcx, r12\l0x00002b4c      xor esi, esi                                           ; int errname\l0x00002b4e      xor edi, edi                                           ; int status\l0x00002b50      mov rdx, rax                                           ; char *format\l0x00002b53      xor eax, eax\l0x00002b55      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002b5a      jmp 0x2a92\l"]
        "0x000026d0" -> "0x00002748" [color="#3a96dd"];
        "0x00002748" -> "0x000027f8" [color="#13a10e"];
        "0x00002748" -> "0x00002764" [color="#c50f1f"];
        "0x00002764" -> "0x000027f0" [color="#13a10e"];
        "0x00002764" -> "0x0000276d" [color="#c50f1f"];
        "0x0000276d" -> "0x00002780" [color="#13a10e"];
        "0x0000276d" -> "0x0000276f" [color="#c50f1f"];
        "0x0000276f" -> "0x000027c0" [color="#13a10e"];
        "0x0000276f" -> "0x00002774" [color="#c50f1f"];
        "0x00002774" -> "0x00002748" [color="#3a96dd"];
        "0x00002780" -> "0x000027d4" [color="#13a10e"];
        "0x00002780" -> "0x00002787" [color="#c50f1f"];
        "0x000027c0" -> "0x00002a92" [color="#13a10e"];
        "0x000027c0" -> "0x000027c9" [color="#c50f1f"];
        "0x000027c9" -> "0x00002748" [color="#3a96dd"];
        "0x000027d4" -> "0x00002a92" [color="#13a10e"];
        "0x000027d4" -> "0x000027df" [color="#c50f1f"];
        "0x000027f0" -> "0x00002748" [color="#3a96dd"];
        "0x000027f8" -> "0x00002814" [color="#13a10e"];
        "0x000027f8" -> "0x0000280b" [color="#c50f1f"];
        "0x0000280b" -> "0x00002a71" [color="#13a10e"];
        "0x0000280b" -> "0x00002814" [color="#c50f1f"];
        "0x00002814" -> "0x00002a9c" [color="#13a10e"];
        "0x00002814" -> "0x00002825" [color="#c50f1f"];
        "0x00002825" -> "0x0000286b" [color="#13a10e"];
        "0x00002825" -> "0x0000282a" [color="#c50f1f"];
        "0x0000282a" -> "0x00002834" [color="#3a96dd"];
        "0x00002834" -> "0x00002834" [color="#13a10e"];
        "0x00002834" -> "0x00002857" [color="#c50f1f"];
        "0x0000286b" -> "0x000029d0" [color="#13a10e"];
        "0x0000286b" -> "0x00002875" [color="#c50f1f"];
        "0x00002875" -> "0x000029bf" [color="#13a10e"];
        "0x00002875" -> "0x0000289b" [color="#c50f1f"];
        "0x0000289b" -> "0x000028da" [color="#13a10e"];
        "0x0000289b" -> "0x000028b8" [color="#c50f1f"];
        "0x000028b8" -> "0x00002a35" [color="#13a10e"];
        "0x000028b8" -> "0x000028da" [color="#c50f1f"];
        "0x000028da" -> "0x00002a35" [color="#13a10e"];
        "0x000028da" -> "0x000028f8" [color="#c50f1f"];
        "0x000028f8" -> "0x000028fb" [color="#3a96dd"];
        "0x000028fb" -> "0x00002857" [color="#13a10e"];
        "0x000028fb" -> "0x00002904" [color="#c50f1f"];
        "0x00002904" -> "0x00002a29" [color="#13a10e"];
        "0x00002904" -> "0x00002921" [color="#c50f1f"];
        "0x00002921" -> "0x00002857" [color="#3a96dd"];
        "0x000029bf" -> "0x000028fb" [color="#3a96dd"];
        "0x000029d0" -> "0x00002b06" [color="#13a10e"];
        "0x000029d0" -> "0x000029e8" [color="#c50f1f"];
        "0x000029e8" -> "0x00002b06" [color="#13a10e"];
        "0x000029e8" -> "0x000029f1" [color="#c50f1f"];
        "0x000029f1" -> "0x00002a66" [color="#13a10e"];
        "0x000029f1" -> "0x00002a0c" [color="#c50f1f"];
        "0x00002a0c" -> "0x00002875" [color="#3a96dd"];
        "0x00002a29" -> "0x00002921" [color="#3a96dd"];
        "0x00002a35" -> "0x00002857" [color="#3a96dd"];
        "0x00002a66" -> "0x00002875" [color="#3a96dd"];
        "0x00002a71" -> "0x00002a92" [color="#3a96dd"];
        "0x00002a92" -> "0x00002a9c" [color="#3a96dd"];
        "0x00002a9c" -> "0x00002b2a" [color="#13a10e"];
        "0x00002a9c" -> "0x00002aa5" [color="#c50f1f"];
        "0x00002aa5" -> "0x00002a92" [color="#3a96dd"];
        "0x00002b06" -> "0x00002b2a" [color="#3a96dd"];
        "0x00002b2a" -> "0x00002a92" [color="#3a96dd"];
}
