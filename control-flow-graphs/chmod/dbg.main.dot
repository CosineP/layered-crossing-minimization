digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002850" [URL="dbg.main/0x00002850", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x35c8\l3375: int dbg.main (int argc, char **argv);\l; var size_t mode_alloc @ rbp-0xe8\l; var stat new_stats @ rbp-0xe0\l; var char[12] new_perms @ rbp-0x50\l; var char[12] naively_expected_perms @ rbp-0x44\l; var void *mode @ rsp+0x18\l; var size_t *var_10h @ rsp+0x20\l; var uint32_t var_18h @ rsp+0x28\l; var size_t *var_20h @ rsp+0x30\l; var int64_t var_28h @ rsp+0x38\l; var int64_t var_30h @ rsp+0x40\l; var int64_t var_38h @ rsp+0x48\l; var uint32_t var_48h @ rsp+0x58\l; var int64_t var_50h @ rsp+0x60\l; var int64_t var_68h @ rsp+0x78\l; var char *bp @ rsp+0xf0\l; var int64_t var_e1h @ rsp+0xf1\l; var int64_t var_eah @ rsp+0xfa\l; var char *var_ech @ rsp+0xfc\l; var int64_t var_edh @ rsp+0xfd\l; var int64_t var_f6h @ rsp+0x106\l; var int64_t var_f8h @ rsp+0x108\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002850      endbr64                                                ; int main(int argc,char ** argv);\l0x00002854      push r15\l0x00002856      movabs r15, 0x40200000041fe3\l0x00002860      push r14\l0x00002862      lea r14, obj.long_options                              ; 0x10a20\l0x00002869      push r13\l0x0000286b      lea r13, str.Rcfvr::w::x::X::s::t::u::g::o::a::_::::::0::1::2::3::4::5::6::7:: ; 0xc668 ; \"Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::0::1::2::3::4::5::6::7::\"\l0x00002872      push r12\l0x00002874      movsxd r12, edi                                        ; argc\l0x00002877      push rbp\l0x00002878      lea rbp, [0x0000c084]                                  ; \"coreutils\"\l0x0000287f      push rbx\l0x00002880      mov rbx, rsi                                           ; argv\l0x00002883      sub rsp, 0x108\l0x0000288a      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x0000288d      mov rax, qword fs:[0x28]\l0x00002896      mov qword [var_f8h], rax\l0x0000289e      xor eax, eax\l0x000028a0      mov qword [var_48h], 0\l0x000028a9      call dbg.set_program_name\l0x000028ae      lea rsi, [0x0000cee1]                                  ; const char *locale\l0x000028b5      mov edi, 6                                             ; int category\l0x000028ba      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000028bf      lea rsi, str._usr_local_share_locale                   ; 0xc0ad ; \"/usr/local/share/locale\" ; char *dirname\l0x000028c6      mov rdi, rbp                                           ; char *domainname\l0x000028c9      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000028ce      mov rdi, rbp                                           ; char *domainname\l0x000028d1      xor ebp, ebp\l0x000028d3      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000028d8      lea rdi, [dbg.close_stdout]                            ; 0x3ac0 ; func function\l0x000028df      call sym.atexit                                        ; int atexit(func function)\l0x000028e4      mov byte [obj.diagnose_surprises], 0                   ; [0x11108:1]=1\l0x000028eb      mov byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x000028f2      mov byte [obj.recurse], 0                              ; [0x1110a:1]=1\l0x000028f9      mov qword [var_18h], 0\l0x00002902      mov qword [mode], 0\l0x0000290b      mov qword [var_10h], 0\l0x00002914      nop dword [rax]\l"]
	"0x00002918" [URL="dbg.main/0x00002918", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x000029a2  CODE 0x00002a24  CODE 0x00002a4d  \l; XREFS: CODE 0x00002a5d  CODE 0x00002a72  CODE 0x00002a87  \l; XREFS: CODE 0x00002a9a  CODE 0x00002b10  \l0x00002918      xor r8d, r8d\l0x0000291b      mov rcx, r14\l0x0000291e      mov rdx, r13\l0x00002921      mov rsi, rbx\l0x00002924      mov edi, r12d\l0x00002927      call sym.imp.getopt_long\l0x0000292c      cmp eax, 0xffffffff\l0x0000292f      je 0x2b5c\l"]
	"0x00002935" [URL="dbg.main/0x00002935", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002935      cmp eax, 0x78\l0x00002938      jg 0x2980\l"]
	"0x0000293a" [URL="dbg.main/0x0000293a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000293a      cmp eax, 0x65\l0x0000293d      jg 0x29f8\l"]
	"0x00002943" [URL="dbg.main/0x00002943", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002943      cmp eax, 0x63\l0x00002946      jg 0x296c\l"]
	"0x00002948" [URL="dbg.main/0x00002948", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002948      cmp eax, 0x2a\l0x0000294b      jle 0x29b0\l"]
	"0x0000294d" [URL="dbg.main/0x0000294d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000294d      lea edx, [rax - 0x2b]\l0x00002950      bt r15, rdx\l0x00002954      jb 0x2aa0\l"]
	"0x0000295a" [URL="dbg.main/0x0000295a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000295a      cmp eax, 0x63\l0x0000295d      je 0x2a90\l"]
	"0x00002963" [URL="dbg.main/0x00002963", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002963      cmp eax, 0x52\l0x00002966      je 0x2a80\l"]
	"0x0000296c" [URL="dbg.main/0x0000296c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002946  CODE 0x00002a17  CODE 0x00002a2e  \l; XREFS: CODE 0x00002a45  CODE 0x00003383  CODE 0x0000358a  \l0x0000296c      mov edi, 1                                             ; int64_t arg1\l0x00002971      call dbg.usage\l0x00002976      nop word cs:[rax + rax]\l"]
	"0x00002980" [URL="dbg.main/0x00002980", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2938\l0x00002980      cmp eax, 0x81\l0x00002985      je 0x2a58\l"]
	"0x0000298b" [URL="dbg.main/0x0000298b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000298b      cmp eax, 0x82\l0x00002990      jne 0x2a40\l"]
	"0x00002996" [URL="dbg.main/0x00002996", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002996      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x110c0:8]=0\l0x0000299d      mov qword [var_18h], rax\l0x000029a2      jmp 0x2918\l"]
	"0x000029b0" [URL="dbg.main/0x000029b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x294b\l0x000029b0      cmp eax, 0xffffff7d                                    ; 4294967165\l0x000029b5      jne 0x2a29\l"]
	"0x000029b7" [URL="dbg.main/0x000029b7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029b7      sub rsp, 8\l0x000029bb      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x110a8:8]=0 ; func main\l0x000029c2      xor eax, eax\l0x000029c4      mov rcx, qword [obj.Version]                           ; [0x11018:8]=0xc9c4 ; func init\l0x000029cb      push 0\l0x000029cd      lea r9, str.Jim_Meyering                               ; 0xc0c5 ; \"Jim Meyering\" ; int64_t arg_c0h\l0x000029d4      lea r8, str.David_MacKenzie                            ; 0xc0d2 ; \"David MacKenzie\" ; int64_t arg6\l0x000029db      lea rdx, str.GNU_coreutils                             ; 0xc080 ; \"GNU coreutils\" ; int64_t arg3\l0x000029e2      lea rsi, [global_program]                              ; 0xc004 ; \"chmod\" ; int64_t arg2\l0x000029e9      call dbg.version_etc\l0x000029ee      xor edi, edi                                           ; int status\l0x000029f0      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x000029f8" [URL="dbg.main/0x000029f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x293d\l0x000029f8      lea ecx, [rax - 0x66]\l0x000029fb      mov edx, 1\l0x00002a00      shl rdx, cl\l0x00002a03      test edx, 0x6f202\l0x00002a09      jne 0x2aa0\l"]
	"0x00002a0f" [URL="dbg.main/0x00002a0f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a0f      cmp eax, 0x76\l0x00002a12      je 0x2a68\l"]
	"0x00002a14" [URL="dbg.main/0x00002a14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a14      and edx, 1\l0x00002a17      je 0x296c\l"]
	"0x00002a1d" [URL="dbg.main/0x00002a1d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a1d      mov byte [obj.force_silent], 1                         ; [0x11109:1]=1\l0x00002a24      jmp 0x2918\l"]
	"0x00002a29" [URL="dbg.main/0x00002a29", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29b5\l0x00002a29      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002a2e      jne 0x296c\l"]
	"0x00002a34" [URL="dbg.main/0x00002a34", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a34      xor edi, edi                                           ; int64_t arg1\l0x00002a36      call dbg.usage\l0x00002a3b      nop dword [rax + rax]\l"]
	"0x00002a40" [URL="dbg.main/0x00002a40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2990\l0x00002a40      cmp eax, 0x80\l0x00002a45      jne 0x296c\l"]
	"0x00002a4b" [URL="dbg.main/0x00002a4b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a4b      xor ebp, ebp\l0x00002a4d      jmp 0x2918\l"]
	"0x00002a58" [URL="dbg.main/0x00002a58", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2985\l0x00002a58      mov ebp, 1\l0x00002a5d      jmp 0x2918\l"]
	"0x00002a68" [URL="dbg.main/0x00002a68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a12\l0x00002a68      mov dword [obj.verbosity], 0                           ; [0x11010:4]=1\l0x00002a72      jmp 0x2918\l"]
	"0x00002a80" [URL="dbg.main/0x00002a80", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2966\l0x00002a80      mov byte [obj.recurse], 1                              ; [0x1110a:1]=1\l0x00002a87      jmp 0x2918\l"]
	"0x00002a90" [URL="dbg.main/0x00002a90", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x295d\l0x00002a90      mov dword [obj.verbosity], 1                           ; [0x11010:4]=1\l0x00002a9a      jmp 0x2918\l"]
	"0x00002aa0" [URL="dbg.main/0x00002aa0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2954, 0x2a09\l0x00002aa0      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x110b0:4]=1\l0x00002aa7      mov r9, qword [rbx + rax*8 - 8]\l0x00002aac      mov rdi, r9                                            ; const char *s\l0x00002aaf      mov qword [var_20h], r9\l0x00002ab4      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00002ab9      mov r9, qword [var_20h]\l0x00002abe      mov rdx, rax\l0x00002ac1      mov rax, qword [mode]\l0x00002ac6      cmp rax, 1                                             ; \"\\\"\\\"?\"\l0x00002aca      mov rcx, rax\l0x00002acd      sbb rcx, 0xffffffffffffffff\l0x00002ad1      lea r8, [rdx + rcx]\l0x00002ad5      cmp qword [var_48h], r8\l0x00002ada      jbe 0x2b15\l"]
	"0x00002adc" [URL="dbg.main/0x00002adc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b5a\l0x00002adc      mov rax, qword [var_10h]\l0x00002ae1      mov rdi, qword [mode]\l0x00002ae6      add rdx, 1                                             ; size_t n\l0x00002aea      mov rsi, r9                                            ; const void *s2\l0x00002aed      mov qword [var_20h], r8\l0x00002af2      mov byte [rax + rdi], 0x2c                             ; ','\l                                                                       ; [0x2c:1]=0\l0x00002af6      lea rdi, [rax + rcx]                                   ; void *s1\l0x00002afa      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l0x00002aff      mov r8, qword [var_20h]\l0x00002b04      mov byte [obj.diagnose_surprises], 1                   ; [0x11108:1]=1\l0x00002b0b      mov qword [mode], r8\l0x00002b10      jmp 0x2918\l"]
	"0x00002b15" [URL="dbg.main/0x00002b15", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ada\l0x00002b15      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x00002b1a      lea rax, [r8 + 1]\l0x00002b1e      lea rsi, [var_48h]                                     ; int64_t arg2\l0x00002b23      mov qword [var_38h], rdx\l0x00002b28      mov qword [var_30h], rcx\l0x00002b2d      mov qword [var_28h], r9\l0x00002b32      mov qword [var_20h], r8\l0x00002b37      mov qword [var_48h], rax\l0x00002b3c      call dbg.x2realloc\l0x00002b41      mov rdx, qword [var_38h]\l0x00002b46      mov rcx, qword [var_30h]\l0x00002b4b      mov r9, qword [var_28h]\l0x00002b50      mov r8, qword [var_20h]\l0x00002b55      mov qword [var_10h], rax\l0x00002b5a      jmp 0x2adc\l"]
	"0x00002b5c" [URL="dbg.main/0x00002b5c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x292f\l0x00002b5c      cmp qword [var_18h], 0\l0x00002b62      je 0x2f9a\l"]
	"0x00002b68" [URL="dbg.main/0x00002b68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b68      cmp qword [var_10h], 0\l0x00002b6e      jne 0x3594\l"]
	"0x00002b74" [URL="dbg.main/0x00002b74", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b74      cmp r12d, dword [obj.optind]                           ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x110b0:4]=1\l0x00002b7b      jle 0x3362\l"]
	"0x00002b81" [URL="dbg.main/0x00002b81", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b81      mov rdi, qword [var_18h]\l0x00002b86      call dbg.mode_create_from_ref\l0x00002b8b      mov qword [obj.change], rax                            ; [0x11110:8]=0\l0x00002b92      test rax, rax\l0x00002b95      je 0x34c8\l"]
	"0x00002b9b" [URL="dbg.main/0x00002b9b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fdd\l0x00002b9b      cmp byte [obj.recurse], 0                              ; [0x1110a:1]=1\l0x00002ba2      je 0x2bad\l"]
	"0x00002ba4" [URL="dbg.main/0x00002ba4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ba4      test bpl, bpl\l0x00002ba7      jne 0x33cd\l"]
	"0x00002bad" [URL="dbg.main/0x00002bad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ba2\l0x00002bad      mov qword [obj.root_dev_ino], 0                        ; [0x11100:8]=0\l"]
	"0x00002bb8" [URL="dbg.main/0x00002bb8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x33e3\l0x00002bb8      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x110b0:4]=1\l0x00002bbf      xor edx, edx\l0x00002bc1      mov esi, 0x411\l0x00002bc6      mov r15d, 1\l0x00002bcc      lea rdi, [rbx + rax*8]                                 ; int64_t arg2\l0x00002bd0      call dbg.xfts_open\l0x00002bd5      mov rbx, rax\l0x00002bd8      mov rdi, rbx                                           ; int64_t arg1\l0x00002bdb      call sym.rpl_fts_read\l0x00002be0      mov r14, rax\l0x00002be3      test rax, rax\l0x00002be6      je 0x2dc5\l"]
	"0x00002bec" [URL="dbg.main/0x00002bec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bec      nop dword [rax]\l"]
	"0x00002bf0" [URL="dbg.main/0x00002bf0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dbf\l0x00002bf0      cmp word [rax + 0x68], 0xd\l0x00002bf5      mov r12, qword [rax + 0x38]\l0x00002bf9      mov r9, qword [rax + 0x30]\l0x00002bfd      ja case.0x2c11.0\l"]
	"0x00002bff" [URL="dbg.main/0x00002bff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bff      movzx eax, word [rax + 0x68]\l0x00002c03      lea rdx, [0x0000c98c]\l0x00002c0a      movsxd rax, dword [rdx + rax*4]\l0x00002c0e      add rax, rdx\l;-- switch\l0x00002c11      jmp rax                                                ; switch table (14 cases) at 0xc98c\l"]
	"0x00002c14" [URL="dbg.main/0x00002c14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 2:                                                            ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002c14      mov rsi, r14                                           ; uint32_t arg2\l0x00002c17      mov rdi, rbx                                           ; int64_t arg1\l0x00002c1a      mov qword [mode], r9\l0x00002c1f      call dbg.cycle_warning_required\l0x00002c24      mov r9, qword [mode]\l0x00002c29      test al, al\l0x00002c2b      jne 0x32f8\l"]
	"0x00002c31" [URL="dbg.main/0x00002c31", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 0...1:                                                        ; from 0x00002c11\l;-- case 3:                                                            ; from 0x00002c11\l;-- case 5:                                                            ; from 0x00002c11\l;-- case 9:                                                            ; from 0x00002c11\l;-- default:                                                           ; from 0x2c11\l; CODE XREFS from dbg.main @ 0x2bfd, 0x2c11\l0x00002c31      mov rax, qword [obj.root_dev_ino]                      ; [0x11100:8]=0\l0x00002c38      test rax, rax\l0x00002c3b      je 0x2c4a\l"]
	"0x00002c3d" [URL="dbg.main/0x00002c3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c3d      mov rcx, qword [rax]\l0x00002c40      cmp qword [r14 + 0x78], rcx\l0x00002c44      je 0x317d\l"]
	"0x00002c4a" [URL="dbg.main/0x00002c4a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2c3b, 0x3185\l0x00002c4a      mov r13d, dword [r14 + 0x88]\l0x00002c51      mov qword [var_10h], r9\l0x00002c56      mov ebp, 1\l0x00002c5b      mov eax, r13d\l0x00002c5e      and eax, 0xf000\l0x00002c63      cmp eax, 0xa000\l0x00002c68      je 0x2e3a\l"]
	"0x00002c6e" [URL="dbg.main/0x00002c6e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c6e      mov rcx, qword [obj.change]                            ; [0x11110:8]=0 ; int64_t arg4\l0x00002c75      mov edx, dword [obj.umask_value]                       ; [0x1110c:4]=0 ; int64_t arg3\l0x00002c7b      xor esi, esi                                           ; int64_t arg2\l0x00002c7d      cmp eax, 0x4000                                        ; \"E1\\u0244\\xc9\\x0f\\x85\\x90\\xfd\\xff\\xffH)\\u0609\\xeb\\xbf \"\l0x00002c82      sete sil\l0x00002c86      mov edi, r13d                                          ; int64_t arg1\l0x00002c89      xor r8d, r8d                                           ; int64_t arg5\l0x00002c8c      call dbg.mode_adjust\l0x00002c91      mov edi, dword [rbx + 0x2c]\l0x00002c94      mov rsi, qword [var_10h]\l0x00002c99      xor ecx, ecx\l0x00002c9b      mov edx, eax\l0x00002c9d      mov dword [mode], eax\l0x00002ca1      call sym.imp.fchmodat\l0x00002ca6      test eax, eax\l0x00002ca8      jne 0x30d3\l"]
	"0x00002cae" [URL="dbg.main/0x00002cae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cae      cmp dword [obj.verbosity], 2                           ; [0x11010:4]=1\l0x00002cb5      mov r9, qword [var_10h]\l0x00002cba      mov ebp, 4\l0x00002cbf      je 0x2d8e\l"]
	"0x00002cc5" [URL="dbg.main/0x00002cc5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cc5      mov eax, dword [mode]\l0x00002cc9      mov edi, dword [rbx + 0x2c]\l0x00002ccc      test ah, 0xe                                           ; \"'''\"\l0x00002ccf      jne 0x3219\l"]
	"0x00002cd5" [URL="dbg.main/0x00002cd5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3339\l0x00002cd5      xor eax, r13d\l0x00002cd8      test eax, 0xfff\l0x00002cdd      je 0x3279\l"]
	"0x00002ce3" [URL="dbg.main/0x00002ce3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ce3      mov rsi, r12                                           ; int64_t arg2\l0x00002ce6      mov edi, 4                                             ; int64_t arg1\l0x00002ceb      mov ebp, 4\l0x00002cf0      call sym.quotearg_style\l0x00002cf5      mov edi, dword [mode]                                  ; int mode\l0x00002cf9      lea rsi, [bp]                                          ; char *bp\l0x00002d01      mov qword [var_10h], rax\l0x00002d06      mov eax, r13d\l0x00002d09      and eax, 0xfff\l0x00002d0e      mov qword [var_20h], rax\l0x00002d13      mov eax, edi\l0x00002d15      and eax, 0xfff\l0x00002d1a      mov qword [var_18h], rax\l0x00002d1f      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x00002d24      lea rsi, [var_ech]                                     ; char *bp\l0x00002d2c      mov edi, r13d                                          ; int mode\l0x00002d2f      mov byte [var_eah], 0\l0x00002d37      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x00002d3c      lea rsi, str.mode_of__s_changed_from__04lo___s__to__04lo___s__n ; 0xc958 ; \"mode of %s changed from %04lo (%s) to %04lo (%s)\\n\"\l0x00002d43      xor edi, edi\l0x00002d45      mov edx, 5\l0x00002d4a      mov byte [var_f6h], 0\l0x00002d52      call sym.imp.dcgettext\l0x00002d57      mov rsi, rax\l"]
	"0x00002d5a" [URL="dbg.main/0x00002d5a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3178\l0x00002d5a      push rax\l0x00002d5b      mov edi, 1\l0x00002d60      lea rax, [var_e1h]\l0x00002d68      push rax\l0x00002d69      mov r9, qword [var_18h]\l0x00002d6e      xor eax, eax\l0x00002d70      mov rcx, qword [var_20h]\l0x00002d75      mov rdx, qword [var_10h]\l0x00002d7a      lea r8, [var_edh]\l0x00002d82      call sym.imp.__printf_chk\l0x00002d87      pop rdx\l0x00002d88      pop rcx\l"]
	"0x00002d89" [URL="dbg.main/0x00002d89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e99\l0x00002d89      cmp ebp, 2                                             ; \"\\\"?\"\l0x00002d8c      jbe 0x2d9b\l"]
	"0x00002d8e" [URL="dbg.main/0x00002d8e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2cbf, 0x3285, 0x32c9\l0x00002d8e      cmp byte [obj.diagnose_surprises], 0                   ; [0x11108:1]=1\l0x00002d95      jne 0x2ff7\l"]
	"0x00002d9b" [URL="dbg.main/0x00002d9b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002d8c  CODE 0x00002e41  CODE 0x00002e53  \l; XREFS: CODE 0x00003027  CODE 0x000030a9  CODE 0x000030ce  \l; XREFS: CODE 0x000030e9  \l0x00002d9b      cmp byte [obj.recurse], 0                              ; [0x1110a:1]=1\l0x00002da2      je 0x2fe2\l"]
	"0x00002da8" [URL="dbg.main/0x00002da8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ff2\l0x00002da8      cmp ebp, 2                                             ; \"\\\"?\"\l0x00002dab      seta al\l"]
	"0x00002dae" [URL="dbg.main/0x00002dae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2f5c, 0x3214, 0x3330, 0x3470\l0x00002dae      mov rdi, rbx                                           ; int64_t arg1\l0x00002db1      and r15d, eax\l0x00002db4      call sym.rpl_fts_read\l0x00002db9      mov r14, rax\l0x00002dbc      test rax, rax\l0x00002dbf      jne 0x2bf0\l"]
	"0x00002dc5" [URL="dbg.main/0x00002dc5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2be6\l0x00002dc5      call sym.imp.__errno_location\l0x00002dca      cmp dword [rax], 0\l0x00002dcd      mov rbp, rax\l0x00002dd0      je 0x2de6\l"]
	"0x00002dd2" [URL="dbg.main/0x00002dd2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dd2      movzx r15d, byte [obj.force_silent]                    ; [0x11109:1]=1\l0x00002dda      test r15b, r15b\l0x00002ddd      je 0x342c\l"]
	"0x00002de3" [URL="dbg.main/0x00002de3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002de3      xor r15d, r15d\l"]
	"0x00002de6" [URL="dbg.main/0x00002de6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2dd0, 0x344e\l0x00002de6      mov rdi, rbx                                           ; int64_t arg1\l0x00002de9      call dbg.rpl_fts_close\l0x00002dee      test eax, eax\l0x00002df0      jne 0x32ce\l"]
	"0x00002df6" [URL="dbg.main/0x00002df6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x32f3\l0x00002df6      mov eax, r15d\l0x00002df9      xor eax, 1\l0x00002dfc      movzx eax, al\l0x00002dff      mov rdx, qword [var_f8h]\l0x00002e07      sub rdx, qword fs:[0x28]\l0x00002e10      jne 0x358f\l"]
	"0x00002e16" [URL="dbg.main/0x00002e16", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e16      add rsp, 0x108\l0x00002e1d      pop rbx\l0x00002e1e      pop rbp\l0x00002e1f      pop r12\l0x00002e21      pop r13\l0x00002e23      pop r14\l0x00002e25      pop r15\l0x00002e27      ret\l"]
	"0x00002e28" [URL="dbg.main/0x00002e28", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 13:                                                           ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002e28      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x00002e2f      je 0x2f61\l"]
	"0x00002e35" [URL="dbg.main/0x00002e35", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e35      nop dword [rax]\l"]
	"0x00002e38" [URL="dbg.main/0x00002e38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002ea5  CODE 0x00002ecd  CODE 0x00002eeb  \l; XREFS: CODE 0x00002f27  CODE 0x00002f33  CODE 0x00002f95  \l0x00002e38      xor ebp, ebp\l"]
	"0x00002e3a" [URL="dbg.main/0x00002e3a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c68\l0x00002e3a      cmp dword [obj.verbosity], 2                           ; [0x11010:4]=1\l0x00002e41      je 0x2d9b\l"]
	"0x00002e47" [URL="dbg.main/0x00002e47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e47      mov eax, dword [obj.verbosity]                         ; [0x11010:4]=1\l0x00002e4d      mov dword [mode], eax\l0x00002e51      test eax, eax\l0x00002e53      jne 0x2d9b\l"]
	"0x00002e59" [URL="dbg.main/0x00002e59", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e59      mov rsi, r12                                           ; int64_t arg2\l0x00002e5c      mov edi, 4                                             ; int64_t arg1\l0x00002e61      call sym.quotearg_style\l0x00002e66      mov edx, 5\l0x00002e6b      mov r13, rax\l0x00002e6e      test ebp, ebp\l0x00002e70      je 0x30ae\l"]
	"0x00002e76" [URL="dbg.main/0x00002e76", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e76      lea rsi, str.neither_symbolic_link__s_nor_referent_has_been_changed_n ; 0xc890 ; \"neither symbolic link %s nor referent has been changed\\n\"\l0x00002e7d      xor edi, edi\l0x00002e7f      call sym.imp.dcgettext\l0x00002e84      mov rdx, r13\l0x00002e87      mov edi, 1\l0x00002e8c      xor r13d, r13d\l0x00002e8f      mov rsi, rax\l0x00002e92      xor eax, eax\l0x00002e94      call sym.imp.__printf_chk\l0x00002e99      jmp 0x2d89\l"]
	"0x00002e9e" [URL="dbg.main/0x00002e9e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 7:                                                            ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002e9e      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x00002ea5      jne 0x2e38\l"]
	"0x00002ea7" [URL="dbg.main/0x00002ea7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ea7      mov rdx, r12                                           ; int64_t arg3\l0x00002eaa      xor edi, edi                                           ; int64_t arg1\l0x00002eac      mov esi, 3                                             ; int64_t arg2\l0x00002eb1      call sym.quotearg_n_style_colon\l0x00002eb6      mov esi, dword [r14 + 0x40]                            ; int errname\l0x00002eba      lea rdx, [0x0000c119]                                  ; \"%s\" ; char *format\l0x00002ec1      xor edi, edi                                           ; int status\l0x00002ec3      mov rcx, rax\l0x00002ec6      xor eax, eax\l0x00002ec8      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ecd      jmp 0x2e38\l"]
	"0x00002ed2" [URL="dbg.main/0x00002ed2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 10:                                                           ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002ed2      cmp qword [r14 + 0x58], 0\l0x00002ed7      jne 0x2ee4\l"]
	"0x00002ed9" [URL="dbg.main/0x00002ed9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ed9      cmp qword [r14 + 0x20], 0\l0x00002ede      je 0x3453\l"]
	"0x00002ee4" [URL="dbg.main/0x00002ee4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ed7\l0x00002ee4      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x00002eeb      jne 0x2e38\l"]
	"0x00002ef1" [URL="dbg.main/0x00002ef1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ef1      mov rsi, r12                                           ; int64_t arg2\l0x00002ef4      mov edi, 4                                             ; int64_t arg1\l0x00002ef9      call sym.quotearg_style\l0x00002efe      mov edx, 5\l0x00002f03      lea rsi, str.cannot_access__s                          ; 0xc12c ; \"cannot access %s\"\l0x00002f0a      mov r13, rax\l"]
	"0x00002f0d" [URL="dbg.main/0x00002f0d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f55\l0x00002f0d      xor edi, edi\l0x00002f0f      call sym.imp.dcgettext\l0x00002f14      mov esi, dword [r14 + 0x40]                            ; int errname\l0x00002f18      mov rcx, r13\l0x00002f1b      xor edi, edi                                           ; int status\l0x00002f1d      mov rdx, rax                                           ; char *format\l0x00002f20      xor eax, eax\l0x00002f22      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002f27      jmp 0x2e38\l"]
	"0x00002f2c" [URL="dbg.main/0x00002f2c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 4:                                                            ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002f2c      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x00002f33      jne 0x2e38\l"]
	"0x00002f39" [URL="dbg.main/0x00002f39", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f39      mov rsi, r12                                           ; int64_t arg2\l0x00002f3c      mov edi, 4                                             ; int64_t arg1\l0x00002f41      call sym.quotearg_style\l0x00002f46      mov edx, 5\l0x00002f4b      lea rsi, str.cannot_read_directory__s                  ; 0xc13d ; \"cannot read directory %s\"\l0x00002f52      mov r13, rax\l0x00002f55      jmp 0x2f0d\l"]
	"0x00002f57" [URL="dbg.main/0x00002f57", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 6:                                                            ; from 0x00002c11\l; CODE XREF from dbg.main @ 0x2c11\l0x00002f57      mov eax, 1\l0x00002f5c      jmp 0x2dae\l"]
	"0x00002f61" [URL="dbg.main/0x00002f61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e2f\l0x00002f61      mov rsi, r12                                           ; int64_t arg2\l0x00002f64      mov edi, 4                                             ; int64_t arg1\l0x00002f69      call sym.quotearg_style\l0x00002f6e      xor edi, edi\l0x00002f70      mov edx, 5\l0x00002f75      lea rsi, str.cannot_operate_on_dangling_symlink__s     ; 0xc700 ; \"cannot operate on dangling symlink %s\"\l0x00002f7c      mov r13, rax\l0x00002f7f      call sym.imp.dcgettext\l0x00002f84      mov rcx, r13\l0x00002f87      xor esi, esi                                           ; int errname\l0x00002f89      xor edi, edi                                           ; int status\l0x00002f8b      mov rdx, rax                                           ; char *format\l0x00002f8e      xor eax, eax\l0x00002f90      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002f95      jmp 0x2e38\l"]
	"0x00002f9a" [URL="dbg.main/0x00002f9a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b62\l0x00002f9a      cmp qword [var_10h], 0\l0x00002fa0      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x110b0:4]=1\l0x00002fa7      je 0x333e\l"]
	"0x00002fad" [URL="dbg.main/0x00002fad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fad      cmp r12d, eax\l0x00002fb0      jle 0x3544\l"]
	"0x00002fb6" [URL="dbg.main/0x00002fb6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3353\l0x00002fb6      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x00002fbb      call dbg.mode_compile\l0x00002fc0      mov qword [obj.change], rax                            ; [0x11110:8]=0\l0x00002fc7      test rax, rax\l0x00002fca      je 0x3509\l"]
	"0x00002fd0" [URL="dbg.main/0x00002fd0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fd0      xor edi, edi                                           ; int m\l0x00002fd2      call sym.imp.umask                                     ; int umask(int m)\l0x00002fd7      mov dword [obj.umask_value], eax                       ; [0x1110c:4]=0\l0x00002fdd      jmp 0x2b9b\l"]
	"0x00002fe2" [URL="dbg.main/0x00002fe2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2da2\l0x00002fe2      mov edx, 4\l0x00002fe7      mov rsi, r14                                           ; uint32_t arg3\l0x00002fea      mov rdi, rbx                                           ; int64_t arg2\l0x00002fed      call dbg.rpl_fts_set\l0x00002ff2      jmp 0x2da8\l"]
	"0x00002ff7" [URL="dbg.main/0x00002ff7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d95\l0x00002ff7      mov eax, r13d\l0x00002ffa      xor esi, esi                                           ; int64_t arg2\l0x00002ffc      mov rcx, qword [obj.change]                            ; [0x11110:8]=0 ; int64_t arg4\l0x00003003      mov edi, r13d                                          ; int64_t arg1\l0x00003006      and eax, 0xf000\l0x0000300b      cmp eax, 0x4000                                        ; \"E1\\u0244\\xc9\\x0f\\x85\\x90\\xfd\\xff\\xffH)\\u0609\\xeb\\xbf \"\l0x00003010      sete sil\l0x00003014      xor r8d, r8d                                           ; int64_t arg5\l0x00003017      xor edx, edx                                           ; int64_t arg3\l0x00003019      call dbg.mode_adjust\l0x0000301e      mov r13d, eax\l0x00003021      not eax\l0x00003023      test dword [mode], eax\l0x00003027      je 0x2d9b\l"]
	"0x0000302d" [URL="dbg.main/0x0000302d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000302d      mov edi, dword [mode]                                  ; int mode\l0x00003031      lea rsi, [bp]                                          ; char *bp\l0x00003039      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x0000303e      lea rsi, [var_ech]                                     ; char *bp\l0x00003046      mov edi, r13d                                          ; int mode\l0x00003049      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x0000304e      mov rdx, r12                                           ; int64_t arg3\l0x00003051      mov esi, 3                                             ; int64_t arg2\l0x00003056      xor edi, edi                                           ; int64_t arg1\l0x00003058      mov byte [var_f6h], 0\l0x00003060      mov byte [var_eah], 0\l0x00003068      call sym.quotearg_n_style_colon\l0x0000306d      mov edx, 5\l0x00003072      lea rsi, str._s:_new_permissions_are__s__not__s        ; 0xc930 ; \"%s: new permissions are %s, not %s\"\l0x00003079      xor edi, edi\l0x0000307b      mov r12, rax\l0x0000307e      call sym.imp.dcgettext\l0x00003083      mov rcx, r12\l0x00003086      xor esi, esi                                           ; int errname\l0x00003088      xor edi, edi                                           ; int status\l0x0000308a      mov rdx, rax                                           ; char *format\l; DATA XREF from dbg.hash_print_statistics @ 0xa220\l0x0000308d      lea r9, [var_edh]\l0x00003095      xor eax, eax\l0x00003097      lea r8, [var_e1h]\l0x0000309f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000030a4" [URL="dbg.main/0x000030a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30f6\l0x000030a4      mov ebp, 2\l0x000030a9      jmp 0x2d9b\l"]
	"0x000030ae" [URL="dbg.main/0x000030ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e70\l0x000030ae      xor edi, edi\l0x000030b0      lea rsi, str._s_could_not_be_accessed_n                ; 0xc18e ; \"%s could not be accessed\\n\"\l0x000030b7      call sym.imp.dcgettext\l0x000030bc      mov rdx, r13\l0x000030bf      mov edi, 1\l0x000030c4      mov rsi, rax\l0x000030c7      xor eax, eax\l0x000030c9      call sym.imp.__printf_chk\l0x000030ce      jmp 0x2d9b\l"]
	"0x000030d3" [URL="dbg.main/0x000030d3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ca8\l0x000030d3      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x000030da      je 0x3388\l"]
	"0x000030e0" [URL="dbg.main/0x000030e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x33c8\l0x000030e0      mov ebp, dword [obj.verbosity]                         ; [0x11010:4]=1\l0x000030e6      cmp ebp, 2                                             ; \"\\\"?\"\l0x000030e9      je 0x2d9b\l"]
	"0x000030ef" [URL="dbg.main/0x000030ef", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030ef      cmp dword [obj.verbosity], 0                           ; [0x11010:4]=1\l0x000030f6      jne 0x30a4\l"]
	"0x000030f8" [URL="dbg.main/0x000030f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030f8      mov ebp, 2\l"]
	"0x000030fd" [URL="dbg.main/0x000030fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x328b\l0x000030fd      mov rsi, r12                                           ; int64_t arg2\l0x00003100      mov edi, 4                                             ; int64_t arg1\l0x00003105      call sym.quotearg_style\l0x0000310a      mov edi, dword [mode]                                  ; int mode\l0x0000310e      lea rsi, [bp]                                          ; char *bp\l0x00003116      mov qword [var_10h], rax\l0x0000311b      mov eax, r13d\l0x0000311e      and eax, 0xfff\l0x00003123      mov qword [var_20h], rax\l0x00003128      mov eax, edi\l0x0000312a      and eax, 0xfff\l0x0000312f      mov qword [var_18h], rax\l0x00003134      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x00003139      lea rsi, [var_ech]                                     ; char *bp\l0x00003141      mov edi, r13d                                          ; int mode\l0x00003144      mov byte [var_eah], 0\l0x0000314c      call dbg.strmode                                       ; void strmode(int mode, char *bp)\l0x00003151      mov byte [var_f6h], 0\l0x00003159      cmp ebp, 2                                             ; \"\\\"?\"\l0x0000315c      jne 0x3290\l"]
	"0x00003162" [URL="dbg.main/0x00003162", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003162      lea rsi, str.failed_to_change_mode_of__s_from__04lo___s__to__04lo___s__n ; 0xc8f0 ; \"failed to change mode of %s from %04lo (%s) to %04lo (%s)\\n\"\l0x00003169      mov edx, 5\l0x0000316e      xor edi, edi\l0x00003170      call sym.imp.dcgettext\l0x00003175      mov rsi, rax\l0x00003178      jmp 0x2d5a\l"]
	"0x0000317d" [URL="dbg.main/0x0000317d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c44\l0x0000317d      mov rax, qword [rax + 8]\l0x00003181      cmp qword [r14 + 0x70], rax\l0x00003185      jne 0x2c4a\l"]
	"0x0000318b" [URL="dbg.main/0x0000318b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000318b      lea r13, [0x0000cf3b]                                  ; \"/\"\l0x00003192      mov rdi, r12                                           ; const char *s1\l0x00003195      mov rsi, r13                                           ; const char *s2\l0x00003198      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x0000319d      test eax, eax\l0x0000319f      jne 0x3475\l"]
	"0x000031a5" [URL="dbg.main/0x000031a5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000031a5      mov rsi, r12                                           ; int64_t arg2\l0x000031a8      mov edi, 4                                             ; int64_t arg1\l0x000031ad      call sym.quotearg_style\l0x000031b2      mov edx, 5\l0x000031b7      lea rsi, str.it_is_dangerous_to_operate_recursively_on__s ; 0xc7e8 ; \"it is dangerous to operate recursively on %s\"\l0x000031be      xor edi, edi\l0x000031c0      mov r12, rax\l0x000031c3      call sym.imp.dcgettext\l0x000031c8      mov rcx, r12\l0x000031cb      xor esi, esi                                           ; int errname\l0x000031cd      xor edi, edi                                           ; int status\l0x000031cf      mov rdx, rax                                           ; char *format\l0x000031d2      xor eax, eax\l0x000031d4      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000031d9" [URL="dbg.main/0x000031d9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34c3\l0x000031d9      mov edx, 5\l0x000031de      lea rsi, str.use___no_preserve_root_to_override_this_failsafe ; 0xc858 ; \"use --no-preserve-root to override this failsafe\"\l0x000031e5      xor edi, edi\l0x000031e7      call sym.imp.dcgettext\l0x000031ec      xor esi, esi                                           ; int errname\l0x000031ee      xor edi, edi                                           ; int status\l0x000031f0      mov rdx, rax                                           ; char *format\l0x000031f3      xor eax, eax\l0x000031f5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000031fa      mov edx, 4\l0x000031ff      mov rsi, r14                                           ; uint32_t arg3\l0x00003202      mov rdi, rbx                                           ; int64_t arg2\l0x00003205      call dbg.rpl_fts_set\l0x0000320a      mov rdi, rbx                                           ; int64_t arg1\l0x0000320d      call sym.rpl_fts_read\l0x00003212      xor eax, eax\l0x00003214      jmp 0x2dae\l"]
	"0x00003219" [URL="dbg.main/0x00003219", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ccf\l0x00003219      xor ecx, ecx\l0x0000321b      lea rdx, [var_50h]\l0x00003220      mov rsi, r9\l0x00003223      call sym.imp.fstatat\l0x00003228      test eax, eax\l0x0000322a      je 0x3335\l"]
	"0x00003230" [URL="dbg.main/0x00003230", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003230      cmp byte [obj.force_silent], 0                         ; [0x11109:1]=1\l0x00003237      jne 0x3279\l"]
	"0x00003239" [URL="dbg.main/0x00003239", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003239      mov rsi, r12                                           ; int64_t arg2\l0x0000323c      mov edi, 4                                             ; int64_t arg1\l0x00003241      call sym.quotearg_style\l0x00003246      mov edx, 5\l0x0000324b      lea rsi, str.getting_new_attributes_of__s              ; 0xc171 ; \"getting new attributes of %s\"\l0x00003252      xor edi, edi\l0x00003254      mov qword [var_10h], rax\l0x00003259      call sym.imp.dcgettext\l0x0000325e      mov rbp, rax\l0x00003261      call sym.imp.__errno_location\l0x00003266      mov rcx, qword [var_10h]\l0x0000326b      mov rdx, rbp                                           ; char *format\l0x0000326e      xor edi, edi                                           ; int status\l0x00003270      mov esi, dword [rax]                                   ; int errname\l0x00003272      xor eax, eax\l0x00003274      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003279" [URL="dbg.main/0x00003279", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2cdd, 0x3237\l0x00003279      cmp dword [obj.verbosity], 0                           ; [0x11010:4]=1\l0x00003280      mov ebp, 3\l0x00003285      jne 0x2d8e\l"]
	"0x0000328b" [URL="dbg.main/0x0000328b", fillcolor="white",color="#767676", fontname="Courier",label="0x0000328b      jmp 0x30fd\l"]
	"0x00003290" [URL="dbg.main/0x00003290", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x315c\l0x00003290      mov edx, 5\l0x00003295      lea rsi, str.mode_of__s_retained_as__04lo___s__n       ; 0xc8c8 ; \"mode of %s retained as %04lo (%s)\\n\"\l0x0000329c      xor edi, edi\l0x0000329e      mov ebp, 3\l0x000032a3      call sym.imp.dcgettext\l0x000032a8      mov rcx, qword [var_18h]\l0x000032ad      mov rdx, qword [var_10h]\l0x000032b2      lea r8, [var_e1h]\l0x000032ba      mov rsi, rax\l0x000032bd      mov edi, 1\l0x000032c2      xor eax, eax\l0x000032c4      call sym.imp.__printf_chk\l0x000032c9      jmp 0x2d8e\l"]
	"0x000032ce" [URL="dbg.main/0x000032ce", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2df0\l0x000032ce      mov edx, 5\l0x000032d3      lea rsi, str.fts_close_failed                          ; 0xc1a8 ; \"fts_close failed\"\l0x000032da      xor edi, edi\l0x000032dc      xor r15d, r15d\l0x000032df      call sym.imp.dcgettext\l0x000032e4      mov esi, dword [rbp]                                   ; int errname\l0x000032e7      xor edi, edi                                           ; int status\l0x000032e9      mov rdx, rax                                           ; char *format\l0x000032ec      xor eax, eax\l0x000032ee      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000032f3      jmp 0x2df6\l"]
	"0x000032f8" [URL="dbg.main/0x000032f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c2b\l0x000032f8      mov rdx, r12                                           ; int64_t arg3\l0x000032fb      mov esi, 3                                             ; int64_t arg2\l0x00003300      xor edi, edi                                           ; int64_t arg1\l0x00003302      call sym.quotearg_n_style_colon\l0x00003307      mov edx, 5\l0x0000330c      lea rsi, str.WARNING:_Circular_directory_structure._nThis_almost_certainly_means_that_you_have_a_corrupted_file_system._nNOTIFY_YOUR_SYSTEM_MANAGER._nThe_following_directory_is_part_of_the_cycle:_n___s_n ; 0xc728 ; \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\"\l0x00003313      xor edi, edi\l0x00003315      mov r12, rax\l0x00003318      call sym.imp.dcgettext\l0x0000331d      mov rcx, r12\l0x00003320      xor esi, esi                                           ; int errname\l0x00003322      xor edi, edi                                           ; int status\l0x00003324      mov rdx, rax                                           ; char *format\l0x00003327      xor eax, eax\l0x00003329      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000332e      xor eax, eax\l0x00003330      jmp 0x2dae\l"]
	"0x00003335" [URL="dbg.main/0x00003335", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x322a\l0x00003335      mov eax, dword [var_68h]\l0x00003339      jmp 0x2cd5\l"]
	"0x0000333e" [URL="dbg.main/0x0000333e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fa7\l0x0000333e      lea edx, [rax + 1]\l0x00003341      mov rax, qword [rbx + rax*8]\l0x00003345      mov dword [obj.optind], edx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x110b0:4]=1\l0x0000334b      mov qword [var_10h], rax\l0x00003350      cmp edx, r12d\l0x00003353      jl 0x2fb6\l"]
	"0x00003359" [URL="dbg.main/0x00003359", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003359      test rax, rax\l0x0000335c      jne 0x3546\l"]
	"0x00003362" [URL="dbg.main/0x00003362", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2b7b, 0x3553\l0x00003362      mov edx, 5\l0x00003367      lea rsi, str.missing_operand                           ; 0xc0e2 ; \"missing operand\"\l"]
	"0x0000336e" [URL="dbg.main/0x0000336e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x35a0\l0x0000336e      xor edi, edi\l0x00003370      call sym.imp.dcgettext\l0x00003375      xor esi, esi                                           ; int errname\l0x00003377      xor edi, edi                                           ; int status\l0x00003379      mov rdx, rax                                           ; char *format\l0x0000337c      xor eax, eax\l0x0000337e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003383      jmp 0x296c\l"]
	"0x00003388" [URL="dbg.main/0x00003388", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30da\l0x00003388      mov rsi, r12                                           ; int64_t arg2\l0x0000338b      mov edi, 4                                             ; int64_t arg1\l0x00003390      call sym.quotearg_style\l0x00003395      xor edi, edi\l0x00003397      mov edx, 5\l0x0000339c      lea rsi, str.changing_permissions_of__s                ; 0xc156 ; \"changing permissions of %s\"\l0x000033a3      mov qword [var_10h], rax\l0x000033a8      call sym.imp.dcgettext\l0x000033ad      mov rbp, rax\l0x000033b0      call sym.imp.__errno_location\l0x000033b5      mov rcx, qword [var_10h]\l0x000033ba      mov rdx, rbp                                           ; char *format\l0x000033bd      xor edi, edi                                           ; int status\l0x000033bf      mov esi, dword [rax]                                   ; int errname\l0x000033c1      xor eax, eax\l0x000033c3      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000033c8      jmp 0x30e0\l"]
	"0x000033cd" [URL="dbg.main/0x000033cd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ba7\l0x000033cd      lea rdi, [global_dev_ino_buf]                          ; 0x110f0 ; int64_t arg1\l0x000033d4      call dbg.get_root_dev_ino\l0x000033d9      mov qword [obj.root_dev_ino], rax                      ; [0x11100:8]=0\l0x000033e0      test rax, rax\l0x000033e3      jne 0x2bb8\l"]
	"0x000033e9" [URL="dbg.main/0x000033e9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000033e9      lea rsi, [0x0000cf3b]                                  ; \"/\" ; int64_t arg2\l0x000033f0      mov edi, 4                                             ; int64_t arg1\l0x000033f5      call sym.quotearg_style\l0x000033fa      mov edx, 5\l0x000033ff      lea rsi, str.failed_to_get_attributes_of__s            ; 0xc6e0 ; \"failed to get attributes of %s\"\l0x00003406      xor edi, edi\l0x00003408      mov r13, rax\l0x0000340b      call sym.imp.dcgettext\l0x00003410      mov r12, rax\l0x00003413      call sym.imp.__errno_location\l0x00003418      mov rcx, r13\l0x0000341b      mov rdx, r12                                           ; char *format\l0x0000341e      mov edi, 1                                             ; int status\l0x00003423      mov esi, dword [rax]                                   ; int errname\l0x00003425      xor eax, eax\l0x00003427      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000342c" [URL="dbg.main/0x0000342c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ddd\l0x0000342c      xor edi, edi\l0x0000342e      mov edx, 5\l0x00003433      lea rsi, str.fts_read_failed                           ; 0xc11c ; \"fts_read failed\"\l0x0000343a      call sym.imp.dcgettext\l0x0000343f      mov esi, dword [rbp]                                   ; int errname\l0x00003442      xor edi, edi                                           ; int status\l0x00003444      mov rdx, rax                                           ; char *format\l0x00003447      xor eax, eax\l0x00003449      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000344e      jmp 0x2de6\l"]
	"0x00003453" [URL="dbg.main/0x00003453", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ede\l0x00003453      mov qword [r14 + 0x20], 1\l0x0000345b      mov edx, 1\l0x00003460      mov rsi, r14                                           ; uint32_t arg3\l0x00003463      mov rdi, rbx                                           ; int64_t arg2\l0x00003466      call dbg.rpl_fts_set\l0x0000346b      mov eax, 1\l0x00003470      jmp 0x2dae\l"]
	"0x00003475" [URL="dbg.main/0x00003475", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x319f\l0x00003475      mov rdx, r13                                           ; int64_t arg3\l0x00003478      mov esi, 4                                             ; int64_t arg2\l0x0000347d      mov edi, 1                                             ; int64_t arg1\l0x00003482      call sym.quotearg_n_style\l0x00003487      mov rdx, r12                                           ; int64_t arg3\l0x0000348a      xor edi, edi                                           ; int64_t arg1\l0x0000348c      mov esi, 4                                             ; int64_t arg2\l0x00003491      mov rbp, rax\l0x00003494      call sym.quotearg_n_style\l0x00003499      xor edi, edi\l0x0000349b      mov edx, 5\l0x000034a0      lea rsi, str.it_is_dangerous_to_operate_recursively_on__s__same_as__s_ ; 0xc818 ; \"it is dangerous to operate recursively on %s (same as %s)\"\l0x000034a7      mov r12, rax\l0x000034aa      call sym.imp.dcgettext\l0x000034af      mov r8, rbp\l0x000034b2      mov rcx, r12\l0x000034b5      xor esi, esi                                           ; int errname\l0x000034b7      mov rdx, rax                                           ; char *format\l0x000034ba      xor edi, edi                                           ; int status\l0x000034bc      xor eax, eax\l0x000034be      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000034c3      jmp 0x31d9\l"]
	"0x000034c8" [URL="dbg.main/0x000034c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b95\l0x000034c8      mov rsi, qword [var_18h]                               ; int64_t arg2\l0x000034cd      mov edi, 4                                             ; int64_t arg1\l0x000034d2      call sym.quotearg_style\l0x000034d7      mov edx, 5\l0x000034dc      lea rsi, str.failed_to_get_attributes_of__s            ; 0xc6e0 ; \"failed to get attributes of %s\"\l0x000034e3      xor edi, edi\l0x000034e5      mov r13, rax\l0x000034e8      call sym.imp.dcgettext\l0x000034ed      mov r12, rax\l0x000034f0      call sym.imp.__errno_location\l0x000034f5      mov rcx, r13\l0x000034f8      mov rdx, r12                                           ; char *format\l0x000034fb      mov edi, 1                                             ; int status\l0x00003500      mov esi, dword [rax]                                   ; int errname\l0x00003502      xor eax, eax\l0x00003504      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003509" [URL="dbg.main/0x00003509", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fca\l0x00003509      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x0000350e      call dbg.quote\l0x00003513      mov edx, 5\l0x00003518      lea rsi, str.invalid_mode:__s                          ; 0xc10b ; \"invalid mode: %s\"\l0x0000351f      xor edi, edi\l0x00003521      mov r12, rax\l0x00003524      call sym.imp.dcgettext\l0x00003529      xor edi, edi                                           ; int status\l0x0000352b      mov rcx, r12\l0x0000352e      xor esi, esi                                           ; int errname\l0x00003530      mov rdx, rax                                           ; char *format\l0x00003533      xor eax, eax\l0x00003535      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000353a      mov edi, 1                                             ; int64_t arg1\l0x0000353f      call dbg.usage\l"]
	"0x00003544" [URL="dbg.main/0x00003544", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fb0\l0x00003544      mov edx, eax\l"]
	"0x00003546" [URL="dbg.main/0x00003546", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x335c\l0x00003546      movsxd rdx, edx\l0x00003549      mov rax, qword [var_10h]\l0x0000354e      cmp qword [rbx + rdx*8 - 8], rax\l0x00003553      jne 0x3362\l"]
	"0x00003559" [URL="dbg.main/0x00003559", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003559      mov rdi, qword [rbx + r12*8 - 8]                       ; int64_t arg1\l0x0000355e      call dbg.quote\l0x00003563      xor edi, edi\l0x00003565      mov edx, 5\l0x0000356a      lea rsi, str.missing_operand_after__s                  ; 0xc0f2 ; \"missing operand after %s\"\l0x00003571      mov r12, rax\l0x00003574      call sym.imp.dcgettext\l0x00003579      mov rcx, r12\l0x0000357c      xor esi, esi                                           ; int errname\l0x0000357e      xor edi, edi                                           ; int status\l0x00003580      mov rdx, rax                                           ; char *format\l0x00003583      xor eax, eax\l0x00003585      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000358a      jmp 0x296c\l"]
	"0x0000358f" [URL="dbg.main/0x0000358f", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e10\l0x0000358f      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x00003594" [URL="dbg.main/0x00003594", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b6e\l0x00003594      mov edx, 5\l0x00003599      lea rsi, str.cannot_combine_mode_and___reference_options ; 0xc6b0 ; \"cannot combine mode and --reference options\"\l0x000035a0      jmp 0x336e\l"]
        "0x00002850" -> "0x00002918" [color="#3a96dd"];
        "0x00002918" -> "0x00002b5c" [color="#13a10e"];
        "0x00002918" -> "0x00002935" [color="#c50f1f"];
        "0x00002935" -> "0x00002980" [color="#13a10e"];
        "0x00002935" -> "0x0000293a" [color="#c50f1f"];
        "0x0000293a" -> "0x000029f8" [color="#13a10e"];
        "0x0000293a" -> "0x00002943" [color="#c50f1f"];
        "0x00002943" -> "0x0000296c" [color="#13a10e"];
        "0x00002943" -> "0x00002948" [color="#c50f1f"];
        "0x00002948" -> "0x000029b0" [color="#13a10e"];
        "0x00002948" -> "0x0000294d" [color="#c50f1f"];
        "0x0000294d" -> "0x00002aa0" [color="#13a10e"];
        "0x0000294d" -> "0x0000295a" [color="#c50f1f"];
        "0x0000295a" -> "0x00002a90" [color="#13a10e"];
        "0x0000295a" -> "0x00002963" [color="#c50f1f"];
        "0x00002963" -> "0x00002a80" [color="#13a10e"];
        "0x00002963" -> "0x0000296c" [color="#c50f1f"];
        "0x0000296c" -> "0x00002980" [color="#3a96dd"];
        "0x00002980" -> "0x00002a58" [color="#13a10e"];
        "0x00002980" -> "0x0000298b" [color="#c50f1f"];
        "0x0000298b" -> "0x00002a40" [color="#13a10e"];
        "0x0000298b" -> "0x00002996" [color="#c50f1f"];
        "0x00002996" -> "0x00002918" [color="#3a96dd"];
        "0x000029b0" -> "0x00002a29" [color="#13a10e"];
        "0x000029b0" -> "0x000029b7" [color="#c50f1f"];
        "0x000029f8" -> "0x00002aa0" [color="#13a10e"];
        "0x000029f8" -> "0x00002a0f" [color="#c50f1f"];
        "0x00002a0f" -> "0x00002a68" [color="#13a10e"];
        "0x00002a0f" -> "0x00002a14" [color="#c50f1f"];
        "0x00002a14" -> "0x0000296c" [color="#13a10e"];
        "0x00002a14" -> "0x00002a1d" [color="#c50f1f"];
        "0x00002a1d" -> "0x00002918" [color="#3a96dd"];
        "0x00002a29" -> "0x0000296c" [color="#13a10e"];
        "0x00002a29" -> "0x00002a34" [color="#c50f1f"];
        "0x00002a34" -> "0x00002a40" [color="#3a96dd"];
        "0x00002a40" -> "0x0000296c" [color="#13a10e"];
        "0x00002a40" -> "0x00002a4b" [color="#c50f1f"];
        "0x00002a4b" -> "0x00002918" [color="#3a96dd"];
        "0x00002a58" -> "0x00002918" [color="#3a96dd"];
        "0x00002a68" -> "0x00002918" [color="#3a96dd"];
        "0x00002a80" -> "0x00002918" [color="#3a96dd"];
        "0x00002a90" -> "0x00002918" [color="#3a96dd"];
        "0x00002aa0" -> "0x00002b15" [color="#13a10e"];
        "0x00002aa0" -> "0x00002adc" [color="#c50f1f"];
        "0x00002adc" -> "0x00002918" [color="#3a96dd"];
        "0x00002b15" -> "0x00002adc" [color="#3a96dd"];
        "0x00002b5c" -> "0x00002f9a" [color="#13a10e"];
        "0x00002b5c" -> "0x00002b68" [color="#c50f1f"];
        "0x00002b68" -> "0x00003594" [color="#13a10e"];
        "0x00002b68" -> "0x00002b74" [color="#c50f1f"];
        "0x00002b74" -> "0x00003362" [color="#13a10e"];
        "0x00002b74" -> "0x00002b81" [color="#c50f1f"];
        "0x00002b81" -> "0x000034c8" [color="#13a10e"];
        "0x00002b81" -> "0x00002b9b" [color="#c50f1f"];
        "0x00002b9b" -> "0x00002bad" [color="#13a10e"];
        "0x00002b9b" -> "0x00002ba4" [color="#c50f1f"];
        "0x00002ba4" -> "0x000033cd" [color="#13a10e"];
        "0x00002ba4" -> "0x00002bad" [color="#c50f1f"];
        "0x00002bad" -> "0x00002bb8" [color="#3a96dd"];
        "0x00002bb8" -> "0x00002dc5" [color="#13a10e"];
        "0x00002bb8" -> "0x00002bec" [color="#c50f1f"];
        "0x00002bec" -> "0x00002bf0" [color="#3a96dd"];
        "0x00002bf0" -> "0x00002c31" [color="#13a10e"];
        "0x00002bf0" -> "0x00002bff" [color="#c50f1f"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c14" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002f2c" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002f57" [color="#3a96dd"];
        "0x00002bff" -> "0x00002e9e" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002ed2" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002c31" [color="#3a96dd"];
        "0x00002bff" -> "0x00002e28" [color="#3a96dd"];
        "0x00002c14" -> "0x000032f8" [color="#13a10e"];
        "0x00002c14" -> "0x00002c31" [color="#c50f1f"];
        "0x00002c31" -> "0x00002c4a" [color="#13a10e"];
        "0x00002c31" -> "0x00002c3d" [color="#c50f1f"];
        "0x00002c3d" -> "0x0000317d" [color="#13a10e"];
        "0x00002c3d" -> "0x00002c4a" [color="#c50f1f"];
        "0x00002c4a" -> "0x00002e3a" [color="#13a10e"];
        "0x00002c4a" -> "0x00002c6e" [color="#c50f1f"];
        "0x00002c6e" -> "0x000030d3" [color="#13a10e"];
        "0x00002c6e" -> "0x00002cae" [color="#c50f1f"];
        "0x00002cae" -> "0x00002d8e" [color="#13a10e"];
        "0x00002cae" -> "0x00002cc5" [color="#c50f1f"];
        "0x00002cc5" -> "0x00003219" [color="#13a10e"];
        "0x00002cc5" -> "0x00002cd5" [color="#c50f1f"];
        "0x00002cd5" -> "0x00003279" [color="#13a10e"];
        "0x00002cd5" -> "0x00002ce3" [color="#c50f1f"];
        "0x00002ce3" -> "0x00002d5a" [color="#3a96dd"];
        "0x00002d5a" -> "0x00002d89" [color="#3a96dd"];
        "0x00002d89" -> "0x00002d9b" [color="#13a10e"];
        "0x00002d89" -> "0x00002d8e" [color="#c50f1f"];
        "0x00002d8e" -> "0x00002ff7" [color="#13a10e"];
        "0x00002d8e" -> "0x00002d9b" [color="#c50f1f"];
        "0x00002d9b" -> "0x00002fe2" [color="#13a10e"];
        "0x00002d9b" -> "0x00002da8" [color="#c50f1f"];
        "0x00002da8" -> "0x00002dae" [color="#3a96dd"];
        "0x00002dae" -> "0x00002bf0" [color="#13a10e"];
        "0x00002dae" -> "0x00002dc5" [color="#c50f1f"];
        "0x00002dc5" -> "0x00002de6" [color="#13a10e"];
        "0x00002dc5" -> "0x00002dd2" [color="#c50f1f"];
        "0x00002dd2" -> "0x0000342c" [color="#13a10e"];
        "0x00002dd2" -> "0x00002de3" [color="#c50f1f"];
        "0x00002de3" -> "0x00002de6" [color="#3a96dd"];
        "0x00002de6" -> "0x000032ce" [color="#13a10e"];
        "0x00002de6" -> "0x00002df6" [color="#c50f1f"];
        "0x00002df6" -> "0x0000358f" [color="#13a10e"];
        "0x00002df6" -> "0x00002e16" [color="#c50f1f"];
        "0x00002e28" -> "0x00002f61" [color="#13a10e"];
        "0x00002e28" -> "0x00002e35" [color="#c50f1f"];
        "0x00002e35" -> "0x00002e38" [color="#3a96dd"];
        "0x00002e38" -> "0x00002e3a" [color="#3a96dd"];
        "0x00002e3a" -> "0x00002d9b" [color="#13a10e"];
        "0x00002e3a" -> "0x00002e47" [color="#c50f1f"];
        "0x00002e47" -> "0x00002d9b" [color="#13a10e"];
        "0x00002e47" -> "0x00002e59" [color="#c50f1f"];
        "0x00002e59" -> "0x000030ae" [color="#13a10e"];
        "0x00002e59" -> "0x00002e76" [color="#c50f1f"];
        "0x00002e76" -> "0x00002d89" [color="#3a96dd"];
        "0x00002e9e" -> "0x00002e38" [color="#13a10e"];
        "0x00002e9e" -> "0x00002ea7" [color="#c50f1f"];
        "0x00002ea7" -> "0x00002e38" [color="#3a96dd"];
        "0x00002ed2" -> "0x00002ee4" [color="#13a10e"];
        "0x00002ed2" -> "0x00002ed9" [color="#c50f1f"];
        "0x00002ed9" -> "0x00003453" [color="#13a10e"];
        "0x00002ed9" -> "0x00002ee4" [color="#c50f1f"];
        "0x00002ee4" -> "0x00002e38" [color="#13a10e"];
        "0x00002ee4" -> "0x00002ef1" [color="#c50f1f"];
        "0x00002ef1" -> "0x00002f0d" [color="#3a96dd"];
        "0x00002f0d" -> "0x00002e38" [color="#3a96dd"];
        "0x00002f2c" -> "0x00002e38" [color="#13a10e"];
        "0x00002f2c" -> "0x00002f39" [color="#c50f1f"];
        "0x00002f39" -> "0x00002f0d" [color="#3a96dd"];
        "0x00002f57" -> "0x00002dae" [color="#3a96dd"];
        "0x00002f61" -> "0x00002e38" [color="#3a96dd"];
        "0x00002f9a" -> "0x0000333e" [color="#13a10e"];
        "0x00002f9a" -> "0x00002fad" [color="#c50f1f"];
        "0x00002fad" -> "0x00003544" [color="#13a10e"];
        "0x00002fad" -> "0x00002fb6" [color="#c50f1f"];
        "0x00002fb6" -> "0x00003509" [color="#13a10e"];
        "0x00002fb6" -> "0x00002fd0" [color="#c50f1f"];
        "0x00002fd0" -> "0x00002b9b" [color="#3a96dd"];
        "0x00002fe2" -> "0x00002da8" [color="#3a96dd"];
        "0x00002ff7" -> "0x00002d9b" [color="#13a10e"];
        "0x00002ff7" -> "0x0000302d" [color="#c50f1f"];
        "0x0000302d" -> "0x000030a4" [color="#3a96dd"];
        "0x000030a4" -> "0x00002d9b" [color="#3a96dd"];
        "0x000030ae" -> "0x00002d9b" [color="#3a96dd"];
        "0x000030d3" -> "0x00003388" [color="#13a10e"];
        "0x000030d3" -> "0x000030e0" [color="#c50f1f"];
        "0x000030e0" -> "0x00002d9b" [color="#13a10e"];
        "0x000030e0" -> "0x000030ef" [color="#c50f1f"];
        "0x000030ef" -> "0x000030a4" [color="#13a10e"];
        "0x000030ef" -> "0x000030f8" [color="#c50f1f"];
        "0x000030f8" -> "0x000030fd" [color="#3a96dd"];
        "0x000030fd" -> "0x00003290" [color="#13a10e"];
        "0x000030fd" -> "0x00003162" [color="#c50f1f"];
        "0x00003162" -> "0x00002d5a" [color="#3a96dd"];
        "0x0000317d" -> "0x00002c4a" [color="#13a10e"];
        "0x0000317d" -> "0x0000318b" [color="#c50f1f"];
        "0x0000318b" -> "0x00003475" [color="#13a10e"];
        "0x0000318b" -> "0x000031a5" [color="#c50f1f"];
        "0x000031a5" -> "0x000031d9" [color="#3a96dd"];
        "0x000031d9" -> "0x00002dae" [color="#3a96dd"];
        "0x00003219" -> "0x00003335" [color="#13a10e"];
        "0x00003219" -> "0x00003230" [color="#c50f1f"];
        "0x00003230" -> "0x00003279" [color="#13a10e"];
        "0x00003230" -> "0x00003239" [color="#c50f1f"];
        "0x00003239" -> "0x00003279" [color="#3a96dd"];
        "0x00003279" -> "0x00002d8e" [color="#13a10e"];
        "0x00003279" -> "0x0000328b" [color="#c50f1f"];
        "0x0000328b" -> "0x000030fd" [color="#3a96dd"];
        "0x00003290" -> "0x00002d8e" [color="#3a96dd"];
        "0x000032ce" -> "0x00002df6" [color="#3a96dd"];
        "0x000032f8" -> "0x00002dae" [color="#3a96dd"];
        "0x00003335" -> "0x00002cd5" [color="#3a96dd"];
        "0x0000333e" -> "0x00002fb6" [color="#13a10e"];
        "0x0000333e" -> "0x00003359" [color="#c50f1f"];
        "0x00003359" -> "0x00003546" [color="#13a10e"];
        "0x00003359" -> "0x00003362" [color="#c50f1f"];
        "0x00003362" -> "0x0000336e" [color="#3a96dd"];
        "0x0000336e" -> "0x0000296c" [color="#3a96dd"];
        "0x00003388" -> "0x000030e0" [color="#3a96dd"];
        "0x000033cd" -> "0x00002bb8" [color="#13a10e"];
        "0x000033cd" -> "0x000033e9" [color="#c50f1f"];
        "0x000033e9" -> "0x0000342c" [color="#3a96dd"];
        "0x0000342c" -> "0x00002de6" [color="#3a96dd"];
        "0x00003453" -> "0x00002dae" [color="#3a96dd"];
        "0x00003475" -> "0x000031d9" [color="#3a96dd"];
        "0x000034c8" -> "0x00003509" [color="#3a96dd"];
        "0x00003509" -> "0x00003544" [color="#3a96dd"];
        "0x00003544" -> "0x00003546" [color="#3a96dd"];
        "0x00003546" -> "0x00003362" [color="#13a10e"];
        "0x00003546" -> "0x00003559" [color="#c50f1f"];
        "0x00003559" -> "0x0000296c" [color="#3a96dd"];
        "0x00003594" -> "0x0000336e" [color="#3a96dd"];
}
