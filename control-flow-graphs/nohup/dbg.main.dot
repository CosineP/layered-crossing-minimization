digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002700" [URL="dbg.main/0x00002700", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2ce8\l1482: int dbg.main (int argc, char **argv);\l; var char **format @ rsp+0x28\l; var int64_t m @ rsp+0x34\l; var void *errname @ rsp+0x38\l; var int64_t var_20h @ rsp+0x40\l; var int64_t var_28h @ rsp+0x48\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002700      endbr64                                                ; int main(int argc,char ** argv);\l0x00002704      push r15\l0x00002706      push r14\l0x00002708      push r13\l0x0000270a      push r12\l0x0000270c      lea r12, [0x00007084]                                  ; \"coreutils\"\l0x00002713      push rbp\l0x00002714      mov ebp, edi                                           ; argc\l0x00002716      push rbx\l0x00002717      mov rbx, rsi                                           ; argv\l0x0000271a      sub rsp, 0x38\l0x0000271e      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002721      call dbg.set_program_name\l0x00002726      lea rsi, [0x00007a41]                                  ; const char *locale\l0x0000272d      mov edi, 6                                             ; int category\l0x00002732      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002737      lea rsi, str._usr_local_share_locale                   ; 0x70eb ; \"/usr/local/share/locale\" ; char *dirname\l0x0000273e      mov rdi, r12                                           ; char *domainname\l0x00002741      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002746      mov rdi, r12                                           ; char *domainname\l0x00002749      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x0000274e      lea rdi, str.POSIXLY_CORRECT                           ; 0x7103 ; \"POSIXLY_CORRECT\" ; const char *name\l0x00002755      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x0000275a      lea rdi, [dbg.close_stdout]                            ; 0x3170 ; func function\l0x00002761      cmp rax, 1\l0x00002765      sbb r12d, r12d\l0x00002768      and r12d, 0xfffffffe                                   ; 4294967294\l0x0000276c      add r12d, 0x7f\l0x00002770      mov dword [obj.exit_failure], r12d                     ; [0xb018:4]=125 ; \"}\"\l0x00002777      call sym.atexit                                        ; int atexit(func function)\l0x0000277c      sub rsp, 8\l0x00002780      xor r9d, r9d                                           ; func rtld_fini\l0x00002783      mov rsi, rbx                                           ; int argc\l0x00002786      lea rax, str.Jim_Meyering                              ; 0x7113 ; \"Jim Meyering\"\l0x0000278d      push 0\l0x0000278f      mov edi, ebp                                           ; int64_t arg3\l0x00002791      mov r8, qword [obj.Version]                            ; [0xb010:8]=0x75aa\l0x00002798      push rax\l0x00002799      lea rax, [dbg.usage]                                   ; 0x2dc0\l0x000027a0      lea rcx, str.GNU_coreutils                             ; 0x7080 ; \"GNU coreutils\"\l0x000027a7      push rax\l0x000027a8      lea rdx, str.nohup                                     ; 0x7004 ; \"nohup\" ; int64_t arg5\l0x000027af      xor eax, eax\l0x000027b1      call dbg.parse_gnu_standard_options_only\l0x000027b6      add rsp, 0x20\l0x000027ba      cmp dword [obj.optind], ebp                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=0\l0x000027c0      jge 0x2ca1\l"]
	"0x000027c6" [URL="dbg.main/0x000027c6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027c6      xor edi, edi                                           ; int fd\l0x000027c8      call sym.imp.isatty                                    ; int isatty(int fd)\l0x000027cd      mov edi, 1                                             ; int fd\l0x000027d2      mov r13d, eax\l0x000027d5      call sym.imp.isatty                                    ; int isatty(int fd)\l0x000027da      mov ebp, eax\l0x000027dc      test eax, eax\l0x000027de      je 0x2936\l"]
	"0x000027e4" [URL="dbg.main/0x000027e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x293e\l0x000027e4      mov edi, 2                                             ; int fd\l0x000027e9      call sym.imp.isatty                                    ; int isatty(int fd)\l0x000027ee      test eax, eax\l0x000027f0      mov r15d, eax\l0x000027f3      setne r8b\l0x000027f7      test r13d, r13d\l0x000027fa      jne 0x29f5\l"]
	"0x00002800" [URL="dbg.main/0x00002800", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002800      mov dword [rsp], 0\l0x00002807      test ebp, ebp\l0x00002809      je 0x2972\l"]
	"0x0000280f" [URL="dbg.main/0x0000280f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a32\l0x0000280f      mov edi, 0xfffffe7f                                    ; 4294966911 ; int m\l0x00002814      lea r15, str.nohup.out                                 ; 0x70ad ; \"nohup.out\"\l0x0000281b      mov byte [format], r8b\l0x00002820      call sym.imp.umask                                     ; int umask(int m)\l0x00002825      mov ecx, 0x180                                         ; int64_t arg4\l0x0000282a      mov edx, 0x441                                         ; int64_t arg3\l0x0000282f      mov rsi, r15                                           ; int64_t arg2\l0x00002832      mov edi, 1                                             ; int64_t arg1\l0x00002837      mov dword [m], eax\l0x0000283b      call dbg.fd_reopen\l0x00002840      mov r14d, eax\l"]
	"0x00002843" [URL="dbg.main/0x00002843", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a72\l0x00002843      lea rsi, str.nohup.out                                 ; 0x70ad ; \"nohup.out\"\l0x0000284a      xor r8d, r8d\l0x0000284d      test r14d, r14d\l0x00002850      js 0x2a77\l"]
	"0x00002856" [URL="dbg.main/0x00002856", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ae1\l0x00002856      mov edi, dword [m]                                     ; int m\l0x0000285a      mov qword [errname], r8\l0x0000285f      mov qword [var_20h], rsi\l0x00002864      call sym.imp.umask                                     ; int umask(int m)\l0x00002869      mov rsi, qword [var_20h]                               ; int64_t arg2\l0x0000286e      mov edi, 4                                             ; int64_t arg1\l0x00002873      call sym.quotearg_style\l0x00002878      test r13d, r13d\l0x0000287b      mov edx, 5\l0x00002880      lea rsi, str.ignoring_input_and_appending_output_to__s ; 0x74f8 ; \"ignoring input and appending output to %s\"\l0x00002887      mov r15, rax\l0x0000288a      lea rax, str.appending_output_to__s                    ; 0x70b7 ; \"appending output to %s\"\l0x00002891      cmove rsi, rax\l0x00002895      xor edi, edi\l0x00002897      call sym.imp.dcgettext\l0x0000289c      xor esi, esi                                           ; int errname\l0x0000289e      xor edi, edi                                           ; int status\l0x000028a0      mov rcx, r15\l0x000028a3      mov rdx, rax                                           ; char *format\l0x000028a6      xor eax, eax\l0x000028a8      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000028ad      mov rdi, qword [errname]                               ; void *ptr\l0x000028b2      call sym.imp.free                                      ; void free(void *ptr)\l0x000028b7      cmp byte [format], 0\l0x000028bc      jne 0x2ae6\l"]
	"0x000028c2" [URL="dbg.main/0x000028c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2975\l0x000028c2      mov r15d, 2\l"]
	"0x000028c8" [URL="dbg.main/0x000028c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x29e2, 0x29f0, 0x2b33\l0x000028c8      mov rax, qword [obj.stderr]                            ; obj.stderr_GLIBC_2.2.5\l                                                                       ; [0xb0c0:8]=0\l0x000028cf      test byte [rax], 0x20\l0x000028d2      jne 0x2924\l"]
	"0x000028d4" [URL="dbg.main/0x000028d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028d4      mov esi, 1                                             ; void *func\l0x000028d9      mov edi, 1                                             ; int sig\l0x000028de      xor r12d, r12d\l0x000028e1      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x000028e6      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=0\l0x000028ed      lea rbx, [rbx + rax*8]\l0x000028f1      mov rdi, qword [rbx]\l0x000028f4      mov rsi, rbx\l0x000028f7      call sym.imp.execvp\l0x000028fc      call sym.imp.__errno_location\l0x00002901      mov esi, 2\l0x00002906      mov edi, r15d\l0x00002909      mov ebp, dword [rax]\l0x0000290b      cmp ebp, 2\l0x0000290e      sete r12b\l0x00002912      add r12d, 0x7e\l0x00002916      call sym.imp.dup2\l0x0000291b      cmp eax, 2\l0x0000291e      je 0x2b38\l"]
	"0x00002924" [URL="dbg.main/0x00002924", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28d2, 0x2b6c, 0x2c3a\l0x00002924      add rsp, 0x38\l0x00002928      mov eax, r12d\l0x0000292b      pop rbx\l0x0000292c      pop rbp\l0x0000292d      pop r12\l0x0000292f      pop r13\l0x00002931      pop r14\l0x00002933      pop r15\l0x00002935      ret\l"]
	"0x00002936" [URL="dbg.main/0x00002936", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27de\l0x00002936      call sym.imp.__errno_location\l0x0000293b      cmp dword [rax], 9\l0x0000293e      jne 0x27e4\l"]
	"0x00002944" [URL="dbg.main/0x00002944", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002944      mov edi, 2                                             ; int fd\l0x00002949      mov r14d, 1\l0x0000294f      call sym.imp.isatty                                    ; int isatty(int fd)\l0x00002954      mov dword [rsp], 1\l0x0000295b      test eax, eax\l0x0000295d      mov r15d, eax\l0x00002960      setne r8b\l0x00002964      test r13d, r13d\l0x00002967      je 0x2a38\l"]
	"0x0000296d" [URL="dbg.main/0x0000296d", fillcolor="white",color="#767676", fontname="Courier",label="0x0000296d      jmp 0x29ff\l"]
	"0x00002972" [URL="dbg.main/0x00002972", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2809, 0x2a40\l0x00002972      test r8b, r8b\l0x00002975      je 0x28c2\l"]
	"0x0000297b" [URL="dbg.main/0x0000297b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000297b      mov edx, 3                                             ; int64_t arg3\l0x00002980      mov esi, 0x406                                         ; signed int arg2\l0x00002985      mov edi, 2                                             ; int64_t arg1\l0x0000298a      xor eax, eax\l0x0000298c      call dbg.rpl_fcntl\l0x00002991      mov r14d, 1\l0x00002997      mov r15d, eax\l"]
	"0x0000299a" [URL="dbg.main/0x0000299a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b07\l0x0000299a      test r13d, r13d\l0x0000299d      lea rax, str.redirecting_stderr_to_stdout              ; 0x70ce ; \"redirecting stderr to stdout\"\l0x000029a4      mov edx, 5\l0x000029a9      lea rsi, str.ignoring_input_and_redirecting_stderr_to_stdout ; 0x7528 ; \"ignoring input and redirecting stderr to stdout\"\l0x000029b0      cmove rsi, rax\l0x000029b4      xor edi, edi\l0x000029b6      call sym.imp.dcgettext\l0x000029bb      xor esi, esi                                           ; int errname\l0x000029bd      xor edi, edi                                           ; int status\l0x000029bf      mov rdx, rax                                           ; char *format\l0x000029c2      xor eax, eax\l0x000029c4      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000029c9" [URL="dbg.main/0x000029c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b01\l0x000029c9      mov esi, 2\l0x000029ce      mov edi, r14d\l0x000029d1      call sym.imp.dup2\l0x000029d6      test eax, eax\l0x000029d8      js 0x2baf\l"]
	"0x000029de" [URL="dbg.main/0x000029de", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bd9\l0x000029de      cmp dword [rsp], 0\l0x000029e2      je 0x28c8\l"]
	"0x000029e8" [URL="dbg.main/0x000029e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e8      mov edi, r14d                                          ; int fildes\l0x000029eb      call sym.imp.close                                     ; int close(int fildes)\l0x000029f0      jmp 0x28c8\l"]
	"0x000029f5" [URL="dbg.main/0x000029f5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27fa\l0x000029f5      mov dword [rsp], 0\l0x000029fc      xor r14d, r14d\l"]
	"0x000029ff" [URL="dbg.main/0x000029ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x296d\l0x000029ff      xor ecx, ecx                                           ; int64_t arg4\l0x00002a01      xor edi, edi                                           ; int64_t arg1\l0x00002a03      mov edx, 1                                             ; int64_t arg3\l0x00002a08      mov byte [format], r8b\l0x00002a0d      lea rsi, str._dev_null                                 ; 0x7130 ; \"/dev/null\" ; int64_t arg2\l0x00002a14      call dbg.fd_reopen\l0x00002a19      movzx r8d, byte [format]\l0x00002a1f      test eax, eax\l0x00002a21      js 0x2b71\l"]
	"0x00002a27" [URL="dbg.main/0x00002a27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2baa\l0x00002a27      or r15d, ebp\l0x00002a2a      je 0x2b0c\l"]
	"0x00002a30" [URL="dbg.main/0x00002a30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a30      test ebp, ebp\l0x00002a32      jne 0x280f\l"]
	"0x00002a38" [URL="dbg.main/0x00002a38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2967\l0x00002a38      and r14b, r8b\l0x00002a3b      mov byte [format], r14b\l0x00002a40      je 0x2972\l"]
	"0x00002a46" [URL="dbg.main/0x00002a46", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a46      mov edi, 0xfffffe7f                                    ; 4294966911 ; int m\l0x00002a4b      lea r15, str.nohup.out                                 ; 0x70ad ; \"nohup.out\"\l0x00002a52      call sym.imp.umask                                     ; int umask(int m)\l0x00002a57      mov edx, 0x180\l0x00002a5c      mov esi, 0x441                                         ; int oflag\l0x00002a61      mov rdi, r15                                           ; const char *path\l0x00002a64      mov dword [m], eax\l0x00002a68      xor eax, eax\l0x00002a6a      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x00002a6f      mov r14d, eax\l0x00002a72      jmp 0x2843\l"]
	"0x00002a77" [URL="dbg.main/0x00002a77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2850\l0x00002a77      call sym.imp.__errno_location\l0x00002a7c      lea rdi, str.HOME                                      ; 0x7149 ; \"HOME\" ; const char *name\l0x00002a83      mov qword [var_20h], rax\l0x00002a88      mov eax, dword [rax]\l0x00002a8a      mov dword [errname], eax\l0x00002a8e      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x00002a93      mov rdi, rax\l0x00002a96      test rax, rax\l0x00002a99      je 0x2c04\l"]
	"0x00002a9f" [URL="dbg.main/0x00002a9f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a9f      xor edx, edx\l0x00002aa1      mov rsi, r15\l0x00002aa4      call dbg.file_name_concat\l0x00002aa9      test ebp, ebp\l0x00002aab      je 0x2bde\l"]
	"0x00002ab1" [URL="dbg.main/0x00002ab1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ab1      mov ecx, 0x180                                         ; int64_t arg4\l0x00002ab6      mov edx, 0x441                                         ; int64_t arg3\l0x00002abb      mov rsi, rax                                           ; int64_t arg2\l0x00002abe      mov edi, 1                                             ; int64_t arg1\l0x00002ac3      mov qword [var_28h], rax\l0x00002ac8      call dbg.fd_reopen\l0x00002acd      mov r8, qword [var_28h]\l0x00002ad2      mov r14d, eax\l"]
	"0x00002ad5" [URL="dbg.main/0x00002ad5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bff\l0x00002ad5      test r14d, r14d\l0x00002ad8      js 0x2c3f\l"]
	"0x00002ade" [URL="dbg.main/0x00002ade", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ade      mov rsi, r8\l0x00002ae1      jmp 0x2856\l"]
	"0x00002ae6" [URL="dbg.main/0x00002ae6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28bc\l0x00002ae6      mov edx, 3                                             ; int64_t arg3\l0x00002aeb      mov esi, 0x406                                         ; signed int arg2\l0x00002af0      mov edi, 2                                             ; int64_t arg1\l0x00002af5      xor eax, eax\l0x00002af7      call dbg.rpl_fcntl\l0x00002afc      mov r15d, eax\l0x00002aff      test ebp, ebp\l0x00002b01      jne 0x29c9\l"]
	"0x00002b07" [URL="dbg.main/0x00002b07", fillcolor="white",color="#767676", fontname="Courier",label="0x00002b07      jmp 0x299a\l"]
	"0x00002b0c" [URL="dbg.main/0x00002b0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a2a\l0x00002b0c      mov edx, 5\l0x00002b11      lea rsi, str.ignoring_input                            ; 0x713a ; \"ignoring input\"\l0x00002b18      xor edi, edi\l0x00002b1a      mov r15d, 2\l0x00002b20      call sym.imp.dcgettext\l0x00002b25      xor esi, esi                                           ; int errname\l0x00002b27      xor edi, edi                                           ; int status\l0x00002b29      mov rdx, rax                                           ; char *format\l0x00002b2c      xor eax, eax\l0x00002b2e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002b33      jmp 0x28c8\l"]
	"0x00002b38" [URL="dbg.main/0x00002b38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x291e\l0x00002b38      mov rsi, qword [rbx]                                   ; int64_t arg2\l0x00002b3b      mov edi, 4                                             ; int64_t arg1\l0x00002b40      call sym.quotearg_style\l0x00002b45      mov edx, 5\l0x00002b4a      lea rsi, str.failed_to_run_command__s                  ; 0x714e ; \"failed to run command %s\"\l0x00002b51      mov r13, rax\l"]
	"0x00002b54" [URL="dbg.main/0x00002b54", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c9c\l0x00002b54      xor edi, edi\l0x00002b56      call sym.imp.dcgettext\l0x00002b5b      mov rcx, r13\l0x00002b5e      mov esi, ebp                                           ; int errname\l0x00002b60      xor edi, edi                                           ; int status\l0x00002b62      mov rdx, rax                                           ; char *format\l0x00002b65      xor eax, eax\l0x00002b67      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002b6c      jmp 0x2924\l"]
	"0x00002b71" [URL="dbg.main/0x00002b71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a21\l0x00002b71      mov edx, 5\l0x00002b76      lea rsi, str.failed_to_render_standard_input_unusable  ; 0x7558 ; \"failed to render standard input unusable\"\l0x00002b7d      xor edi, edi\l0x00002b7f      mov byte [m], r8b\l0x00002b84      call sym.imp.dcgettext\l0x00002b89      mov qword [format], rax\l0x00002b8e      call sym.imp.__errno_location\l0x00002b93      mov rdx, qword [format]                                ; char *format\l0x00002b98      mov edi, r12d                                          ; int status\l0x00002b9b      mov esi, dword [rax]                                   ; int errname\l0x00002b9d      xor eax, eax\l0x00002b9f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ba4      movzx r8d, byte [m]\l0x00002baa      jmp 0x2a27\l"]
	"0x00002baf" [URL="dbg.main/0x00002baf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29d8\l0x00002baf      xor edi, edi\l0x00002bb1      mov edx, 5\l0x00002bb6      lea rsi, str.failed_to_redirect_standard_error         ; 0x7588 ; \"failed to redirect standard error\"\l0x00002bbd      call sym.imp.dcgettext\l0x00002bc2      mov r13, rax\l0x00002bc5      call sym.imp.__errno_location\l0x00002bca      mov rdx, r13                                           ; char *format\l0x00002bcd      mov edi, r12d                                          ; int status\l0x00002bd0      mov esi, dword [rax]                                   ; int errname\l0x00002bd2      xor eax, eax\l0x00002bd4      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002bd9      jmp 0x29de\l"]
	"0x00002bde" [URL="dbg.main/0x00002bde", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aab\l0x00002bde      mov qword [var_28h], rax\l0x00002be3      mov rdi, rax                                           ; const char *path\l0x00002be6      mov edx, 0x180\l0x00002beb      xor eax, eax\l0x00002bed      mov esi, 0x441                                         ; int oflag\l0x00002bf2      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x00002bf7      mov r8, qword [var_28h]\l0x00002bfc      mov r14d, eax\l0x00002bff      jmp 0x2ad5\l"]
	"0x00002c04" [URL="dbg.main/0x00002c04", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a99\l0x00002c04      mov rsi, r15                                           ; int64_t arg2\l0x00002c07      mov edi, 4                                             ; int64_t arg1\l0x00002c0c      call sym.quotearg_style\l0x00002c11      xor edi, edi\l0x00002c13      mov edx, 5\l0x00002c18      lea rsi, str.failed_to_open__s                         ; 0x7167 ; \"failed to open %s\"\l0x00002c1f      mov r13, rax\l0x00002c22      call sym.imp.dcgettext\l0x00002c27      mov esi, dword [errname]                               ; int errname\l0x00002c2b      mov rcx, r13\l0x00002c2e      xor edi, edi                                           ; int status\l0x00002c30      mov rdx, rax                                           ; char *format\l0x00002c33      xor eax, eax\l0x00002c35      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002c3a      jmp 0x2924\l"]
	"0x00002c3f" [URL="dbg.main/0x00002c3f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad8\l0x00002c3f      mov rax, qword [var_20h]\l0x00002c44      mov rsi, r15                                           ; int64_t arg2\l0x00002c47      mov edi, 4                                             ; int64_t arg1\l0x00002c4c      lea r14, str.failed_to_open__s                         ; 0x7167 ; \"failed to open %s\"\l0x00002c53      mov qword [rsp], r8\l0x00002c57      mov ebp, dword [rax]\l0x00002c59      call sym.quotearg_style\l0x00002c5e      mov edx, 5\l0x00002c63      mov rsi, r14\l0x00002c66      xor edi, edi\l0x00002c68      mov r13, rax\l0x00002c6b      call sym.imp.dcgettext\l0x00002c70      mov esi, dword [errname]                               ; int errname\l0x00002c74      mov rcx, r13\l0x00002c77      xor edi, edi                                           ; int status\l0x00002c79      mov rdx, rax                                           ; char *format\l0x00002c7c      xor eax, eax\l0x00002c7e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002c83      mov rsi, qword [rsp]                                   ; int64_t arg2\l0x00002c87      mov edi, 4                                             ; int64_t arg1\l0x00002c8c      call sym.quotearg_style\l0x00002c91      mov edx, 5\l; DATA XREF from sym.quotearg_buffer_restyled @ 0x497a\l0x00002c96      mov rsi, r14\l0x00002c99      mov r13, rax\l0x00002c9c      jmp 0x2b54\l"]
	"0x00002ca1" [URL="dbg.main/0x00002ca1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27c0\l0x00002ca1      mov edx, 5\l0x00002ca6      lea rsi, str.missing_operand                           ; 0x7120 ; \"missing operand\"\l0x00002cad      xor edi, edi\l0x00002caf      call sym.imp.dcgettext\l0x00002cb4      xor edi, edi                                           ; int status\l0x00002cb6      xor esi, esi                                           ; int errname\l0x00002cb8      mov rdx, rax                                           ; char *format\l0x00002cbb      xor eax, eax\l0x00002cbd      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002cc2      mov edi, r12d                                          ; int64_t arg1\l0x00002cc5      call dbg.usage\l"]
        "0x00002700" -> "0x00002ca1" [color="#13a10e"];
        "0x00002700" -> "0x000027c6" [color="#c50f1f"];
        "0x000027c6" -> "0x00002936" [color="#13a10e"];
        "0x000027c6" -> "0x000027e4" [color="#c50f1f"];
        "0x000027e4" -> "0x000029f5" [color="#13a10e"];
        "0x000027e4" -> "0x00002800" [color="#c50f1f"];
        "0x00002800" -> "0x00002972" [color="#13a10e"];
        "0x00002800" -> "0x0000280f" [color="#c50f1f"];
        "0x0000280f" -> "0x00002843" [color="#3a96dd"];
        "0x00002843" -> "0x00002a77" [color="#13a10e"];
        "0x00002843" -> "0x00002856" [color="#c50f1f"];
        "0x00002856" -> "0x00002ae6" [color="#13a10e"];
        "0x00002856" -> "0x000028c2" [color="#c50f1f"];
        "0x000028c2" -> "0x000028c8" [color="#3a96dd"];
        "0x000028c8" -> "0x00002924" [color="#13a10e"];
        "0x000028c8" -> "0x000028d4" [color="#c50f1f"];
        "0x000028d4" -> "0x00002b38" [color="#13a10e"];
        "0x000028d4" -> "0x00002924" [color="#c50f1f"];
        "0x00002936" -> "0x000027e4" [color="#13a10e"];
        "0x00002936" -> "0x00002944" [color="#c50f1f"];
        "0x00002944" -> "0x00002a38" [color="#13a10e"];
        "0x00002944" -> "0x0000296d" [color="#c50f1f"];
        "0x0000296d" -> "0x000029ff" [color="#3a96dd"];
        "0x00002972" -> "0x000028c2" [color="#13a10e"];
        "0x00002972" -> "0x0000297b" [color="#c50f1f"];
        "0x0000297b" -> "0x0000299a" [color="#3a96dd"];
        "0x0000299a" -> "0x000029c9" [color="#3a96dd"];
        "0x000029c9" -> "0x00002baf" [color="#13a10e"];
        "0x000029c9" -> "0x000029de" [color="#c50f1f"];
        "0x000029de" -> "0x000028c8" [color="#13a10e"];
        "0x000029de" -> "0x000029e8" [color="#c50f1f"];
        "0x000029e8" -> "0x000028c8" [color="#3a96dd"];
        "0x000029f5" -> "0x000029ff" [color="#3a96dd"];
        "0x000029ff" -> "0x00002b71" [color="#13a10e"];
        "0x000029ff" -> "0x00002a27" [color="#c50f1f"];
        "0x00002a27" -> "0x00002b0c" [color="#13a10e"];
        "0x00002a27" -> "0x00002a30" [color="#c50f1f"];
        "0x00002a30" -> "0x0000280f" [color="#13a10e"];
        "0x00002a30" -> "0x00002a38" [color="#c50f1f"];
        "0x00002a38" -> "0x00002972" [color="#13a10e"];
        "0x00002a38" -> "0x00002a46" [color="#c50f1f"];
        "0x00002a46" -> "0x00002843" [color="#3a96dd"];
        "0x00002a77" -> "0x00002c04" [color="#13a10e"];
        "0x00002a77" -> "0x00002a9f" [color="#c50f1f"];
        "0x00002a9f" -> "0x00002bde" [color="#13a10e"];
        "0x00002a9f" -> "0x00002ab1" [color="#c50f1f"];
        "0x00002ab1" -> "0x00002ad5" [color="#3a96dd"];
        "0x00002ad5" -> "0x00002c3f" [color="#13a10e"];
        "0x00002ad5" -> "0x00002ade" [color="#c50f1f"];
        "0x00002ade" -> "0x00002856" [color="#3a96dd"];
        "0x00002ae6" -> "0x000029c9" [color="#13a10e"];
        "0x00002ae6" -> "0x00002b07" [color="#c50f1f"];
        "0x00002b07" -> "0x0000299a" [color="#3a96dd"];
        "0x00002b0c" -> "0x000028c8" [color="#3a96dd"];
        "0x00002b38" -> "0x00002b54" [color="#3a96dd"];
        "0x00002b54" -> "0x00002924" [color="#3a96dd"];
        "0x00002b71" -> "0x00002a27" [color="#3a96dd"];
        "0x00002baf" -> "0x000029de" [color="#3a96dd"];
        "0x00002bde" -> "0x00002ad5" [color="#3a96dd"];
        "0x00002c04" -> "0x00002924" [color="#3a96dd"];
        "0x00002c3f" -> "0x00002b54" [color="#3a96dd"];
}
