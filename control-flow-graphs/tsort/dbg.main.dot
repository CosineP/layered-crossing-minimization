digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000026c0" [URL="dbg.main/0x000026c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x27d8\l256: int dbg.main (int argc, char **argv);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000026c0      endbr64                                                ; int main(int argc,char ** argv);\l0x000026c4      push r12\l0x000026c6      lea r12, [0x0000a084]                                  ; \"coreutils\"\l0x000026cd      push rbp\l0x000026ce      mov rbp, rsi                                           ; argv\l0x000026d1      push rbx\l0x000026d2      mov ebx, edi                                           ; argc\l0x000026d4      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000026d7      call dbg.set_program_name\l0x000026dc      lea rsi, [0x0000a0d4]                                  ; const char *locale\l0x000026e3      mov edi, 6                                             ; int category\l0x000026e8      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000026ed      lea rsi, str._usr_local_share_locale                   ; 0xa10a ; \"/usr/local/share/locale\" ; char *dirname\l0x000026f4      mov rdi, r12                                           ; char *domainname\l0x000026f7      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000026fc      mov rdi, r12                                           ; char *domainname\l0x000026ff      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002704      lea rdi, [dbg.close_stdout]                            ; 0x5fd0 ; func function\l0x0000270b      call sym.atexit                                        ; int atexit(func function)\l0x00002710      sub rsp, 8\l0x00002714      mov rsi, rbp                                           ; int argc\l0x00002717      mov edi, ebx                                           ; func main\l0x00002719      lea rax, str.Mark_Kettenis                             ; 0xa122 ; \"Mark Kettenis\"\l0x00002720      push 0\l0x00002722      mov r8, qword [obj.Version]                            ; [0xe010:8]=0xa3c2\l0x00002729      lea rdx, [global_program]                              ; 0xa004 ; \"tsort\" ; int64_t arg5\l0x00002730      push rax\l0x00002731      lea rax, [dbg.usage]                                   ; 0x2ac0\l0x00002738      mov r9d, 1\l0x0000273e      lea rcx, str.GNU_coreutils                             ; 0xa080 ; \"GNU coreutils\"\l0x00002745      push rax\l0x00002746      xor eax, eax\l0x00002748      call dbg.parse_gnu_standard_options_only\l0x0000274d      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xe098:4]=0\l0x00002754      mov edx, ebx\l0x00002756      add rsp, 0x20\l0x0000275a      sub edx, eax\l0x0000275c      cmp edx, 1\l0x0000275f      jg 0x2781\l"]
	"0x00002761" [URL="dbg.main/0x00002761", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002761      lea rdi, [0x0000a108]                                  ; \"-\"\l0x00002768      cmp eax, ebx\l0x0000276a      je 0x2771\l"]
	"0x0000276c" [URL="dbg.main/0x0000276c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000276c      mov rdi, qword [rbp + rax*8]\l"]
	"0x00002771" [URL="dbg.main/0x00002771", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x276a\l0x00002771      call dbg.tsort\l0x00002776      pop rbx\l0x00002777      pop rbp\l0x00002778      xor eax, 1\l0x0000277b      pop r12\l0x0000277d      movzx eax, al\l0x00002780      ret\l"]
	"0x00002781" [URL="dbg.main/0x00002781", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x275f\l0x00002781      mov rdi, qword [rbp + rax*8 + 8]                       ; int64_t arg1\l0x00002786      call dbg.quote\l0x0000278b      mov edx, 5\l0x00002790      lea rsi, str.extra_operand__s                          ; 0xa130 ; \"extra operand %s\"\l0x00002797      xor edi, edi\l0x00002799      mov r12, rax\l0x0000279c      call sym.imp.dcgettext\l0x000027a1      xor edi, edi                                           ; int status\l0x000027a3      mov rcx, r12\l0x000027a6      xor esi, esi                                           ; int errname\l0x000027a8      mov rdx, rax                                           ; char *format\l0x000027ab      xor eax, eax\l0x000027ad      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000027b2      mov edi, 1                                             ; int64_t arg1\l0x000027b7      call dbg.usage\l0x000027bc      nop dword [rax]\l"]
        "0x000026c0" -> "0x00002781" [color="#13a10e"];
        "0x000026c0" -> "0x00002761" [color="#c50f1f"];
        "0x00002761" -> "0x00002771" [color="#13a10e"];
        "0x00002761" -> "0x0000276c" [color="#c50f1f"];
        "0x0000276c" -> "0x00002771" [color="#3a96dd"];
}
