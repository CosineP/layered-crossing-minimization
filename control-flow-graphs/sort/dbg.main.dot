digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00003eb0" [URL="dbg.main/0x00003eb0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x68f8\l9671: int dbg.main (int argc, char **argv);\l; var line temp @ rbp-0x390\l; var keyfield key_buf @ rbp-0x370\l; var keyfield gkey @ rbp-0x320\l; var keyfield ugkey @ rbp-0x2d0\l; var char *suffix @ rbp-0x280\l; var merge_node_queue queue @ rbp-0x160\l; var char[21] tmp @ rbp-0xc0\l; var char[46] obuf @ rbp-0xa0\l; var unsigned char[16] buf @ rbp-0x70\l; var uint32_t var_8h @ rsp+0x18\l; var uint32_t var_10h @ rsp+0x20\l; var uint32_t var_18h @ rsp+0x28\l; var char *var_20h @ rsp+0x30\l; var char *var_28h @ rsp+0x38\l; var uint32_t var_30h @ rsp+0x40\l; var int64_t var_38h @ rsp+0x48\l; var uint32_t var_40h @ rsp+0x50\l; var uint32_t var_48h @ rsp+0x58\l; var int64_t var_50h @ rsp+0x60\l; var FILE *stream @ rsp+0x68\l; var uint32_t var_60h @ rsp+0x70\l; var uint32_t var_68h @ rsp+0x78\l; var int64_t var_70h @ rsp+0x80\l; var int64_t var_78h @ rsp+0x88\l; var int64_t var_80h @ rsp+0x90\l; var uint32_t var_8eh @ rsp+0x9e\l; var int64_t var_8fh @ rsp+0x9f\l; var int64_t var_90h @ rsp+0xa0\l; var int64_t var_98h @ rsp+0xa8\l; var void *s1 @ rsp+0xb0\l; var int64_t var_a8h @ rsp+0xb8\l; var int64_t var_b0h @ rsp+0xc0\l; var int64_t var_b8h @ rsp+0xc8\l; var int64_t var_c0h @ rsp+0xd0\l; var int64_t var_c8h @ rsp+0xd8\l; var int64_t var_d0h @ rsp+0xe0\l; var uint32_t var_d8h @ rsp+0xe8\l; var int64_t var_f9h @ rsp+0x109\l; var int64_t var_110h @ rsp+0x120\l; var int64_t var_118h @ rsp+0x128\l; var int64_t var_120h @ rsp+0x130\l; var int64_t var_128h @ rsp+0x138\l; var int64_t var_130h @ rsp+0x140\l; var int64_t var_138h @ rsp+0x148\l; var int64_t var_140h @ rsp+0x150\l; var int64_t var_141h @ rsp+0x151\l; var int64_t var_142h @ rsp+0x152\l; var int64_t var_143h @ rsp+0x153\l; var int64_t var_144h @ rsp+0x154\l; var int64_t var_145h @ rsp+0x155\l; var int64_t var_146h @ rsp+0x156\l; var int64_t var_147h @ rsp+0x157\l; var int64_t var_148h @ rsp+0x158\l; var uint32_t var_160h @ rsp+0x170\l; var int64_t var_170h @ rsp+0x180\l; var uint32_t var_178h @ rsp+0x188\l; var int64_t var_180h @ rsp+0x190\l; var int64_t var_188h @ rsp+0x198\l; var uint32_t var_190h @ rsp+0x1a0\l; var int64_t var_191h @ rsp+0x1a1\l; var int64_t var_192h @ rsp+0x1a2\l; var int64_t var_193h @ rsp+0x1a3\l; var int64_t var_194h @ rsp+0x1a4\l; var int64_t var_195h @ rsp+0x1a5\l; var int64_t var_196h @ rsp+0x1a6\l; var int64_t var_197h @ rsp+0x1a7\l; var int64_t var_198h @ rsp+0x1a8\l; var int64_t var_1b0h @ rsp+0x1c0\l; var int64_t var_1b8h @ rsp+0x1c8\l; var uint32_t var_2d0h @ rsp+0x2e0\l; var int64_t var_2d8h @ rsp+0x2e8\l; var int64_t var_2e8h @ rsp+0x2f8\l; var int64_t var_2f8h @ rsp+0x308\l; var int64_t var_300h @ rsp+0x310\l; var int64_t var_308h @ rsp+0x318\l; var int64_t var_318h @ rsp+0x328\l; var int64_t var_328h @ rsp+0x338\l; var int64_t var_338h @ rsp+0x348\l; var int64_t var_348h @ rsp+0x358\l; var int64_t var_358h @ rsp+0x368\l; var int64_t var_370h @ rsp+0x380\l; var int64_t var_390h @ rsp+0x3a0\l; var int64_t var_391h @ rsp+0x3a1\l; var int64_t var_3c0h @ rsp+0x3d0\l; var int64_t var_3c1h @ rsp+0x3d1\l; var int64_t var_3c3h @ rsp+0x3d3\l; var int64_t var_3f8h @ rsp+0x408\l; arg int const[11] const sig @ rbx\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00003eb0      endbr64                                                ; int main(int argc,char ** argv);\l0x00003eb4      push r15\l0x00003eb6      push r14\l0x00003eb8      push r13\l0x00003eba      push r12\l0x00003ebc      lea r12, [0x00016b2a]                                  ; \"coreutils\"\l0x00003ec3      push rbp\l0x00003ec4      mov rbp, rsi                                           ; argv\l0x00003ec7      push rbx\l0x00003ec8      mov ebx, edi                                           ; argc\l0x00003eca      lea rdi, str.POSIXLY_CORRECT                           ; 0x16b5d ; \"POSIXLY_CORRECT\" ; const char *name\l0x00003ed1      sub rsp, 0x408\l0x00003ed8      mov rax, qword fs:[0x28]\l0x00003ee1      mov qword [var_3f8h], rax\l0x00003ee9      xor eax, eax\l0x00003eeb      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x00003ef0      test rax, rax\l0x00003ef3      mov qword [var_28h], rax\l0x00003ef8      setne byte [rsp]\l0x00003efc      call dbg.posix2_version\l0x00003f01      mov rdi, qword [rbp]                                   ; int64_t arg1\l0x00003f05      sub eax, 0x30db0\l0x00003f0a      cmp eax, 0x2b8\l0x00003f0f      seta byte [var_10h]\l0x00003f14      call dbg.set_program_name\l0x00003f19      lea rsi, [0x00016a99]                                  ; const char *locale\l0x00003f20      mov edi, 6                                             ; int category\l0x00003f25      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00003f2a      lea rsi, str._usr_local_share_locale                   ; 0x16b6d ; \"/usr/local/share/locale\" ; char *dirname\l0x00003f31      mov rdi, r12                                           ; char *domainname\l0x00003f34      mov qword [var_20h], rax\l0x00003f39      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00003f3e      mov rdi, r12                                           ; char *domainname\l0x00003f41      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00003f46      mov edi, 3\l0x00003f4b      mov dword [obj.exit_failure], 2                        ; [0x1d130:4]=2\l0x00003f55      call dbg.hard_locale\l0x00003f5a      mov edi, 2\l0x00003f5f      mov byte [obj.hard_LC_COLLATE], al                     ; [0x1d881:1]=80 ; \"P\"\l0x00003f65      call dbg.hard_locale\l0x00003f6a      mov byte [var_8h], al\l0x00003f6e      mov byte [obj.hard_LC_TIME], al                        ; [0x1d880:1]=80 ; \"PP\"\l0x00003f74      call sym.imp.localeconv                                ; lconv*localeconv(void)\l0x00003f79      mov rcx, qword [rax]\l0x00003f7c      movzx edx, byte [rcx]\l0x00003f7f      mov dword [obj.decimal_point], edx                     ; [0x1d888:4]=46 ; \".\"\l0x00003f85      test edx, edx\l0x00003f87      je 0x4087\l"]
	"0x00003f8d" [URL="dbg.main/0x00003f8d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f8d      cmp byte [rcx + 1], 0\l0x00003f91      jne 0x4087\l"]
	"0x00003f97" [URL="dbg.main/0x00003f97", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4091\l0x00003f97      mov rdx, qword [rax + 8]\l0x00003f9b      movzx eax, byte [rdx]\l0x00003f9e      mov dword [obj.thousands_sep], eax                     ; [0x1d884:4]=-1\l0x00003fa4      test eax, eax\l0x00003fa6      je 0x4078\l"]
	"0x00003fac" [URL="dbg.main/0x00003fac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003fac      cmp byte [rdx + 1], 0\l0x00003fb0      jne 0x4078\l"]
	"0x00003fb6" [URL="dbg.main/0x00003fb6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4082\l0x00003fb6      mov byte [obj.have_read_stdin], 0                      ; [0x1d438:1]=1\l0x00003fbd      mov r14d, 1\l0x00003fc3      xor r13d, r13d\l0x00003fc6      call sym.imp.__ctype_b_loc\l0x00003fcb      mov r12, rax\l0x00003fce      call sym.imp.__ctype_toupper_loc\l0x00003fd3      xor ecx, ecx\l0x00003fd5      lea r11, [0x0001d75f]\l0x00003fdc      lea r10, [0x0001d65f]\l0x00003fe3      mov rdi, rax\l0x00003fe6      lea r9, [0x0001d55f]\l0x00003fed      lea r8, [0x0001d45f]\l0x00003ff4      jmp 0x4049\l"]
	"0x00004000" [URL="dbg.main/0x00004000", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4060\l0x00004000      mov dword [rcx - 0x34], esp\l0x00004003      invalid\l0x00004004      xchg ebp, eax\l0x00004005      mov al, 0xcc\l0x00004007      int3\l0x00004008      add byte [rax], al\l"]
	"0x0000400a" [URL="dbg.main/0x0000400a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000400a      mov ecx, eax\l0x0000400c      shr ax, 3\l0x00004010      xor r15d, r15d\l0x00004013      shr cx, 0xe\l0x00004017      xor eax, 1\l0x0000401a      xor ecx, 1\l0x0000401d      and eax, 1\l0x00004020      and ecx, 1\l"]
	"0x00004023" [URL="dbg.main/0x00004023", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4076\l0x00004023      mov byte [r9 + rdx], al\l0x00004027      mov rax, qword [rdi]\l0x0000402a      mov byte [r11 + rdx], r15b\l0x0000402e      mov eax, dword [rax + rsi]\l0x00004031      mov byte [r10 + rdx], cl\l0x00004035      mov byte [r8 + rdx], al\l0x00004039      cmp rdx, 0x100\l0x00004040      je 0x40d4\l"]
	"0x00004046" [URL="dbg.main/0x00004046", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x40cf\l0x00004046      mov rcx, rdx\l"]
	"0x00004049" [URL="dbg.main/0x00004049", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3ff4\l; DATA XREF from sym.xstrtol_fatal @ 0x1393d\l0x00004049      mov r15, qword [r12]\l0x0000404d      lea rsi, [rcx*4]\l0x00004055      lea rdx, [rcx + 1]\l0x00004059      movzx eax, word [r15 + rcx*2]\l0x0000405e      test al, 1\l0x00004060      je 0x4000\l"]
	"0x00004062" [URL="dbg.main/0x00004062", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004062      shr ax, 0xe\l0x00004066      mov r15d, 1\l0x0000406c      xor eax, 1\l0x0000406f      mov ecx, eax\l0x00004071      xor eax, eax\l0x00004073      and ecx, 1\l0x00004076      jmp 0x4023\l"]
	"0x00004078" [URL="dbg.main/0x00004078", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3fa6, 0x3fb0\l0x00004078      mov dword [obj.thousands_sep], 0xffffffff              ; [0x1d884:4]=-1\l0x00004082      jmp 0x3fb6\l"]
	"0x00004087" [URL="dbg.main/0x00004087", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3f87, 0x3f91\l0x00004087      mov dword [obj.decimal_point], 0x2e                    ; '.'\l                                                                       ; [0x1d888:4]=46 ; \".\"\l0x00004091      jmp 0x3f97\l"]
	"0x000040a0" [URL="dbg.main/0x000040a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4004\l0x000040a0      movzx eax, word [r15 + 0x14]\l0x000040a5      mov byte [0x0001d76a], r14b                            ; [0x1d76a:1]=1\l0x000040ac      mov byte [0x0001d56a], r13b                            ; [0x1d56a:1]=0\l0x000040b3      shr ax, 0xe\l0x000040b7      xor eax, 1\l0x000040ba      and eax, 1\l0x000040bd      mov byte [0x0001d66a], al                              ; [0x1d66a:1]=1\l0x000040c3      mov rax, qword [rdi]\l0x000040c6      mov eax, dword [rax + 0x28]\l0x000040c9      mov byte [0x0001d46a], al                              ; [0x1d46a:1]=255\l0x000040cf      jmp 0x4046\l"]
	"0x000040d4" [URL="dbg.main/0x000040d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4040\l0x000040d4      cmp byte [var_8h], 0\l0x000040d9      je 0x41aa\l"]
	"0x000040df" [URL="dbg.main/0x000040df", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000040df      lea r9, obj.monthtab                                   ; 0x1d060\l0x000040e6      mov r15d, 1\l0x000040ec      mov dword [var_8h], ebx\l0x000040f0      lea r13, obj.fold_toupper                              ; 0x1d460\l0x000040f7      mov qword [var_18h], rbp\l0x000040fc      mov rbx, r9\l0x000040ff      mov rbp, r15\l0x00004102      nop word [rax + rax]\l"]
	"0x00004108" [URL="dbg.main/0x00004108", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4182\l0x00004108      lea edi, [rbp + 0x2000d]\l0x0000410e      call sym.imp.nl_langinfo                               ; char *nl_langinfo(nl_item item)\l0x00004113      mov rdi, rax                                           ; const char *s\l0x00004116      mov r14, rax\l0x00004119      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x0000411e      lea rdi, [rax + 1]                                     ; size_t size\l0x00004122      mov r15, rax\l0x00004125      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x0000412a      mov dword [rbx + 8], ebp\l0x0000412d      mov qword [rbx], rax\l0x00004130      mov rdi, rax\l0x00004133      test r15, r15\l0x00004136      je 0x4171\l"]
	"0x00004138" [URL="dbg.main/0x00004138", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004138      mov r10, qword [r12]\l0x0000413c      lea r8, [r14 + r15]\l0x00004140      mov rax, r14\l0x00004143      xor r15d, r15d\l0x00004146      nop word cs:[rax + rax]\l"]
	"0x00004150" [URL="dbg.main/0x00004150", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x416f\l0x00004150      movzx ecx, byte [rax]\l0x00004153      test byte [r10 + rcx*2], 1\l0x00004158      jne 0x4168\l"]
	"0x0000415a" [URL="dbg.main/0x0000415a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000415a      movzx edx, byte [r13 + rcx]\l0x00004160      mov byte [rdi + r15], dl\l0x00004164      add r15, 1\l"]
	"0x00004168" [URL="dbg.main/0x00004168", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4158\l0x00004168      add rax, 1\l0x0000416c      cmp r8, rax\l0x0000416f      jne 0x4150\l"]
	"0x00004171" [URL="dbg.main/0x00004171", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4136\l0x00004171      add rbp, 1\l0x00004175      mov byte [rdi + r15], 0\l0x0000417a      add rbx, 0x10\l0x0000417e      cmp rbp, 0xd\l0x00004182      jne 0x4108\l"]
	"0x00004184" [URL="dbg.main/0x00004184", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004184      lea rcx, [dbg.struct_month_cmp]                        ; 0x6da0 ; int(*compar)(const void *const void *)\l0x0000418b      mov edx, 0x10                                          ; size_t size\l0x00004190      mov esi, 0xc                                           ; size_t nmemb\l0x00004195      mov ebx, dword [var_8h]\l0x00004199      lea rdi, obj.monthtab                                  ; 0x1d060 ; void *base\l0x000041a0      mov rbp, qword [var_18h]\l0x000041a5      call sym.imp.qsort\l"]
	"0x000041aa" [URL="dbg.main/0x000041aa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x40d9\l0x000041aa      lea r14, obj.caught_signals                            ; 0x1d3a0\l0x000041b1      mov r15d, 0xe\l0x000041b7      lea r13, [0x00015324]\l0x000041be      mov rdi, r14\l0x000041c1      mov r12, r13\l0x000041c4      call sym.imp.sigemptyset\l0x000041c9      lea rax, [var_2d0h]\l0x000041d1      mov qword [var_8h], rbp\l0x000041d6      mov ebp, r15d\l0x000041d9      mov qword [var_38h], rax\l0x000041de      mov r15, rax\l0x000041e1      jmp 0x41f0\l"]
	"0x000041e8" [URL="dbg.main/0x000041e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x421b\l0x000041e8      mov ebp, dword [r12]\l; DATA XREF from dbg.collate_error @ 0x1373d\l0x000041ec      add r12, 4\l"]
	"0x000041f0" [URL="dbg.main/0x000041f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x41e1\l0x000041f0      xor esi, esi                                           ; const struct sigaction *act\l0x000041f2      mov rdx, r15                                           ; struct sigaction *oldact\l0x000041f5      mov edi, ebp                                           ; int signum\l0x000041f7      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x000041fc      cmp qword [var_2d0h], 1\l0x00004205      je 0x4211\l"]
	"0x00004207" [URL="dbg.main/0x00004207", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; DATA XREF from dbg.collate_error @ 0x136f2\l0x00004207      mov esi, ebp\l0x00004209      mov rdi, r14\l0x0000420c      call sym.imp.sigaddset\l"]
	"0x00004211" [URL="dbg.main/0x00004211", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4205\l0x00004211      lea rax, [0x0001534c]\l0x00004218      cmp rax, r12\l0x0000421b      jne 0x41e8\l"]
	"0x0000421d" [URL="dbg.main/0x0000421d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000421d      movdqa xmm3, xmmword [obj.caught_signals]\l0x00004225      movdqa xmm4, xmmword [0x0001d3b0]\l0x0000422d      lea rax, [dbg.sighandler]                              ; 0x7d00\l0x00004234      mov dword [var_358h], 0\l0x0000423f      movdqa xmm5, xmmword [0x0001d3c0]\l0x00004247      movdqa xmm6, xmmword [0x0001d3d0]\l0x0000424f      mov qword [var_2d0h], rax\l0x00004257      mov ebp, 0xe\l0x0000425c      movdqa xmm7, xmmword [0x0001d3e0]\l0x00004264      movdqa xmm2, xmmword [0x0001d3f0]\l0x0000426c      movups xmmword [var_2d8h], xmm3\l0x00004274      movdqa xmm1, xmmword [0x0001d400]\l0x0000427c      movdqa xmm3, xmmword [0x0001d410]\l0x00004284      movups xmmword [var_2e8h], xmm4\l0x0000428c      mov r15, qword [var_38h]\l0x00004291      movups xmmword [var_2f8h], xmm5\l0x00004299      movups xmmword [var_308h], xmm6\l0x000042a1      movups xmmword [var_318h], xmm7                        ; [0x318:16]=-1 ; \"/lib64/ld-linux-x86-64.so.2\"\l0x000042a9      movups xmmword [var_328h], xmm2\l0x000042b1      movups xmmword [var_338h], xmm1                        ; [0x338:16]=-1\l                                                                       ; segment.UNKNOWN\l0x000042b9      movups xmmword [var_348h], xmm3\l0x000042c1      jmp 0x42d5\l"]
	"0x000042c8" [URL="dbg.main/0x000042c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x42e1\l0x000042c8      cmp r12, r13\l0x000042cb      je 0x42f4\l"]
	"0x000042cd" [URL="dbg.main/0x000042cd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x42f2\l0x000042cd      mov ebp, dword [r13]\l0x000042d1      add r13, 4\l"]
	"0x000042d5" [URL="dbg.main/0x000042d5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x42c1\l0x000042d5      mov esi, ebp\l0x000042d7      mov rdi, r14\l0x000042da      call sym.imp.sigismember\l0x000042df      test eax, eax\l0x000042e1      je 0x42c8\l"]
	"0x000042e3" [URL="dbg.main/0x000042e3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000042e3      xor edx, edx                                           ; struct sigaction *oldact\l0x000042e5      mov rsi, r15                                           ; const struct sigaction *act\l0x000042e8      mov edi, ebp                                           ; int signum\l0x000042ea      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x000042ef      cmp r12, r13\l0x000042f2      jne 0x42cd\l"]
	"0x000042f4" [URL="dbg.main/0x000042f4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x42cb\l0x000042f4      xor esi, esi                                           ; void *func\l0x000042f6      mov edi, 0x11                                          ; int sig\l0x000042fb      mov rbp, qword [var_8h]\l0x00004300      xor r14d, r14d\l0x00004303      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00004308      lea rdi, [dbg.exit_cleanup]                            ; 0x8960 ; func function\l0x0000430f      xor r15d, r15d\l0x00004312      lea r12, obj.long_options                              ; 0x1c600\l0x00004319      call sym.atexit                                        ; int atexit(func function)\l0x0000431e      pxor xmm0, xmm0\l0x00004322      movsxd rdi, ebx                                        ; int64_t arg1\l0x00004325      mov esi, 8                                             ; int64_t arg2\l0x0000432a      movups xmmword [var_118h], xmm0\l0x00004332      mov qword [var_110h], 0xffffffffffffffff\l0x0000433e      mov qword [var_120h], 0xffffffffffffffff\l0x0000434a      movups xmmword [var_128h], xmm0\l0x00004352      movups xmmword [var_138h], xmm0\l0x0000435a      movups xmmword [var_148h], xmm0\l0x00004362      call dbg.xnmalloc\l0x00004367      mov byte [var_8eh], 0\l0x0000436f      mov qword [var_48h], 0\l0x00004378      mov r13, rax\l0x0000437b      mov qword [var_18h], 0\l0x00004384      mov qword [var_68h], 0\l0x0000438d      mov qword [stream], 0\l0x00004396      mov byte [var_8h], 0\l0x0000439b      jmp 0x43ff\l"]
	"0x000043a0" [URL="dbg.main/0x000043a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x440e\l0x000043a0      test r14, r14\l0x000043a3      je 0x4430\l"]
	"0x000043a9" [URL="dbg.main/0x000043a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043a9      cmp byte [rsp], 0\l0x000043ad      je 0x4430\l"]
	"0x000043b3" [URL="dbg.main/0x000043b3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043b3      cmp byte [var_10h], 1\l0x000043b8      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x000043bf      jne 0x43e0\l"]
	"0x000043c1" [URL="dbg.main/0x000043c1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043c1      cmp byte [var_8h], 0\l0x000043c6      jne 0x43e0\l"]
	"0x000043c8" [URL="dbg.main/0x000043c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043c8      cmp ebx, eax\l0x000043ca      je 0x45a8\l"]
	"0x000043d0" [URL="dbg.main/0x000043d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043d0      movsxd rdx, eax\l0x000043d3      mov rdx, qword [rbp + rdx*8]\l0x000043d8      cmp byte [rdx], 0x2d\l0x000043db      je 0x4420\l"]
	"0x000043dd" [URL="dbg.main/0x000043dd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043dd      nop dword [rax]\l"]
	"0x000043e0" [URL="dbg.main/0x000043e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x43bf, 0x43c6, 0x4417, 0x4424, 0x4ba4\l0x000043e0      cmp ebx, eax\l0x000043e2      jle 0x65c4\l"]
	"0x000043e8" [URL="dbg.main/0x000043e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000043e8      lea edx, [rax + 1]\l0x000043eb      mov rax, qword [rbp + rax*8]\l0x000043f0      mov dword [obj.optind], edx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x000043f6      mov qword [r13 + r14*8], rax\l0x000043fb      add r14, 1\l"]
	"0x000043ff" [URL="dbg.main/0x000043ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS(24)\l0x000043ff      mov dword [s1], 0xffffffff                             ; [0xffffffff:4]=22 ; -1\l0x0000440a      cmp r15d, 0xffffffff\l0x0000440e      jne 0x43a0\l"]
	"0x00004410" [URL="dbg.main/0x00004410", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4452\l0x00004410      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x00004417      jmp 0x43e0\l"]
	"0x00004420" [URL="dbg.main/0x00004420", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x43db\l0x00004420      cmp byte [rdx + 1], 0x6f\l0x00004424      jne 0x43e0\l"]
	"0x00004426" [URL="dbg.main/0x00004426", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004426      cmp byte [rdx + 2], 0\l0x0000442a      je 0x4b99\l"]
	"0x00004430" [URL="dbg.main/0x00004430", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x43a3, 0x43ad, 0x4b9e\l0x00004430      lea r8, [s1]\l0x00004438      mov rcx, r12\l0x0000443b      mov rsi, rbp\l0x0000443e      mov edi, ebx\l0x00004440      lea rdx, obj.short_options                             ; 0x15470 ; \"-bcCdfghik:mMno:rRsS:t:T:uVy:z\"\l0x00004447      call sym.imp.getopt_long\l0x0000444c      mov r15d, eax\l0x0000444f      cmp eax, 0xffffffff\l0x00004452      je 0x4410\l"]
	"0x00004454" [URL="dbg.main/0x00004454", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004454      cmp eax, 0x87\l0x00004459      jg case.0x4482.0\l"]
	"0x0000445f" [URL="dbg.main/0x0000445f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000445f      test eax, eax\l0x00004461      jle 0x4547\l"]
	"0x00004467" [URL="dbg.main/0x00004467", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004467      cmp eax, 0x87\l0x0000446c      ja case.0x4482.0\l"]
	"0x00004472" [URL="dbg.main/0x00004472", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004472      lea rdi, [0x000150cc]\l0x00004479      mov eax, eax\l0x0000447b      movsxd rax, dword [rdi + rax*4]\l0x0000447f      add rax, rdi\l;-- switch\l0x00004482      jmp rax                                                ; switch table (136 cases) at 0x150cc\l"]
	"0x00004485" [URL="dbg.main/0x00004485", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 134:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004485      lea r15, obj.sort_types                                ; 0x15460 ; \"ghMnRVCCc\"\l0x0000448c      mov r9, qword [obj.argmatch_die]                       ; [0x1d128:8]=0xbd80 dbg.__argmatch_die ; int64_t arg6\l0x00004493      mov rsi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg2\l0x0000449a      mov r8d, 1                                             ; int64_t arg5\l0x000044a0      mov rcx, r15                                           ; int64_t arg4\l0x000044a3      lea rdx, obj.sort_args                                 ; 0x1c5a0 ; int64_t arg3\l0x000044aa      lea rdi, str.__sort                                    ; 0x16bd5 ; \"--sort\" ; int64_t arg1\l0x000044b1      call dbg.__xargmatch_internal\l0x000044b6      movsx r15d, byte [r15 + rax]\l"]
	"0x000044bb" [URL="dbg.main/0x000044bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 77:                                                           ; from 0x00004482\l;-- case 86:                                                           ; from 0x00004482\l;-- case 100:                                                          ; from 0x00004482\l;-- case 103...105:                                                    ; from 0x00004482\l;-- case 110:                                                          ; from 0x00004482\l;-- case 114:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x000044bb      lea rsi, [var_110h]                                    ; int64_t arg2\l0x000044c3      lea rdi, [var_3c0h]                                    ; int64_t arg1\l0x000044cb      mov edx, 2                                             ; int64_t arg3\l0x000044d0      mov byte [var_3c0h], r15b\l0x000044d8      mov byte [var_3c1h], 0\l0x000044e0      call dbg.set_ordering\l0x000044e5      jmp 0x43ff\l"]
	"0x000044ea" [URL="dbg.main/0x000044ea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x000044ea      mov rsi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x000044f1      mov r15d, 0x63                                         ; 'c'\l0x000044f7      test rsi, rsi\l0x000044fa      je case.0x4482.67\l"]
	"0x000044fc" [URL="dbg.main/0x000044fc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000044fc      lea r15, obj.check_types                               ; 0x15466 ; \"CCc\"\l0x00004503      mov r9, qword [obj.argmatch_die]                       ; [0x1d128:8]=0xbd80 dbg.__argmatch_die ; int64_t arg6\l0x0000450a      mov r8d, 1                                             ; int64_t arg5\l0x00004510      lea rdx, obj.check_args                                ; 0x1c5e0 ; int64_t arg3\l0x00004517      mov rcx, r15                                           ; int64_t arg4\l0x0000451a      lea rdi, str.__check                                   ; 0x16bdc ; \"--check\" ; int64_t arg1\l0x00004521      call dbg.__xargmatch_internal\l0x00004526      movsx r15d, byte [r15 + rax]\l"]
	"0x0000452b" [URL="dbg.main/0x0000452b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 67:                                                           ; from 0x00004482\l; CODE XREFS from dbg.main @ 0x4482, 0x44fa\l0x0000452b      movsx eax, byte [var_8h]\l0x00004530      test al, al\l0x00004532      je 0x453d\l"]
	"0x00004534" [URL="dbg.main/0x00004534", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004534      cmp eax, r15d\l0x00004537      jne 0x67c4\l"]
	"0x0000453d" [URL="dbg.main/0x0000453d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4532\l0x0000453d      mov byte [var_8h], r15b\l0x00004542      jmp 0x43ff\l"]
	"0x00004547" [URL="dbg.main/0x00004547", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4461\l0x00004547      cmp eax, 0xffffff7d                                    ; 4294967165\l0x0000454c      jne 0x4590\l"]
	"0x0000454e" [URL="dbg.main/0x0000454e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000454e      push rsi\l0x0000454f      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x1d1c8:8]=0 ; func main\l0x00004556      xor eax, eax\l0x00004558      lea r9, str.Paul_Eggert                                ; 0x16ce1 ; \"Paul Eggert\" ; func rtld_fini\l0x0000455f      push 0\l0x00004561      mov rcx, qword [obj.Version]                           ; [0x1d120:8]=0x16f90 \"9.0\" ; int64_t arg5\l0x00004568      lea r8, str.Mike_Haertel                               ; 0x16ced ; \"Mike Haertel\" ; int64_t arg6\l0x0000456f      lea rdx, str.GNU_coreutils                             ; 0x16b26 ; \"GNU coreutils\" ; int64_t arg3\l0x00004576      lea rsi, [0x00016bd7]                                  ; \"sort\" ; int64_t arg2\l0x0000457d      call dbg.version_etc\l0x00004582      xor edi, edi                                           ; int status\l0x00004584      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00004590" [URL="dbg.main/0x00004590", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x454c\l0x00004590      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00004595      jne case.0x4482.0\l"]
	"0x0000459b" [URL="dbg.main/0x0000459b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000459b      xor edi, edi                                           ; int64_t arg1\l0x0000459d      call dbg.usage\l"]
	"0x000045a8" [URL="dbg.main/0x000045a8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x43ca\l0x000045a8      cmp qword [var_18h], 0\l0x000045ae      jne 0x60c3\l"]
	"0x000045b4" [URL="dbg.main/0x000045b4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000045b4      mov byte [var_8h], 0\l"]
	"0x000045b9" [URL="dbg.main/0x000045b9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x65ca, 0x665c\l0x000045b9      mov r8, qword [obj.keylist]                            ; [0x1d430:8]=0\l0x000045c0      test r8, r8\l0x000045c3      je 0x5aa4\l"]
	"0x000045c9" [URL="dbg.main/0x000045c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000045c9      mov rcx, r8\l0x000045cc      xor ebx, ebx\l0x000045ce      jmp 0x4668\l"]
	"0x000045d8" [URL="dbg.main/0x000045d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4672\l0x000045d8      cmp byte [rcx + 0x37], 0\l0x000045dc      jne 0x4678\l"]
	"0x000045e2" [URL="dbg.main/0x000045e2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000045e2      mov rax, qword [var_130h]\l0x000045ea      movzx edx, byte [var_147h]\l0x000045f2      mov qword [rcx + 0x20], rax\l0x000045f6      mov rax, qword [var_138h]\l0x000045fe      mov qword [rcx + 0x28], rax\l0x00004602      movzx eax, byte [var_140h]\l0x0000460a      mov byte [rcx + 0x30], al\l0x0000460d      movzx eax, byte [var_141h]\l0x00004615      mov byte [rcx + 0x31], al\l0x00004618      movzx eax, byte [var_146h]\l0x00004620      mov byte [rcx + 0x36], al\l0x00004623      movzx eax, byte [var_142h]\l0x0000462b      mov byte [rcx + 0x32], al\l0x0000462e      movzx eax, byte [var_144h]\l0x00004636      mov byte [rcx + 0x34], al\l0x00004639      movzx eax, byte [var_145h]\l0x00004641      mov byte [rcx + 0x35], al\l0x00004644      movzx eax, byte [var_148h]\l0x0000464c      mov byte [rcx + 0x37], dl\l0x0000464f      mov byte [rcx + 0x38], al\l0x00004652      movzx eax, byte [var_143h]\l0x0000465a      mov byte [rcx + 0x33], al\l0x0000465d      mov rcx, qword [rcx + 0x40]\l0x00004661      or ebx, eax\l0x00004663      test rcx, rcx\l0x00004666      je 0x4687\l"]
	"0x00004668" [URL="dbg.main/0x00004668", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x45ce, 0x4685\l0x00004668      mov rdi, rcx                                           ; int64_t arg1\l0x0000466b      call dbg.default_key_compare\l0x00004670      test al, al\l0x00004672      jne 0x45d8\l"]
	"0x00004678" [URL="dbg.main/0x00004678", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x45dc\l0x00004678      movzx eax, byte [rcx + 0x33]\l0x0000467c      mov rcx, qword [rcx + 0x40]\l0x00004680      or ebx, eax\l0x00004682      test rcx, rcx\l0x00004685      jne 0x4668\l"]
	"0x00004687" [URL="dbg.main/0x00004687", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4666\l0x00004687      mov byte [var_30h], 0\l0x0000468c      nop dword [rax]\l"]
	"0x00004690" [URL="dbg.main/0x00004690", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x46d2, 0x5ba5\l0x00004690      movzx edx, byte [r8 + 0x34]\l0x00004695      movzx eax, byte [r8 + 0x32]\l0x0000469a      add eax, edx\l0x0000469c      movzx edx, byte [r8 + 0x35]\l0x000046a1      add eax, edx\l0x000046a3      movzx edx, byte [r8 + 0x36]\l0x000046a8      add eax, edx\l0x000046aa      movzx edx, byte [r8 + 0x38]\l0x000046af      or dl, byte [r8 + 0x33]\l0x000046b3      cmp qword [r8 + 0x20], 0\l0x000046b8      setne cl\l0x000046bb      or edx, ecx\l0x000046bd      movzx edx, dl\l0x000046c0      add eax, edx\l0x000046c2      cmp eax, 1\l0x000046c5      jg 0x6806\l"]
	"0x000046cb" [URL="dbg.main/0x000046cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000046cb      mov r8, qword [r8 + 0x40]\l0x000046cf      test r8, r8\l0x000046d2      jne 0x4690\l"]
	"0x000046d4" [URL="dbg.main/0x000046d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5bab\l0x000046d4      cmp byte [obj.debug], 0                                ; [0x1d420:1]=1\l0x000046db      je 0x511b\l"]
	"0x000046e1" [URL="dbg.main/0x000046e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5acd\l0x000046e1      cmp byte [var_8h], 0\l0x000046e6      jne 0x67dc\l"]
	"0x000046ec" [URL="dbg.main/0x000046ec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000046ec      cmp qword [var_48h], 0\l0x000046f2      jne 0x67d0\l"]
	"0x000046f8" [URL="dbg.main/0x000046f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000046f8      cmp qword [var_20h], 0\l0x000046fe      je 0x53b4\l"]
	"0x00004704" [URL="dbg.main/0x00004704", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004704      lea rsi, [0x00016a99]                                  ; const char *locale\l0x0000470b      mov edi, 3                                             ; int category\l0x00004710      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00004715      test rax, rax\l0x00004718      je 0x53b4\l"]
	"0x0000471e" [URL="dbg.main/0x0000471e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x53dc\l0x0000471e      cmp byte [obj.hard_LC_COLLATE], 0                      ; [0x1d881:1]=80 ; \"P\"\l0x00004725      je 0x5b5c\l"]
	"0x0000472b" [URL="dbg.main/0x0000472b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000472b      xor esi, esi                                           ; const char *locale\l0x0000472d      mov edi, 3                                             ; int category\l0x00004732      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00004737      mov rdi, rax                                           ; int64_t arg1\l0x0000473a      call dbg.quote\l0x0000473f      mov edx, 5\l0x00004744      lea rsi, str.text_ordering_performed_using__s_sorting_rules ; 0x167e8 ; \"text ordering performed using %s sorting rules\"\l0x0000474b      xor edi, edi\l0x0000474d      mov r12, rax\l0x00004750      call sym.imp.dcgettext\l0x00004755      mov rcx, r12\l0x00004758      xor esi, esi                                           ; int errname\l0x0000475a      xor edi, edi                                           ; int status\l0x0000475c      mov rdx, rax                                           ; char *format\l0x0000475f      xor eax, eax\l0x00004761      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004766" [URL="dbg.main/0x00004766", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5b84\l0x00004766      mov rbp, qword [obj.keylist]                           ; [0x1d430:8]=0\l0x0000476d      lea rdi, [var_160h]\l0x00004775      mov ecx, 0x12\l0x0000477a      lea rsi, [var_110h]\l0x00004782      mov qword [var_60h], rdi\l0x00004787      rep movsd dword [rdi], dword ptr [rsi]\l0x00004789      test rbp, rbp\l0x0000478c      je 0x5078\l"]
	"0x00004792" [URL="dbg.main/0x00004792", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004792      movzx edi, byte [var_196h]\l0x0000479a      movzx eax, byte [var_191h]\l0x000047a2      mov byte [var_8fh], bl\l0x000047a9      mov rbx, rbp\l0x000047ac      mov qword [var_90h], r14\l0x000047b4      movzx r15d, byte [var_190h]\l0x000047bd      movzx r12d, byte [var_198h]\l0x000047c6      mov byte [rsp], dil\l0x000047ca      mov r14d, eax\l0x000047cd      movzx edi, byte [var_192h]\l0x000047d5      mov qword [var_98h], r13\l0x000047dd      mov qword [var_40h], 1\l0x000047e6      mov byte [var_10h], dil\l0x000047eb      movzx edi, byte [var_194h]\l0x000047f3      mov byte [var_18h], dil\l0x000047f8      movzx edi, byte [var_195h]\l0x00004800      mov byte [var_20h], dil\l0x00004805      movzx edi, byte [var_193h]\l0x0000480d      mov byte [var_28h], dil\l0x00004812      movzx edi, byte [var_197h]\l0x0000481a      mov r13d, edi\l0x0000481d      jmp 0x495f\l"]
	"0x00004828" [URL="dbg.main/0x00004828", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4b1d\l0x00004828      cmp qword [rbx + 0x18], 0\l0x0000482d      je 0x4b23\l"]
	"0x00004833" [URL="dbg.main/0x00004833", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004833      test cl, cl\l0x00004835      jne 0x55c0\l"]
	"0x0000483b" [URL="dbg.main/0x0000483b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4b35, 0x4b50, 0x4b5b, 0x4b94, 0x55cb\l0x0000483b      test rdx, rdx\l0x0000483e      je 0x4860\l"]
	"0x00004840" [URL="dbg.main/0x00004840", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004840      mov rax, qword [rbx]\l0x00004843      mov edx, 1\l0x00004848      add rax, 1\l0x0000484c      cmove rax, rdx\l0x00004850      cmp qword [rbx + 0x10], rax\l0x00004854      jae 0x5a79\l"]
	"0x0000485a" [URL="dbg.main/0x0000485a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000485a      nop word [rax + rax]\l"]
	"0x00004860" [URL="dbg.main/0x00004860", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x483e, 0x55c5, 0x5a9f\l0x00004860      mov rax, qword [var_180h]\l0x00004868      test rax, rax\l0x0000486b      je 0x4877\l"]
	"0x0000486d" [URL="dbg.main/0x0000486d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000486d      cmp rax, qword [rbx + 0x20]\l0x00004871      je 0x55d0\l"]
	"0x00004877" [URL="dbg.main/0x00004877", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x486b, 0x55dc\l0x00004877      mov rax, qword [var_188h]\l0x0000487f      test rax, rax\l0x00004882      je 0x488e\l"]
	"0x00004884" [URL="dbg.main/0x00004884", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004884      cmp rax, qword [rbx + 0x28]\l0x00004888      je 0x55e1\l"]
	"0x0000488e" [URL="dbg.main/0x0000488e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4882, 0x55ed\l0x0000488e      movzx eax, byte [rbx + 0x30]\l0x00004892      xor eax, 1\l0x00004895      and r15d, eax\l0x00004898      movzx eax, byte [rbx + 0x31]\l0x0000489c      mov byte [var_190h], r15b\l0x000048a4      xor eax, 1\l0x000048a7      and r14d, eax\l0x000048aa      movzx eax, byte [rbx + 0x36]\l0x000048ae      mov byte [var_191h], r14b\l0x000048b6      xor eax, 1\l0x000048b9      and byte [rsp], al\l0x000048bc      movzx eax, byte [rbx + 0x32]\l0x000048c0      movzx esi, byte [rsp]\l0x000048c4      xor eax, 1\l0x000048c7      and byte [var_10h], al\l0x000048cb      movzx eax, byte [rbx + 0x34]\l; DATA XREF from dbg.version_etc_arn @ 0x12cd2\l0x000048cf      movzx edi, byte [var_10h]\l0x000048d4      mov byte [var_196h], sil\l0x000048dc      xor eax, 1\l0x000048df      and byte [var_18h], al\l0x000048e3      movzx eax, byte [rbx + 0x35]\l0x000048e7      movzx esi, byte [var_18h]\l0x000048ec      mov byte [var_192h], dil\l0x000048f4      xor eax, 1\l0x000048f7      and byte [var_20h], al\l0x000048fb      movzx eax, byte [rbx + 0x33]\l0x000048ff      mov byte [var_194h], sil\l0x00004907      movzx edi, byte [var_20h]\l0x0000490c      xor eax, 1\l0x0000490f      and byte [var_28h], al\l0x00004913      movzx eax, byte [rbx + 0x38]\l0x00004917      movzx esi, byte [var_28h]\l0x0000491c      mov byte [var_195h], dil\l0x00004924      xor eax, 1\l0x00004927      and r12d, eax\l0x0000492a      movzx eax, byte [rbx + 0x37]\l0x0000492e      mov byte [var_193h], sil\l; DATA XREF from dbg.version_etc_arn @ 0x12e2b\l0x00004936      mov byte [var_198h], r12b\l0x0000493e      xor eax, 1\l0x00004941      and r13d, eax\l0x00004944      mov byte [var_197h], r13b\l0x0000494c      mov rbx, qword [rbx + 0x40]\l0x00004950      add qword [var_40h], 1\l0x00004956      test rbx, rbx\l0x00004959      je 0x5060\l"]
	"0x0000495f" [URL="dbg.main/0x0000495f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x481d\l0x0000495f      cmp byte [rbx + 0x39], 0\l0x00004963      je 0x4abb\l"]
	"0x00004969" [URL="dbg.main/0x00004969", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004969      mov rbp, qword [rbx]\l0x0000496c      xor eax, eax\l0x0000496e      lea r8, [var_370h]\l0x00004976      mov rsi, r8                                            ; int64_t arg2\l0x00004979      mov qword [var_50h], r8\l0x0000497e      cmp rbp, 0xffffffffffffffff\l0x00004982      cmove rbp, rax\l0x00004986      mov rax, qword [rbx + 0x10]\l; DATA XREF from dbg.version_etc_arn @ 0x12daf\l0x0000498a      mov rdi, rbp                                           ; int64_t arg1\l0x0000498d      mov qword [var_78h], rax\l0x00004992      call dbg.umaxtostr\l0x00004997      mov edx, 0x2d                                          ; '-'\l0x0000499c      lea rdi, [var_391h]\l0x000049a4      mov byte [var_390h], 0x2b                              ; '+'\l                                                                       ; [0x2b:1]=0\l0x000049ac      mov rsi, rax\l0x000049af      call sym.imp.__stpcpy_chk\l0x000049b4      mov r8, qword [var_50h]\l0x000049b9      lea rdi, [rbp + 1]                                     ; int64_t arg1\l0x000049bd      lea rbp, [var_3c0h]\l0x000049c5      mov qword [var_70h], rax\l0x000049ca      mov rsi, r8                                            ; int64_t arg2\l0x000049cd      mov qword [var_80h], r8\l0x000049d5      call dbg.umaxtostr\l0x000049da      lea rdi, [var_3c3h]\l0x000049e2      mov edx, 0x2c                                          ; ','\l0x000049e7      mov dword [var_3c0h], 0x206b2d                         ; '-k '\l                                                                       ; [0x206b2d:4]=-1\l0x000049f2      mov rsi, rax\l0x000049f5      call sym.imp.__stpcpy_chk\l0x000049fa      cmp qword [rbx + 0x10], 0xffffffffffffffff\l0x000049ff      mov qword [var_50h], rax\l0x00004a04      je 0x4a6e\l"]
	"0x00004a06" [URL="dbg.main/0x00004a06", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004a06      mov rcx, qword [var_78h]\l0x00004a0b      mov rsi, qword [var_80h]                               ; int64_t arg2\l0x00004a13      add rcx, 1\l0x00004a17      mov rdi, rcx                                           ; int64_t arg1\l0x00004a1a      mov qword [var_78h], rcx\l0x00004a1f      call dbg.umaxtostr\l0x00004a24      mov rsi, rax                                           ; const char *src\l0x00004a27      mov rax, qword [var_70h]\l0x00004a2c      mov word [rax], 0x2d20                                 ; ' -'\l                                                                       ; [0x2d20:2]=0xffff\l0x00004a31      lea rdi, [rax + 2]                                     ; char *dest\l0x00004a35      call sym.imp.strcpy                                    ; char *strcpy(char *dest, const char *src)\l0x00004a3a      mov rcx, qword [var_78h]\l0x00004a3f      xor edi, edi\l0x00004a41      cmp qword [rbx + 0x18], 0xffffffffffffffff\l0x00004a46      mov rsi, qword [var_80h]                               ; int64_t arg2\l0x00004a4e      sete dil\l0x00004a52      add rdi, rcx                                           ; int64_t arg1\l0x00004a55      call dbg.umaxtostr\l0x00004a5a      mov rdx, qword [var_50h]\l0x00004a5f      mov rsi, rax                                           ; const char *src\l0x00004a62      mov byte [rdx], 0x2c                                   ; ','\l                                                                       ; [0x2c:1]=0\l0x00004a65      lea rdi, [rdx + 1]                                     ; char *dest\l0x00004a69      call sym.imp.strcpy                                    ; char *strcpy(char *dest, const char *src)\l"]
	"0x00004a6e" [URL="dbg.main/0x00004a6e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4a04\l0x00004a6e      mov rsi, rbp                                           ; int64_t arg2\l0x00004a71      mov edi, 1                                             ; int64_t arg1\l0x00004a76      call sym.quote_n\l0x00004a7b      lea rsi, [var_390h]                                    ; int64_t arg2\l0x00004a83      xor edi, edi                                           ; int64_t arg1\l0x00004a85      mov rbp, rax\l0x00004a88      call sym.quote_n\l0x00004a8d      mov edx, 5\l0x00004a92      lea rsi, str.obsolescent_key__s_used__consider__s_instead ; 0x16850 ; \"obsolescent key %s used; consider %s instead\"\l0x00004a99      xor edi, edi\l0x00004a9b      mov qword [var_50h], rax\l0x00004aa0      call sym.imp.dcgettext\l0x00004aa5      mov rcx, qword [var_50h]\l0x00004aaa      mov r8, rbp\l0x00004aad      xor esi, esi                                           ; int errname\l0x00004aaf      mov rdx, rax                                           ; char *format\l0x00004ab2      xor edi, edi                                           ; int status\l0x00004ab4      xor eax, eax\l0x00004ab6      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004abb" [URL="dbg.main/0x00004abb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4963\l0x00004abb      mov rdx, qword [rbx]\l0x00004abe      mov rax, qword [rbx + 0x10]\l0x00004ac2      movzx ecx, byte [var_30h]\l0x00004ac7      cmp rdx, 0xffffffffffffffff\l0x00004acb      je 0x4b01\l"]
	"0x00004acd" [URL="dbg.main/0x00004acd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004acd      cmp rdx, rax\l0x00004ad0      jbe 0x4b01\l"]
	"0x00004ad2" [URL="dbg.main/0x00004ad2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004ad2      mov edx, 5\l0x00004ad7      lea rsi, str.key__lu_has_zero_width_and_will_be_ignored ; 0x16958 ; \"key %lu has zero width and will be ignored\"\l0x00004ade      xor edi, edi\l0x00004ae0      call sym.imp.dcgettext\l0x00004ae5      mov rcx, qword [var_40h]\l0x00004aea      xor esi, esi                                           ; int errname\l0x00004aec      xor edi, edi                                           ; int status\l0x00004aee      mov rdx, rax                                           ; char *format\l0x00004af1      xor eax, eax\l0x00004af3      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00004af8      mov rax, qword [rbx + 0x10]\l0x00004afc      mov ecx, 1\l"]
	"0x00004b01" [URL="dbg.main/0x00004b01", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4acb, 0x4ad0\l0x00004b01      movabs rdx, 0xffff00ff0000\l0x00004b0b      mov esi, 1\l0x00004b10      and rdx, qword [rbx + 0x30]\l0x00004b14      jne 0x4b1a\l"]
	"0x00004b16" [URL="dbg.main/0x00004b16", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b16      movzx esi, byte [rbx + 0x36]\l"]
	"0x00004b1a" [URL="dbg.main/0x00004b1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4b14\l0x00004b1a      test rax, rax\l0x00004b1d      je 0x4828\l"]
	"0x00004b23" [URL="dbg.main/0x00004b23", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x482d\l0x00004b23      test cl, cl\l0x00004b25      jne 0x55c0\l"]
	"0x00004b2b" [URL="dbg.main/0x00004b2b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b2b      cmp dword [obj.tab], 0x80                              ; [0x1d028:4]=0\l0x00004b35      jne 0x483b\l"]
	"0x00004b3b" [URL="dbg.main/0x00004b3b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b3b      cmp byte [rbx + 0x30], 0\l0x00004b3f      jne 0x4b4c\l"]
	"0x00004b41" [URL="dbg.main/0x00004b41", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b41      test esi, esi\l; DATA XREF from dbg.version_etc_arn @ 0x12ad6\l0x00004b43      je 0x4b61\l"]
	"0x00004b45" [URL="dbg.main/0x00004b45", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b45      cmp qword [rbx + 8], 0\l0x00004b4a      jne 0x4b61\l"]
	"0x00004b4c" [URL="dbg.main/0x00004b4c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4b3f\l0x00004b4c      cmp byte [rbx + 0x31], 0\l0x00004b50      jne 0x483b\l"]
	"0x00004b56" [URL="dbg.main/0x00004b56", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004b56      cmp qword [rbx + 0x18], 0\l0x00004b5b      je 0x483b\l"]
	"0x00004b61" [URL="dbg.main/0x00004b61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4b43, 0x4b4a\l0x00004b61      mov edx, 5\l0x00004b66      lea rsi, str.leading_blanks_are_significant_in_key__lu__consider_also_specifying_b ; 0x16880 ; \"leading blanks are significant in key %lu; consider also specifying 'b'\"\l0x00004b6d      xor edi, edi\l0x00004b6f      call sym.imp.dcgettext\l0x00004b74      mov rcx, qword [var_40h]\l0x00004b79      xor esi, esi                                           ; int errname\l0x00004b7b      xor edi, edi                                           ; int status\l0x00004b7d      mov rdx, rax                                           ; char *format\l0x00004b80      xor eax, eax\l0x00004b82      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00004b87      mov edx, 0xffff00ff\l0x00004b8c      shl rdx, 0x10\l0x00004b90      and rdx, qword [rbx + 0x30]\l0x00004b94      jmp 0x483b\l"]
	"0x00004b99" [URL="dbg.main/0x00004b99", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x442a\l0x00004b99      lea edx, [rax + 1]\l0x00004b9c      cmp edx, ebx\l0x00004b9e      jne 0x4430\l"]
	"0x00004ba4" [URL="dbg.main/0x00004ba4", fillcolor="white",color="#767676", fontname="Courier",label="0x00004ba4      jmp 0x43e0\l"]
	"0x00004ba9" [URL="dbg.main/0x00004ba9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 135:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004ba9      mov r9, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004bb0      mov eax, dword [s1]\l0x00004bb7      xor esi, esi                                           ; int64_t arg2\l0x00004bb9      lea rcx, [var_1b0h]                                    ; int64_t arg4\l0x00004bc1      lea r8, [0x00016a99]                                   ; int64_t arg5\l0x00004bc8      mov edx, 0xa                                           ; uint32_t arg3\l0x00004bcd      mov rdi, r9                                            ; int64_t arg1\l0x00004bd0      mov dword [var_40h], eax\l; DATA XREF from dbg.version_etc_arn @ 0x12bed\l0x00004bd4      mov qword [var_30h], r9\l0x00004bd9      call dbg.xstrtoumax\l0x00004bde      mov edi, eax\l0x00004be0      cmp eax, 1\l0x00004be3      je 0x62e4\l"]
	"0x00004be9" [URL="dbg.main/0x00004be9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004be9      test eax, eax\l0x00004beb      mov r9, qword [var_30h]\l0x00004bf0      jne 0x68c6\l"]
	"0x00004bf6" [URL="dbg.main/0x00004bf6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004bf6      mov rax, qword [var_1b0h]\l0x00004bfe      mov qword [var_68h], rax\l0x00004c03      test rax, rax\l0x00004c06      jne 0x43ff\l"]
	"0x00004c0c" [URL="dbg.main/0x00004c0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004c0c      mov edx, 5\l0x00004c11      lea rsi, str.number_in_parallel_must_be_nonzero        ; 0x16700 ; \"number in parallel must be nonzero\"\l0x00004c18      xor edi, edi\l0x00004c1a      call sym.imp.dcgettext\l0x00004c1f      xor esi, esi                                           ; int errname\l0x00004c21      mov edi, 2                                             ; int status\l0x00004c26      mov rdx, rax                                           ; char *format\l0x00004c29      xor eax, eax\l0x00004c2b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004c30" [URL="dbg.main/0x00004c30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 133:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004c30      mov rdi, qword [stream]\l0x00004c35      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004c3c      test rdi, rdi\l0x00004c3f      je 0x4c5b\l"]
	"0x00004c41" [URL="dbg.main/0x00004c41", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004c41      mov rsi, rdx                                           ; const char *s2\l0x00004c44      mov qword [var_30h], rdx\l0x00004c49      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00004c4e      mov rdx, qword [var_30h]\l0x00004c53      test eax, eax\l0x00004c55      jne 0x6542\l"]
	"0x00004c5b" [URL="dbg.main/0x00004c5b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4c3f\l0x00004c5b      mov qword [stream], rdx\l0x00004c60      jmp 0x43ff\l"]
	"0x00004c65" [URL="dbg.main/0x00004c65", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 132:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004c65      mov r9, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004c6c      xor esi, esi                                           ; int64_t arg2\l0x00004c6e      mov eax, dword [s1]\l0x00004c75      lea rcx, [var_160h]                                    ; int64_t arg4\l0x00004c7d      lea r8, [0x00016a99]                                   ; int64_t arg5\l0x00004c84      mov edx, 0xa                                           ; uint32_t arg3\l0x00004c89      mov rdi, r9                                            ; int64_t arg1\l0x00004c8c      mov qword [var_50h], r9\l0x00004c91      mov dword [var_30h], eax\l0x00004c95      call dbg.xstrtoumax\l0x00004c9a      lea rsi, [var_1b0h]\l0x00004ca2      mov edi, 7\l0x00004ca7      mov dword [var_40h], eax\l0x00004cab      call sym.imp.getrlimit\l0x00004cb0      mov r10d, dword [var_40h]\l0x00004cb5      mov r9, qword [var_50h]\l0x00004cba      mov r11d, 0x11\l0x00004cc0      test eax, eax\l0x00004cc2      jne 0x4ccf\l"]
	"0x00004cc4" [URL="dbg.main/0x00004cc4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004cc4      mov eax, dword [var_1b0h]\l0x00004ccb      lea r11d, [rax - 3]\l"]
	"0x00004ccf" [URL="dbg.main/0x00004ccf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4cc2\l0x00004ccf      test r10d, r10d\l0x00004cd2      jne 0x5418\l"]
	"0x00004cd8" [URL="dbg.main/0x00004cd8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004cd8      mov rdx, qword [var_160h]\l0x00004ce0      mov eax, edx\l0x00004ce2      mov dword [obj.nmerge], edx                            ; [0x1d024:4]=0\l0x00004ce8      cmp rax, rdx\l0x00004ceb      jne 0x4cff\l"]
	"0x00004ced" [URL="dbg.main/0x00004ced", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004ced      cmp eax, 1\l0x00004cf0      jbe 0x644c\l"]
	"0x00004cf6" [URL="dbg.main/0x00004cf6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004cf6      cmp eax, r11d\l0x00004cf9      jbe 0x43ff\l"]
	"0x00004cff" [URL="dbg.main/0x00004cff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4ceb, 0x541c\l0x00004cff      mov rdi, r9                                            ; int64_t arg1\l0x00004d02      mov dword [rsp], r11d\l0x00004d06      call dbg.quote\l0x00004d0b      mov edx, 5\l0x00004d10      lea rsi, str.___s_argument__s_too_large                ; 0x16c4c ; \"--%s argument %s too large\"\l0x00004d17      xor edi, edi\l0x00004d19      mov rbx, rax\l0x00004d1c      movsxd rax, dword [var_30h]\l0x00004d21      shl rax, 5\l0x00004d25      mov r12, qword [r12 + rax]\l0x00004d29      call sym.imp.dcgettext\l0x00004d2e      mov r8, rbx\l0x00004d31      xor esi, esi                                           ; int errname\l0x00004d33      xor edi, edi                                           ; int status\l0x00004d35      mov rdx, rax                                           ; char *format\l0x00004d38      mov rcx, r12\l0x00004d3b      xor eax, eax\l0x00004d3d      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00004d42      mov edi, dword [rsp]                                   ; int64_t arg1\l0x00004d45      lea rsi, [var_3c0h]                                    ; int64_t arg2\l0x00004d4d      call dbg.uinttostr\l0x00004d52      mov edx, 5\l0x00004d57      lea rsi, str.maximum____s_argument_with_current_rlimit_is__s ; 0x16688 ; \"maximum --%s argument with current rlimit is %s\"\l0x00004d5e      xor edi, edi\l0x00004d60      mov rbx, rax\l0x00004d63      call sym.imp.dcgettext\l0x00004d68      mov r8, rbx\l0x00004d6b      mov rcx, r12\l0x00004d6e      xor esi, esi                                           ; int errname\l0x00004d70      mov rdx, rax                                           ; char *format\l0x00004d73      mov edi, 2                                             ; int status\l0x00004d78      xor eax, eax\l0x00004d7a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004d7f" [URL="dbg.main/0x00004d7f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 131:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004d7f      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004d86      mov qword [var_18h], rax\l0x00004d8b      jmp 0x43ff\l"]
	"0x00004d90" [URL="dbg.main/0x00004d90", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 130:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004d90      mov byte [obj.debug], 1                                ; [0x1d420:1]=1\l0x00004d97      jmp 0x43ff\l"]
	"0x00004d9c" [URL="dbg.main/0x00004d9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 129:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004d9c      mov rdi, qword [obj.compress_program]                  ; [0x1d428:8]=0\l0x00004da3      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004daa      test rdi, rdi\l0x00004dad      je 0x4dc9\l"]
	"0x00004daf" [URL="dbg.main/0x00004daf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004daf      mov rsi, rdx                                           ; const char *s2\l0x00004db2      mov qword [var_30h], rdx\l0x00004db7      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00004dbc      mov rdx, qword [var_30h]\l0x00004dc1      test eax, eax\l0x00004dc3      jne 0x6566\l"]
	"0x00004dc9" [URL="dbg.main/0x00004dc9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4dad\l0x00004dc9      mov qword [obj.compress_program], rdx                  ; [0x1d428:8]=0\l0x00004dd0      jmp 0x43ff\l"]
	"0x00004dd5" [URL="dbg.main/0x00004dd5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 122:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004dd5      mov byte [obj.eolchar], 0                              ; [0x1d038:1]=0\l0x00004ddc      jmp 0x43ff\l"]
	"0x00004de1" [URL="dbg.main/0x00004de1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 121:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004de1      movsxd rcx, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x00004de8      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004def      mov rax, rcx\l0x00004df2      cmp qword [rbp + rcx*8 - 8], rdx\l0x00004df7      jne 0x43ff\l"]
	"0x00004dfd" [URL="dbg.main/0x00004dfd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x61ef\l0x00004dfd      movsx ecx, byte [rdx]\l0x00004e00      mov esi, ecx\l0x00004e02      sub ecx, 0x30\l0x00004e05      cmp ecx, 9\l0x00004e08      jbe 0x61eb\l"]
	"0x00004e0e" [URL="dbg.main/0x00004e0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004e0e      cmp sil, 1\l0x00004e12      adc eax, 0xffffffff\l0x00004e15      mov dword [obj.optind], eax                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x00004e1b      jmp 0x43ff\l"]
	"0x00004e20" [URL="dbg.main/0x00004e20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 117:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004e20      mov byte [obj.unique], 1                               ; [0x1d439:1]=1\l0x00004e27      jmp 0x43ff\l"]
	"0x00004e2c" [URL="dbg.main/0x00004e2c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 116:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004e2c      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004e33      movsx eax, byte [rdi]\l0x00004e36      test al, al\l0x00004e38      je 0x68a2\l"]
	"0x00004e3e" [URL="dbg.main/0x00004e3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004e3e      cmp byte [rdi + 1], 0\l0x00004e42      je 0x4e64\l"]
	"0x00004e44" [URL="dbg.main/0x00004e44", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004e44      lea rsi, [0x00016cb5]                                  ; \"\\0\" ; const char *s2\l0x00004e4b      mov qword [var_30h], rdi\l0x00004e50      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00004e55      mov rdi, qword [var_30h]\l0x00004e5a      test eax, eax\l0x00004e5c      jne 0x678c\l"]
	"0x00004e62" [URL="dbg.main/0x00004e62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004e62      xor eax, eax\l"]
	"0x00004e64" [URL="dbg.main/0x00004e64", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e42\l0x00004e64      mov edx, dword [obj.tab]                               ; [0x1d028:4]=0\l0x00004e6a      cmp edx, 0x80\l0x00004e70      je 0x4e7a\l"]
	"0x00004e72" [URL="dbg.main/0x00004e72", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004e72      cmp edx, eax\l0x00004e74      jne 0x651e\l"]
	"0x00004e7a" [URL="dbg.main/0x00004e7a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e70\l0x00004e7a      mov dword [obj.tab], eax                               ; [0x1d028:4]=0\l0x00004e80      jmp 0x43ff\l"]
	"0x00004e85" [URL="dbg.main/0x00004e85", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 115:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004e85      mov byte [obj.stable], 1                               ; [0x1d43a:1]=1\l0x00004e8c      jmp 0x43ff\l"]
	"0x00004e91" [URL="dbg.main/0x00004e91", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 111:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004e91      mov rdi, qword [var_48h]\l0x00004e96      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004e9d      test rdi, rdi\l0x00004ea0      je 0x4ebc\l"]
	"0x00004ea2" [URL="dbg.main/0x00004ea2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004ea2      mov rsi, rdx                                           ; const char *s2\l0x00004ea5      mov qword [var_30h], rdx\l0x00004eaa      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00004eaf      mov rdx, qword [var_30h]\l0x00004eb4      test eax, eax\l0x00004eb6      jne 0x658a\l"]
	"0x00004ebc" [URL="dbg.main/0x00004ebc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4ea0\l0x00004ebc      mov qword [var_48h], rdx\l0x00004ec1      jmp 0x43ff\l"]
	"0x00004ec6" [URL="dbg.main/0x00004ec6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 107:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004ec6      lea rdi, [var_c0h]\l0x00004ece      xor eax, eax\l0x00004ed0      mov ecx, 0x12\l0x00004ed5      mov qword [var_30h], rdi\l0x00004eda      mov rsi, rdi                                           ; int64_t arg2\l0x00004edd      lea rdx, str.invalid_number_at_field_start             ; 0x16be7 ; \"invalid number at field start\" ; int64_t arg3\l0x00004ee4      rep stosd dword [rdi], eax\l0x00004ee6      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg1\l0x00004eed      mov qword [var_d0h], 0xffffffffffffffff\l0x00004ef9      call dbg.parse_field_count\l0x00004efe      mov rdi, rax\l0x00004f01      mov rax, qword [var_c0h]\l0x00004f09      lea rdx, [rax - 1]\l0x00004f0d      mov qword [var_c0h], rdx\l0x00004f15      test rax, rax\l0x00004f18      je 0x67f3\l"]
	"0x00004f1e" [URL="dbg.main/0x00004f1e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004f1e      cmp byte [rdi], 0x2e\l0x00004f21      je 0x6078\l"]
	"0x00004f27" [URL="dbg.main/0x00004f27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x60aa\l0x00004f27      mov rax, qword [var_c0h]\l0x00004f2f      or rax, qword [var_c8h]\l0x00004f37      je 0x5439\l"]
	"0x00004f3d" [URL="dbg.main/0x00004f3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5445\l0x00004f3d      mov rsi, qword [var_30h]                               ; int64_t arg2\l0x00004f42      xor edx, edx                                           ; int64_t arg3\l0x00004f44      call dbg.set_ordering\l0x00004f49      cmp byte [rax], 0x2c\l0x00004f4c      je 0x6023\l"]
	"0x00004f52" [URL="dbg.main/0x00004f52", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004f52      mov qword [var_d0h], 0xffffffffffffffff\l0x00004f5e      mov qword [var_d8h], 0\l"]
	"0x00004f6a" [URL="dbg.main/0x00004f6a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6073\l0x00004f6a      cmp byte [rax], 0\l0x00004f6d      jne 0x682d\l"]
	"0x00004f73" [URL="dbg.main/0x00004f73", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004f73      mov rdi, qword [var_30h]\l0x00004f78      call dbg.insertkey\l0x00004f7d      jmp 0x43ff\l"]
	"0x00004f82" [URL="dbg.main/0x00004f82", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 84:                                                           ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004f82      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg1\l0x00004f89      call dbg.add_temp_dir\l0x00004f8e      jmp 0x43ff\l"]
	"0x00004f93" [URL="dbg.main/0x00004f93", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 83:                                                           ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00004f93      mov r9, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00004f9a      mov eax, dword [s1]\l0x00004fa1      lea rcx, [var_160h]                                    ; int64_t arg4\l0x00004fa9      lea rsi, [var_1b0h]                                    ; int64_t arg2\l0x00004fb1      lea r8, str.EgGkKmMPtTYZ                               ; 0x16c9e ; \"EgGkKmMPtTYZ\" ; int64_t arg5\l0x00004fb8      mov edx, 0xa                                           ; uint32_t arg3\l0x00004fbd      mov rdi, r9                                            ; int64_t arg1\l0x00004fc0      mov qword [var_30h], r9\l0x00004fc5      mov dword [var_40h], eax\l0x00004fc9      call dbg.xstrtoumax\l0x00004fce      mov r9, qword [var_30h]\l0x00004fd3      test eax, eax\l0x00004fd5      mov edi, eax\l0x00004fd7      jne 0x53e1\l"]
	"0x00004fdd" [URL="dbg.main/0x00004fdd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004fdd      mov rdx, qword [var_1b0h]\l0x00004fe5      mov rax, qword [var_160h]\l0x00004fed      movsx edx, byte [rdx - 1]\l0x00004ff1      sub edx, 0x30\l0x00004ff4      cmp edx, 9\l0x00004ff7      ja 0x5018\l"]
	"0x00004ff9" [URL="dbg.main/0x00004ff9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004ff9      movabs rdx, 0x3fffffffffffff                           ; 18014398509481983\l0x00005003      cmp rax, rdx\l0x00005006      ja 0x61e1\l"]
	"0x0000500c" [URL="dbg.main/0x0000500c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000500c      shl rax, 0xa\l0x00005010      mov qword [var_160h], rax\l"]
	"0x00005018" [URL="dbg.main/0x00005018", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4ff7, 0x6313, 0x63a8\l0x00005018      cmp rax, qword [obj.sort_size]                         ; [0x1d458:8]=0\l0x0000501f      jb 0x43ff\l"]
	"0x00005025" [URL="dbg.main/0x00005025", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005025      mov edx, dword [obj.nmerge]                            ; [0x1d024:4]=0\l0x0000502b      imul rdx, rdx, 0x22\l0x0000502f      cmp rdx, rax\l0x00005032      cmovb rdx, rax\l0x00005036      mov qword [obj.sort_size], rdx                         ; [0x1d458:8]=0\l0x0000503d      jmp 0x43ff\l"]
	"0x00005042" [URL="dbg.main/0x00005042", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 1:                                                            ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x00005042      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x00005049      cmp byte [rdx], 0x2b\l0x0000504c      je 0x544a\l"]
	"0x00005052" [URL="dbg.main/0x00005052", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5480, 0x633d\l0x00005052      mov qword [r13 + r14*8], rdx\l0x00005057      add r14, 1\l0x0000505b      jmp 0x43ff\l"]
	"0x00005060" [URL="dbg.main/0x00005060", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4959\l0x00005060      movzx ebx, byte [var_8fh]\l0x00005068      mov r14, qword [var_90h]\l0x00005070      mov r13, qword [var_98h]\l"]
	"0x00005078" [URL="dbg.main/0x00005078", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x478c\l0x00005078      mov rdi, qword [var_60h]                               ; int64_t arg1\l0x0000507d      call dbg.default_key_compare\l0x00005082      movzx ebp, byte [var_197h]\l0x0000508a      test al, al\l0x0000508c      jne 0x5ad2\l"]
	"0x00005092" [URL="dbg.main/0x00005092", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005092      cmp byte [obj.stable], 0                               ; [0x1d43a:1]=1\l0x00005099      jne 0x50ac\l"]
	"0x0000509b" [URL="dbg.main/0x0000509b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000509b      cmp byte [obj.unique], 0                               ; [0x1d439:1]=1\l0x000050a2      jne 0x50ac\l"]
	"0x000050a4" [URL="dbg.main/0x000050a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000050a4      mov byte [var_197h], 0\l"]
	"0x000050ac" [URL="dbg.main/0x000050ac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5099, 0x50a2\l0x000050ac      lea r12, [var_3c0h]\l0x000050b4      mov rdi, qword [var_60h]                               ; int64_t arg1\l0x000050b9      mov rsi, r12                                           ; int64_t arg2\l0x000050bc      call dbg.key_to_opts\l0x000050c1      mov rdi, r12                                           ; const char *s\l0x000050c4      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x000050c9      mov r8d, 5\l0x000050cf      lea rdx, str.options___s_are_ignored                   ; 0x16d31 ; \"options '-%s' are ignored\"\l0x000050d6      xor edi, edi\l0x000050d8      mov rcx, rax\l0x000050db      lea rsi, str.option___s_is_ignored                     ; 0x16d4b ; \"option '-%s' is ignored\"\l0x000050e2      call sym.imp.dcngettext\l0x000050e7      mov rcx, r12\l0x000050ea      xor esi, esi                                           ; int errname\l0x000050ec      xor edi, edi                                           ; int status\l0x000050ee      mov rdx, rax                                           ; char *format\l0x000050f1      xor eax, eax\l0x000050f3      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000050f8      mov byte [var_197h], bpl\l0x00005100      test bpl, bpl\l0x00005103      je 0x511b\l"]
	"0x00005105" [URL="dbg.main/0x00005105", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5b57, 0x61dc\l0x00005105      cmp byte [obj.stable], 0                               ; [0x1d43a:1]=1\l0x0000510c      jne 0x511b\l"]
	"0x0000510e" [URL="dbg.main/0x0000510e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5aef, 0x5afd\l0x0000510e      cmp byte [obj.unique], 0                               ; [0x1d439:1]=1\l0x00005115      je 0x6146\l"]
	"0x0000511b" [URL="dbg.main/0x0000511b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x000046db  CODE 0x00005103  CODE 0x0000510c  \l; XREFS: CODE 0x00005ad5  CODE 0x0000614e  CODE 0x00006175  \l; XREFS: CODE 0x00006182  \l0x0000511b      movzx eax, byte [var_147h]\l0x00005123      mov byte [obj.reverse], al                             ; [0x1d43b:1]=0\l0x00005129      test bl, bl\l0x0000512b      jne 0x5673\l"]
	"0x00005131" [URL="dbg.main/0x00005131", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x56d5, 0x601e\l0x00005131      cmp qword [obj.temp_dir_count], 0                      ; [0x1d448:8]=1\l0x00005139      je 0x5651\l"]
	"0x0000513f" [URL="dbg.main/0x0000513f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x566e\l0x0000513f      test r14, r14\l0x00005142      je 0x56da\l"]
	"0x00005148" [URL="dbg.main/0x00005148", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5700\l0x00005148      mov rdx, qword [obj.sort_size]                         ; [0x1d458:8]=0\l0x0000514f      test rdx, rdx\l0x00005152      je 0x516c\l"]
	"0x00005154" [URL="dbg.main/0x00005154", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005154      mov eax, dword [obj.nmerge]                            ; [0x1d024:4]=0\l0x0000515a      imul rax, rax, 0x22\l0x0000515e      cmp rax, rdx\l0x00005161      cmovb rax, rdx\l0x00005165      mov qword [obj.sort_size], rax                         ; [0x1d458:8]=0\l"]
	"0x0000516c" [URL="dbg.main/0x0000516c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5152\l0x0000516c      cmp byte [var_8h], 0\l0x00005171      je 0x55f2\l"]
	"0x00005177" [URL="dbg.main/0x00005177", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005177      sub r14, 1\l0x0000517b      jne 0x6845\l"]
	"0x00005181" [URL="dbg.main/0x00005181", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005181      cmp qword [var_48h], 0\l0x00005187      jne 0x6883\l"]
	"0x0000518d" [URL="dbg.main/0x0000518d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000518d      mov r14, qword [r13]\l0x00005191      lea rsi, [0x00016e2b]                                  ; \"r\" ; int64_t arg2\l0x00005198      mov rdi, r14                                           ; int64_t arg1\l0x0000519b      call dbg.stream_open\l0x000051a0      mov qword [var_10h], rax\l0x000051a5      test rax, rax\l0x000051a8      je 0x689a\l"]
	"0x000051ae" [URL="dbg.main/0x000051ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000051ae      mov rax, qword [obj.keylist]                           ; [0x1d430:8]=0\l0x000051b5      mov rdx, qword [obj.merge_buffer_size]                 ; [0x1d030:8]=0x178022 ; \"\\\"\\x80\\x17\" ; int64_t arg3\l0x000051bc      mov esi, 0x20                                          ; int64_t arg2\l0x000051c1      movzx ebx, byte [obj.unique]                           ; [0x1d439:1]=1\l0x000051c8      mov qword [var_28h], rax\l0x000051cd      mov rax, qword [obj.sort_size]                         ; [0x1d458:8]=0\l0x000051d4      xor ebx, 1\l0x000051d7      cmp rax, rdx\l0x000051da      movzx ebx, bl\l0x000051dd      cmovae rdx, rax\l0x000051e1      lea rax, [var_160h]\l0x000051e9      xor r12d, r12d\l0x000051ec      mov rdi, rax                                           ; int64_t arg1\l0x000051ef      mov qword [var_60h], rax\l0x000051f4      call sym.initbuf\l0x000051f9      lea rax, [s1]\l0x00005201      mov qword [s1], 0\l0x0000520d      mov qword [var_20h], 0\l0x00005216      mov qword [var_30h], rax\l"]
	"0x0000521b" [URL="dbg.main/0x0000521b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x52d0, 0x52fb\l0x0000521b      mov rsi, qword [var_10h]                               ; int64_t arg2\l0x00005220      mov rdi, qword [var_60h]                               ; int64_t arg1\l0x00005225      mov rdx, r14                                           ; int64_t arg3\l0x00005228      call dbg.fillbuf\l0x0000522d      test al, al\l0x0000522f      je 0x62f2\l"]
	"0x00005235" [URL="dbg.main/0x00005235", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005235      mov rax, qword [var_170h]\l0x0000523d      mov rdi, qword [var_178h]\l0x00005245      add rdi, qword [var_160h]\l0x0000524d      mov qword [var_18h], rax\l0x00005252      shl rax, 5\l0x00005256      mov qword [rsp], rdi\l0x0000525a      sub rdi, rax\l0x0000525d      mov rbp, rdi\l0x00005260      test r12, r12\l0x00005263      jne 0x5333\l"]
	"0x00005269" [URL="dbg.main/0x00005269", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5347\l0x00005269      mov rax, qword [rsp]\l0x0000526d      lea r13, [rax - 0x20]\l0x00005271      jmp 0x528f\l"]
	"0x00005278" [URL="dbg.main/0x00005278", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5295\l0x00005278      sub r13, 0x20\l0x0000527c      mov rdi, r15                                           ; int64_t arg1\l0x0000527f      mov rsi, r13                                           ; int64_t arg2\l0x00005282      call sym.compare\l0x00005287      cmp ebx, eax\l0x00005289      jle 0x5351\l"]
	"0x0000528f" [URL="dbg.main/0x0000528f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5271\l0x0000528f      mov r15, r13\l0x00005292      cmp rbp, r13\l0x00005295      jb 0x5278\l"]
	"0x00005297" [URL="dbg.main/0x00005297", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005297      mov rdx, qword [r13 + 8]\l0x0000529b      mov rdi, qword [var_18h]\l0x000052a0      add qword [var_20h], rdi\l0x000052a5      cmp r12, rdx\l0x000052a8      jb 0x5305\l"]
	"0x000052aa" [URL="dbg.main/0x000052aa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x532e\l0x000052aa      mov rdi, qword [s1]                                    ; void *s1\l0x000052b2      mov rsi, qword [r13]                                   ; const void *s2\l0x000052b6      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l0x000052bb      cmp qword [var_28h], 0\l0x000052c1      mov rdi, rax\l0x000052c4      mov rax, qword [r13 + 8]\l0x000052c8      mov qword [var_a8h], rax\l0x000052d0      je 0x521b\l"]
	"0x000052d6" [URL="dbg.main/0x000052d6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000052d6      mov rax, qword [r13 + 0x10]\l0x000052da      mov rdx, qword [r13]\l0x000052de      add rax, rdi\l0x000052e1      add rdi, qword [r13 + 0x18]\l0x000052e5      sub rax, rdx\l0x000052e8      sub rdi, rdx\l0x000052eb      mov qword [var_b0h], rax\l0x000052f3      mov qword [var_b8h], rdi\l0x000052fb      jmp 0x521b\l"]
	"0x00005300" [URL="dbg.main/0x00005300", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5308\l0x00005300      cmp rdx, r12\l0x00005303      jbe 0x530d\l"]
	"0x00005305" [URL="dbg.main/0x00005305", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x52a8\l0x00005305      add r12, r12\l0x00005308      jne 0x5300\l"]
	"0x0000530a" [URL="dbg.main/0x0000530a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000530a      mov r12, rdx\l"]
	"0x0000530d" [URL="dbg.main/0x0000530d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5303\l0x0000530d      mov rdi, qword [s1]\l0x00005315      call fcn.00003720\l0x0000531a      mov rdi, r12                                           ; size_t size\l0x0000531d      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00005322      mov rdx, qword [r13 + 8]\l0x00005326      mov qword [s1], rax\l0x0000532e      jmp 0x52aa\l"]
	"0x00005333" [URL="dbg.main/0x00005333", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5263\l0x00005333      mov rax, qword [rsp]\l0x00005337      mov rdi, qword [var_30h]                               ; int64_t arg1\l0x0000533c      lea rsi, [rax - 0x20]                                  ; int64_t arg2\l0x00005340      call sym.compare\l0x00005345      cmp ebx, eax\l0x00005347      jg 0x5269\l"]
	"0x0000534d" [URL="dbg.main/0x0000534d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000534d      mov r15, qword [rsp]\l"]
	"0x00005351" [URL="dbg.main/0x00005351", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5289\l0x00005351      xor ebx, ebx\l0x00005353      cmp byte [var_8h], 0x63\l0x00005358      je 0x5f1a\l"]
	"0x0000535e" [URL="dbg.main/0x0000535e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5f9c, 0x62f7\l0x0000535e      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x00005363      mov rsi, r14                                           ; int64_t arg2\l0x00005366      xor ebx, 1\l0x00005369      call dbg.xfclose\l0x0000536e      mov rdi, qword [var_160h]\l0x00005376      call fcn.00003720\l0x0000537b      mov rdi, qword [s1]\l0x00005383      call fcn.00003720\l0x00005388      movzx eax, bl\l"]
	"0x0000538b" [URL="dbg.main/0x0000538b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5c17\l0x0000538b      mov rdx, qword [var_3f8h]\l0x00005393      sub rdx, qword fs:[0x28]\l0x0000539c      jne 0x6840\l"]
	"0x000053a2" [URL="dbg.main/0x000053a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000053a2      add rsp, 0x408\l0x000053a9      pop rbx\l0x000053aa      pop rbp\l0x000053ab      pop r12\l0x000053ad      pop r13\l0x000053af      pop r14\l0x000053b1      pop r15\l0x000053b3      ret\l"]
	"0x000053b4" [URL="dbg.main/0x000053b4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x46fe, 0x4718\l0x000053b4      xor edi, edi\l0x000053b6      mov edx, 5\l0x000053bb      lea rsi, str.failed_to_set_locale                      ; 0x16d1c ; \"failed to set locale\"\l0x000053c2      call sym.imp.dcgettext\l0x000053c7      lea rdx, [0x00016feb]                                  ; \"%s\" ; char *format\l0x000053ce      xor esi, esi                                           ; int errname\l0x000053d0      xor edi, edi                                           ; int status\l0x000053d2      mov rcx, rax\l0x000053d5      xor eax, eax\l0x000053d7      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000053dc      jmp 0x471e\l"]
	"0x000053e1" [URL="dbg.main/0x000053e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4fd7\l0x000053e1      cmp eax, 2\l0x000053e4      jne 0x5404\l"]
	"0x000053e6" [URL="dbg.main/0x000053e6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000053e6      mov rax, qword [var_1b0h]\l0x000053ee      movsx edx, byte [rax - 1]\l0x000053f2      sub edx, 0x30\l0x000053f5      cmp edx, 9\l0x000053f8      ja 0x5404\l"]
	"0x000053fa" [URL="dbg.main/0x000053fa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000053fa      cmp byte [rax + 1], 0\l0x000053fe      je 0x62fc\l"]
	"0x00005404" [URL="dbg.main/0x00005404", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x53e4, 0x53f8, 0x61e6, 0x6305\l0x00005404      mov esi, dword [var_40h]                               ; int64_t arg2\l0x00005408      mov r8, r9\l0x0000540b      mov rcx, r12                                           ; int64_t arg5\l0x0000540e      mov edx, 0x53                                          ; 'S' ; int64_t arg4\l0x00005413      call sym.xstrtol_fatal\l"]
	"0x00005418" [URL="dbg.main/0x00005418", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4cd2\l0x00005418      cmp r10d, 1\l0x0000541c      je 0x4cff\l"]
	"0x00005422" [URL="dbg.main/0x00005422", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005422      mov esi, dword [var_30h]                               ; int64_t arg2\l0x00005426      mov r8, r9\l0x00005429      mov rcx, r12                                           ; int64_t arg5\l0x0000542c      mov edx, 0xffffff84                                    ; 4294967172 ; int64_t arg4\l0x00005431      mov edi, r10d                                          ; int64_t arg1\l0x00005434      call sym.xstrtol_fatal\l"]
	"0x00005439" [URL="dbg.main/0x00005439", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4f37\l0x00005439      mov qword [var_c0h], 0xffffffffffffffff\l0x00005445      jmp 0x4f3d\l"]
	"0x0000544a" [URL="dbg.main/0x0000544a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x504c\l0x0000544a      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x00005451      cmp eax, ebx\l0x00005453      je 0x62b2\l"]
	"0x00005459" [URL="dbg.main/0x00005459", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005459      mov rax, qword [rbp + rax*8]\l0x0000545e      mov dword [var_40h], 0\l0x00005466      cmp byte [rax], 0x2d\l0x00005469      je 0x61f4\l"]
	"0x0000546f" [URL="dbg.main/0x0000546f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x6208, 0x62ba\l0x0000546f      cmp qword [var_28h], 0\l0x00005475      sete al\l0x00005478      and eax, dword [var_40h]\l0x0000547c      or byte [var_10h], al\l0x00005480      je 0x5052\l"]
	"0x00005486" [URL="dbg.main/0x00005486", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005486      lea rdi, [var_c0h]\l0x0000548e      xor eax, eax\l0x00005490      mov ecx, 0x12\l0x00005495      mov qword [var_30h], rdi\l0x0000549a      mov rsi, rdi                                           ; int64_t arg2\l0x0000549d      rep stosd dword [rdi], eax\l0x0000549f      lea rdi, [rdx + 1]                                     ; int64_t arg1\l0x000054a3      xor edx, edx                                           ; int64_t arg3\l0x000054a5      mov qword [var_d0h], 0xffffffffffffffff\l0x000054b1      call dbg.parse_field_count\l0x000054b6      mov rdi, rax\l0x000054b9      test rax, rax\l0x000054bc      je 0x6318\l"]
	"0x000054c2" [URL="dbg.main/0x000054c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000054c2      cmp byte [rax], 0x2e\l0x000054c5      je 0x63ad\l"]
	"0x000054cb" [URL="dbg.main/0x000054cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000054cb      mov rax, qword [var_c8h]\l0x000054d3      or rax, qword [var_c0h]\l0x000054db      jne 0x54f2\l"]
	"0x000054dd" [URL="dbg.main/0x000054dd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x63d9\l0x000054dd      mov qword [var_c0h], 0xffffffffffffffff\l"]
	"0x000054e9" [URL="dbg.main/0x000054e9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x63d3\l0x000054e9      test rdi, rdi\l0x000054ec      je 0x6336\l"]
	"0x000054f2" [URL="dbg.main/0x000054f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x54db\l0x000054f2      mov rsi, qword [var_30h]                               ; int64_t arg2\l0x000054f7      xor edx, edx                                           ; int64_t arg3\l0x000054f9      call dbg.set_ordering\l0x000054fe      cmp byte [rax], 0\l0x00005501      jne 0x6336\l"]
	"0x00005507" [URL="dbg.main/0x00005507", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005507      cmp dword [var_40h], 0\l0x0000550c      je 0x5595\l"]
	"0x00005512" [URL="dbg.main/0x00005512", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005512      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x00005519      lea rsi, [var_d0h]                                     ; int64_t arg2\l0x00005521      lea edx, [rax + 1]\l0x00005524      mov rax, qword [rbp + rax*8]\l0x00005529      mov dword [obj.optind], edx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1d1d8:4]=1\l0x0000552f      lea rdx, [0x00016b85]                                  ; \"invalid number after '-'\" ; int64_t arg3\l0x00005536      lea rdi, [rax + 1]                                     ; int64_t arg1\l0x0000553a      mov qword [var_40h], rax\l0x0000553f      call dbg.parse_field_count\l0x00005544      mov rdi, rax\l0x00005547      test rax, rax\l0x0000554a      je 0x641c\l"]
	"0x00005550" [URL="dbg.main/0x00005550", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005550      cmp byte [rax], 0x2e\l0x00005553      je 0x676c\l"]
	"0x00005559" [URL="dbg.main/0x00005559", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6787\l0x00005559      cmp qword [var_d8h], 0\l0x00005562      jne 0x557d\l"]
	"0x00005564" [URL="dbg.main/0x00005564", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005564      mov rax, qword [var_d0h]\l0x0000556c      test rax, rax\l0x0000556f      je 0x557d\l"]
	"0x00005571" [URL="dbg.main/0x00005571", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005571      sub rax, 1\l0x00005575      mov qword [var_d0h], rax\l"]
	"0x0000557d" [URL="dbg.main/0x0000557d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5562, 0x556f\l0x0000557d      mov rsi, qword [var_30h]                               ; int64_t arg2\l0x00005582      mov edx, 1                                             ; int64_t arg3\l0x00005587      call dbg.set_ordering\l0x0000558c      cmp byte [rax], 0\l0x0000558f      jne 0x643b\l"]
	"0x00005595" [URL="dbg.main/0x00005595", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x550c\l0x00005595      mov rdi, qword [var_30h]\l0x0000559a      mov byte [var_f9h], 1\l0x000055a2      call dbg.insertkey\l0x000055a7      jmp 0x43ff\l"]
	"0x000055ac" [URL="dbg.main/0x000055ac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 109:                                                          ; from 0x00004482\l; CODE XREF from dbg.main @ 0x4482\l0x000055ac      mov byte [var_8eh], 1\l0x000055b4      jmp 0x43ff\l"]
	"0x000055c0" [URL="dbg.main/0x000055c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4835, 0x4b25\l0x000055c0      cmp byte [var_30h], 0\l0x000055c5      jne 0x4860\l"]
	"0x000055cb" [URL="dbg.main/0x000055cb", fillcolor="white",color="#767676", fontname="Courier",label="0x000055cb      jmp 0x483b\l"]
	"0x000055d0" [URL="dbg.main/0x000055d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4871\l0x000055d0      mov qword [var_180h], 0\l0x000055dc      jmp 0x4877\l"]
	"0x000055e1" [URL="dbg.main/0x000055e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4888\l0x000055e1      mov qword [var_188h], 0\l0x000055ed      jmp 0x488e\l"]
	"0x000055f2" [URL="dbg.main/0x000055f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5171\l0x000055f2      mov rbx, r13\l0x000055f5      xor ebp, ebp\l0x000055f7      jmp 0x561a\l"]
	"0x00005600" [URL="dbg.main/0x00005600", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5620\l0x00005600      cmp byte [rdi + 1], 0\l0x00005604      jne 0x5622\l"]
	"0x00005606" [URL="dbg.main/0x00005606", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x562e\l0x00005606      lea r15, [rbp + 1]\l0x0000560a      add rbx, 8\l0x0000560e      cmp r14, r15\l0x00005611      je 0x5705\l"]
	"0x00005617" [URL="dbg.main/0x00005617", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005617      mov rbp, r15\l"]
	"0x0000561a" [URL="dbg.main/0x0000561a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x55f7\l0x0000561a      mov rdi, qword [rbx]\l0x0000561d      cmp byte [rdi], 0x2d\l0x00005620      je 0x5600\l"]
	"0x00005622" [URL="dbg.main/0x00005622", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5604\l0x00005622      mov esi, 4\l0x00005627      call sym.imp.euidaccess\l0x0000562c      test eax, eax\l0x0000562e      je 0x5606\l"]
	"0x00005630" [URL="dbg.main/0x00005630", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005630      mov rbp, qword [rbx]\l0x00005633      mov edx, 5\l0x00005638      lea rsi, str.cannot_read                               ; 0x16d8f ; \"cannot read\"\l"]
	"0x0000563f" [URL="dbg.main/0x0000563f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x65bf\l0x0000563f      xor edi, edi\l0x00005641      call sym.imp.dcgettext\l0x00005646      mov rsi, rbp                                           ; int64_t arg2\l0x00005649      mov rdi, rax                                           ; int64_t arg1\l0x0000564c      call dbg.sort_die\l"]
	"0x00005651" [URL="dbg.main/0x00005651", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5139\l0x00005651      lea rdi, str.TMPDIR                                    ; 0x16d63 ; \"TMPDIR\" ; const char *name\l0x00005658      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x0000565d      mov rdi, rax\l0x00005660      test rax, rax\l0x00005663      je 0x6004\l"]
	"0x00005669" [URL="dbg.main/0x00005669", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x600b\l0x00005669      call dbg.add_temp_dir\l0x0000566e      jmp 0x513f\l"]
	"0x00005673" [URL="dbg.main/0x00005673", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x512b\l0x00005673      mov rdi, qword [stream]                                ; int64_t arg1\l0x00005678      mov esi, 0x10                                          ; int64_t arg2\l0x0000567d      call dbg.randread_new\l0x00005682      mov rbp, rax\l0x00005685      test rax, rax\l0x00005688      je 0x6504\l"]
	"0x0000568e" [URL="dbg.main/0x0000568e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000568e      lea r12, [var_3c0h]\l0x00005696      mov rdi, rax                                           ; int64_t arg1\l0x00005699      mov edx, 0x10                                          ; int64_t arg3\l0x0000569e      mov rsi, r12                                           ; int64_t arg2\l0x000056a1      call dbg.randread\l0x000056a6      mov rdi, rbp                                           ; int64_t arg1\l0x000056a9      call sym.randread_free\l0x000056ae      test eax, eax\l0x000056b0      jne 0x64e4\l"]
	"0x000056b6" [URL="dbg.main/0x000056b6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000056b6      lea r15, obj.random_md5_state                          ; 0x1d2e0\l0x000056bd      mov rdi, r15                                           ; int64_t arg1\l0x000056c0      call sym.md5_init_ctx\l0x000056c5      mov rdx, r15                                           ; int64_t arg3\l0x000056c8      mov esi, 0x10                                          ; int64_t arg2\l0x000056cd      mov rdi, r12                                           ; int64_t arg1\l0x000056d0      call dbg.md5_process_bytes\l0x000056d5      jmp 0x5131\l"]
	"0x000056da" [URL="dbg.main/0x000056da", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5142\l0x000056da      mov rdi, r13\l0x000056dd      mov r14d, 1\l0x000056e3      call fcn.00003720\l0x000056e8      mov edi, 8                                             ; size_t size\l0x000056ed      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000056f2      mov r13, rax\l0x000056f5      lea rax, [0x0001798e]                                  ; \"-\"\l0x000056fc      mov qword [r13], rax\l0x00005700      jmp 0x5148\l"]
	"0x00005705" [URL="dbg.main/0x00005705", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5611\l0x00005705      mov rax, qword [var_48h]\l0x0000570a      test rax, rax\l0x0000570d      je 0x573c\l"]
	"0x0000570f" [URL="dbg.main/0x0000570f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000570f      mov rdi, rax                                           ; const char *path\l0x00005712      mov edx, 0x1b6\l0x00005717      mov esi, 0x80041                                       ; 'A' ; int oflag\l0x0000571c      xor eax, eax\l0x0000571e      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x00005723      mov edi, eax\l0x00005725      test eax, eax\l0x00005727      js 0x64c4\l"]
	"0x0000572d" [URL="dbg.main/0x0000572d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000572d      cmp eax, 1\l0x00005730      je 0x573c\l"]
	"0x00005732" [URL="dbg.main/0x00005732", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005732      mov esi, 1\l0x00005737      call sym.move_fd.part.0\l"]
	"0x0000573c" [URL="dbg.main/0x0000573c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x570d, 0x5730\l0x0000573c      cmp byte [var_8eh], 0\l0x00005744      jne 0x5fc2\l"]
	"0x0000574a" [URL="dbg.main/0x0000574a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000574a      cmp qword [var_68h], 0\l0x00005750      je 0x622d\l"]
	"0x00005756" [URL="dbg.main/0x00005756", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x624b\l0x00005756      mov rbx, qword [var_68h]\l0x0000575b      mov qword [var_28h], r15\l0x00005760      movabs rax, 0xffffffffffffff                           ; 72057594037927935\l0x0000576a      mov qword [var_178h], 0\l0x00005776      mov qword [var_18h], 0\l0x0000577f      cmp rbx, rax\l0x00005782      cmovbe rax, rbx\l0x00005786      mov rbx, rax\l0x00005789      mov qword [var_8h], rax\l0x0000578e      add rbx, rax\l0x00005791      shl rax, 8\l0x00005795      mov qword [var_30h], rax\l0x0000579a      lea rax, [0x00016e2b]                                  ; \"r\"\l0x000057a1      mov qword [var_40h], rbx\l0x000057a6      mov qword [var_70h], rax\l; CODE XREF from dbg.main @ 0x5bd8\l0x000057ab      mov rax, qword [r13]\l0x000057af      mov rsi, qword [var_70h]                               ; int64_t arg2\l0x000057b4      mov rdi, rax                                           ; int64_t arg1\l0x000057b7      mov qword [rsp], rax\l0x000057bb      call dbg.stream_open\l0x000057c0      mov qword [stream], rax\l0x000057c5      test rax, rax\l0x000057c8      je 0x67bb\l"]
	"0x000057ce" [URL="dbg.main/0x000057ce", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000057ce      mov qword [var_50h], 0x30                              ; '0'\l                                                                       ; [0x30:8]=-1\l0x000057d7      cmp qword [var_68h], 1\l0x000057dd      ja 0x5ef1\l"]
	"0x000057e3" [URL="dbg.main/0x000057e3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5f15\l0x000057e3      mov r12, qword [var_178h]\l0x000057eb      lea rax, [var_160h]\l0x000057f3      mov qword [var_10h], rax\l0x000057f8      test r12, r12\l0x000057fb      je 0x5c4f\l"]
	"0x00005801" [URL="dbg.main/0x00005801", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5eec\l0x00005801      lea rax, [s1]\l0x00005809      mov qword [var_60h], r13\l0x0000580e      mov r15, qword [stream]\l0x00005813      sub qword [var_28h], 1\l0x00005819      mov r13, qword [var_18h]\l0x0000581e      mov byte [var_190h], 0\l0x00005826      mov qword [var_20h], rax\l0x0000582b      jmp 0x596a\l"]
	"0x00005830" [URL="dbg.main/0x00005830", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5995\l0x00005830      mov r12, qword [var_170h]\l0x00005838      add rbp, qword [var_160h]\l0x00005840      mov qword [obj.saved_line], 0                          ; [0x1d860:8]=0\l; CODE XREFS from case.0x4482.109 @ +0x439, +0x464\l0x0000584b      mov rdi, qword [var_20h]                               ; int64_t arg1\l0x00005850      xor esi, esi                                           ; int64_t arg2\l0x00005852      add r13, 1\l0x00005856      xor ebx, ebx\l0x00005858      call dbg.maybe_create_temp\l0x0000585d      lea r14, [rax + 0xd]\l; CODE XREF from case.0x4482.109 @ +0x4a8\l0x00005861      cmp r12, 1\l0x00005865      jbe 0x5a60\l"]
	"0x0000596a" [URL="dbg.main/0x0000596a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x582b\l0x0000596a      mov rdx, qword [rsp]                                   ; int64_t arg3\l0x0000596e      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x00005973      mov rsi, r15                                           ; int64_t arg2\l0x00005976      call dbg.fillbuf\l0x0000597b      test al, al\l0x0000597d      je 0x5bb0\l"]
	"0x00005983" [URL="dbg.main/0x00005983", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005983      movzx ebx, byte [var_190h]\l0x0000598b      mov rbp, qword [var_178h]\l0x00005993      test bl, bl\l0x00005995      je 0x5830\l"]
	"0x0000599b" [URL="dbg.main/0x0000599b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000599b      cmp qword [var_28h], 0\l0x000059a1      je 0x59ea\l"]
	"0x00005a79" [URL="dbg.main/0x00005a79", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4854\l0x00005a79      xor edi, edi\l0x00005a7b      mov edx, 5\l0x00005a80      lea rsi, str.key__lu_is_numeric_and_spans_multiple_fields ; 0x168c8 ; \"key %lu is numeric and spans multiple fields\"\l0x00005a87      call sym.imp.dcgettext\l0x00005a8c      mov rcx, qword [var_40h]\l0x00005a91      xor esi, esi                                           ; int errname\l0x00005a93      xor edi, edi                                           ; int status\l0x00005a95      mov rdx, rax                                           ; char *format\l0x00005a98      xor eax, eax\l0x00005a9a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00005a9f      jmp 0x4860\l"]
	"0x00005aa4" [URL="dbg.main/0x00005aa4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x45c3\l0x00005aa4      lea rdi, [var_110h]                                    ; int64_t arg1\l0x00005aac      call dbg.default_key_compare\l0x00005ab1      test al, al\l0x00005ab3      je 0x5b89\l"]
	"0x00005ab9" [URL="dbg.main/0x00005ab9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005ab9      cmp byte [obj.debug], 0                                ; [0x1d420:1]=1\l0x00005ac0      je 0x6010\l"]
	"0x00005ac6" [URL="dbg.main/0x00005ac6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005ac6      mov byte [var_30h], 0\l0x00005acb      xor ebx, ebx\l0x00005acd      jmp 0x46e1\l"]
	"0x00005ad2" [URL="dbg.main/0x00005ad2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x508c\l0x00005ad2      test bpl, bpl\l0x00005ad5      je 0x511b\l"]
	"0x00005adb" [URL="dbg.main/0x00005adb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005adb      cmp byte [obj.stable], 0                               ; [0x1d43a:1]=1\l0x00005ae2      jne 0x617a\l"]
	"0x00005ae8" [URL="dbg.main/0x00005ae8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005ae8      cmp byte [obj.unique], 0                               ; [0x1d439:1]=1\l0x00005aef      je 0x510e\l"]
	"0x00005af5" [URL="dbg.main/0x00005af5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005af5      cmp qword [obj.keylist], 0                             ; [0x1d430:8]=0\l0x00005afd      je 0x510e\l"]
	"0x00005b03" [URL="dbg.main/0x00005b03", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005b03      lea r12, [var_3c0h]\l0x00005b0b      mov rdi, qword [var_60h]                               ; int64_t arg1\l0x00005b10      mov rsi, r12                                           ; int64_t arg2\l0x00005b13      call dbg.key_to_opts\l0x00005b18      mov rdi, r12                                           ; const char *s\l0x00005b1b      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00005b20      mov r8d, 5\l0x00005b26      lea rdx, str.options___s_are_ignored                   ; 0x16d31 ; \"options '-%s' are ignored\"\l0x00005b2d      xor edi, edi\l0x00005b2f      mov rcx, rax\l0x00005b32      lea rsi, str.option___s_is_ignored                     ; 0x16d4b ; \"option '-%s' is ignored\"\l0x00005b39      call sym.imp.dcngettext\l0x00005b3e      mov rcx, r12\l0x00005b41      xor esi, esi                                           ; int errname\l0x00005b43      xor edi, edi                                           ; int status\l0x00005b45      mov rdx, rax                                           ; char *format\l0x00005b48      xor eax, eax\l0x00005b4a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00005b4f      mov byte [var_197h], bpl\l0x00005b57      jmp 0x5105\l"]
	"0x00005b5c" [URL="dbg.main/0x00005b5c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4725\l0x00005b5c      xor edi, edi\l0x00005b5e      mov edx, 5\l0x00005b63      lea rsi, str.text_ordering_performed_using_simple_byte_comparison ; 0x16818 ; \"text ordering performed using simple byte comparison\"\l0x00005b6a      call sym.imp.dcgettext\l0x00005b6f      lea rdx, [0x00016feb]                                  ; \"%s\" ; char *format\l0x00005b76      xor esi, esi                                           ; int errname\l0x00005b78      xor edi, edi                                           ; int status\l0x00005b7a      mov rcx, rax\l0x00005b7d      xor eax, eax\l0x00005b7f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00005b84      jmp 0x4766\l"]
	"0x00005b89" [URL="dbg.main/0x00005b89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5ab3\l0x00005b89      call dbg.insertkey\l0x00005b8e      mov r8, qword [obj.keylist]                            ; [0x1d430:8]=0\l0x00005b95      mov byte [var_30h], 1\l0x00005b9a      movzx ebx, byte [var_143h]\l0x00005ba2      test r8, r8\l0x00005ba5      jne 0x4690\l"]
	"0x00005bab" [URL="dbg.main/0x00005bab", fillcolor="white",color="#767676", fontname="Courier",label="0x00005bab      jmp 0x46d4\l"]
	"0x00005bb0" [URL="dbg.main/0x00005bb0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x597d\l0x00005bb0      mov rsi, qword [rsp]                                   ; int64_t arg2\l0x00005bb4      mov rdi, qword [stream]                                ; int64_t arg1\l0x00005bb9      mov qword [var_18h], r13\l0x00005bbe      mov r13, qword [var_60h]\l0x00005bc3      call dbg.xfclose\l0x00005bc8      cmp qword [var_28h], 0\l0x00005bce      je 0x6250\l"]
	"0x00005bd4" [URL="dbg.main/0x00005bd4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from case.0x4482.0 @ +0x1b7\l0x00005bd4      add r13, 8\l0x00005bd8      jmp 0x57ab\l"]
	"0x00005c0c" [URL="dbg.main/0x00005c0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x645, 0x5fff\l0x00005c0c      cmp byte [obj.have_read_stdin], 0                      ; [0x1d438:1]=1\l0x00005c13      jne 0x5c1c\l"]
	"0x00005c15" [URL="dbg.main/0x00005c15", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5c2b\l0x00005c15      xor eax, eax\l0x00005c17      jmp 0x538b\l"]
	"0x00005c1c" [URL="dbg.main/0x00005c1c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5c13\l0x00005c1c      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0x1d1d0:8]=0 ; int64_t arg1\l0x00005c23      call dbg.rpl_fclose\l0x00005c28      add eax, 1\l0x00005c2b      jne 0x5c15\l"]
	"0x00005c2d" [URL="dbg.main/0x00005c2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005c2d      lea rsi, str.close_failed                              ; 0x169c8 ; \"close failed\"\l0x00005c34      xor edi, edi\l0x00005c36      mov edx, 5\l0x00005c3b      call sym.imp.dcgettext\l0x00005c40      lea rsi, [0x0001798e]                                  ; \"-\" ; int64_t arg2\l0x00005c47      mov rdi, rax                                           ; int64_t arg1\l0x00005c4a      call dbg.sort_die\l"]
	"0x00005c4f" [URL="dbg.main/0x00005c4f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x57fb\l0x00005c4f      mov rax, qword [var_50h]\l0x00005c54      mov r15, qword [var_38h]\l0x00005c59      lea rbx, [rax + 1]\l0x00005c5d      lea r14, [rax + 2]\l0x00005c61      jmp 0x5cca\l"]
	"0x00005c63" [URL="dbg.main/0x00005c63", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5d13\l0x00005c63      mov rsi, qword [obj.sort_size]                         ; [0x1d458:8]=0\l0x00005c6a      test rsi, rsi\l0x00005c6d      jne 0x5ecc\l"]
	"0x00005c73" [URL="dbg.main/0x00005c73", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005c73      cmp qword [obj.size_bound.0], 0                        ; [0x1d220:8]=1\l0x00005c7b      mov ebp, 0x20000\l0x00005c80      je 0x5d46\l"]
	"0x00005c86" [URL="dbg.main/0x00005c86", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5d29, 0x5d40\l; CODE XREF from case.0x4482.109 @ +0x8ee\l0x00005c86      mov rcx, rbx\l0x00005c89      xor edx, edx\l0x00005c8b      mov rsi, qword [obj.size_bound.0]                      ; [0x1d220:8]=1\l0x00005c92      imul rcx, rbp\l0x00005c96      add rcx, 1\l0x00005c9a      mov rax, rcx\l0x00005c9d      div rbx\l0x00005ca0      cmp rbp, rax\l0x00005ca3      jne 0x5ecc\l"]
	"0x00005cca" [URL="dbg.main/0x00005cca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5c61\l0x00005cca      test r12, r12\l0x00005ccd      je 0x5eae\l"]
	"0x00005cd3" [URL="dbg.main/0x00005cd3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005cd3      mov rdi, qword [r13 + r12*8]\l0x00005cd8      mov rsi, r15\l0x00005cdb      cmp byte [rdi], 0x2d\l0x00005cde      jne 0x5e9f\l"]
	"0x00005ce4" [URL="dbg.main/0x00005ce4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005ce4      cmp byte [rdi + 1], 0\l0x00005ce8      jne 0x5e9f\l"]
	"0x00005cee" [URL="dbg.main/0x00005cee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005cee      xor edi, edi                                           ; int fildes\l0x00005cf0      call sym.imp.fstat                                     ; int fstat(int fildes, void *buf)\l0x00005cf5      test eax, eax\l0x00005cf7      setne al\l"]
	"0x00005cfa" [URL="dbg.main/0x00005cfa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5ea9, 0x5ec7\l0x00005cfa      test al, al\l0x00005cfc      jne 0x65ae\l"]
	"0x00005d02" [URL="dbg.main/0x00005d02", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005d02      mov eax, dword [var_2e8h]\l0x00005d09      and eax, 0xf000\l0x00005d0e      cmp eax, 0x8000\l0x00005d13      jne 0x5c63\l"]
	"0x00005d19" [URL="dbg.main/0x00005d19", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005d19      cmp qword [obj.size_bound.0], 0                        ; [0x1d220:8]=1\l0x00005d21      mov rbp, qword [var_300h]\l0x00005d29      jne 0x5c86\l"]
	"0x00005d2f" [URL="dbg.main/0x00005d2f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005d2f      mov rax, qword [obj.sort_size]                         ; [0x1d458:8]=0\l0x00005d36      mov qword [obj.size_bound.0], rax                      ; [0x1d220:8]=1\l0x00005d3d      test rax, rax\l0x00005d40      jne 0x5c86\l"]
	"0x00005e9f" [URL="dbg.main/0x00005e9f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5cde, 0x5ce8\l0x00005e9f      call sym.imp.stat\l0x00005ea4      test eax, eax\l0x00005ea6      setne al\l0x00005ea9      jmp 0x5cfa\l"]
	"0x00005eae" [URL="dbg.main/0x00005eae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5ccd\l0x00005eae      mov rdi, qword [stream]                                ; FILE *stream\l0x00005eb3      call sym.imp.fileno                                    ; int fileno(FILE *stream)\l0x00005eb8      mov rsi, r15                                           ; void *buf\l0x00005ebb      mov edi, eax                                           ; int fildes\l0x00005ebd      call sym.imp.fstat                                     ; int fstat(int fildes, void *buf)\l0x00005ec2      test eax, eax\l0x00005ec4      setne al\l0x00005ec7      jmp 0x5cfa\l"]
	"0x00005ecc" [URL="dbg.main/0x00005ecc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5c6d, 0x5ca3\l; CODE XREF from case.0x4482.109 @ +0x706\l0x00005ecc      mov r14, rsi\l; CODE XREF from case.0x4482.109 @ +0x718\l0x00005ecf      lea rax, [var_160h]\l0x00005ed7      mov rsi, qword [var_50h]                               ; int64_t arg2\l0x00005edc      mov rdx, r14                                           ; int64_t arg3\l0x00005edf      mov rdi, rax                                           ; int64_t arg1\l0x00005ee2      mov qword [var_10h], rax\l0x00005ee7      call sym.initbuf\l0x00005eec      jmp 0x5801\l"]
	"0x00005ef1" [URL="dbg.main/0x00005ef1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x57dd\l0x00005ef1      mov rcx, qword [var_8h]\l0x00005ef6      mov edx, 1\l0x00005efb      mov eax, 1\l"]
	"0x00005f00" [URL="dbg.main/0x00005f00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5f0a\l0x00005f00      add rax, rax\l0x00005f03      add rdx, 1\l0x00005f07      cmp rcx, rax\l0x00005f0a      ja 0x5f00\l"]
	"0x00005f0c" [URL="dbg.main/0x00005f0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005f0c      shl rdx, 5\l0x00005f10      mov qword [var_50h], rdx\l0x00005f15      jmp 0x57e3\l"]
	"0x00005f1a" [URL="dbg.main/0x00005f1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5358\l0x00005f1a      mov rdi, qword [rsp]\l0x00005f1e      lea rbp, [r15 - 0x20]\l0x00005f22      lea rsi, [var_3c0h]                                    ; int64_t arg2\l0x00005f2a      sub rdi, rbp\l0x00005f2d      sar rdi, 5\l0x00005f31      add rdi, qword [var_20h]                               ; int64_t arg1\l0x00005f36      call dbg.umaxtostr\l0x00005f3b      mov r15, qword [obj.program_name]                      ; [0x1d8a8:8]=4\l0x00005f42      xor edi, edi\l0x00005f44      mov edx, 5\l0x00005f49      lea rsi, str._s:__s:_s:_disorder:_                     ; 0x16d6a ; \"%s: %s:%s: disorder: \"\l0x00005f50      mov r12, rax\l0x00005f53      call sym.imp.dcgettext\l0x00005f58      mov r9, r12\l0x00005f5b      mov r8, r14\l0x00005f5e      mov rcx, r15\l0x00005f61      mov rdi, qword [obj.stderr]                            ; obj.stderr_GLIBC_2.2.5\l                                                                       ; [0x1d200:8]=0\l0x00005f68      mov rdx, rax\l0x00005f6b      mov esi, 1\l0x00005f70      xor eax, eax\l0x00005f72      call sym.imp.__fprintf_chk\l0x00005f77      xor edi, edi\l0x00005f79      mov edx, 5\l0x00005f7e      lea rsi, str.standard_error                            ; 0x16d80 ; \"standard error\"\l0x00005f85      call sym.imp.dcgettext\l0x00005f8a      mov rsi, qword [obj.stderr]                            ; obj.stderr_GLIBC_2.2.5\l                                                                       ; [0x1d200:8]=0 ; int64_t arg2\l0x00005f91      mov rdi, rbp                                           ; int64_t arg1\l0x00005f94      mov rdx, rax                                           ; int64_t arg3\l0x00005f97      call dbg.write_line\l0x00005f9c      jmp 0x535e\l"]
	"0x00005fc2" [URL="dbg.main/0x00005fc2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5744\l0x00005fc2      mov rdi, r15                                           ; size_t nmeb\l0x00005fc5      mov esi, 0x10                                          ; size_t size\l0x00005fca      call sym.xcalloc\l0x00005fcf      mov rdi, rax\l0x00005fd2      xor eax, eax\l"]
	"0x00005fd4" [URL="dbg.main/0x00005fd4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5fee\l0x00005fd4      mov rcx, qword [r13 + rax*8]\l0x00005fd9      mov rdx, rax\l0x00005fdc      shl rdx, 4\l0x00005fe0      mov qword [rdi + rdx], rcx\l0x00005fe4      mov rdx, rax\l0x00005fe7      add rax, 1\l0x00005feb      cmp rdx, rbp\l0x00005fee      jne 0x5fd4\l"]
	"0x00005ff0" [URL="dbg.main/0x00005ff0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00005ff0      mov rcx, qword [var_48h]                               ; int64_t arg4\l0x00005ff5      mov rdx, r15                                           ; int64_t arg3\l0x00005ff8      xor esi, esi                                           ; int64_t arg2\l0x00005ffa      call dbg.merge\l0x00005fff      jmp 0x5c0c\l"]
	"0x00006004" [URL="dbg.main/0x00006004", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5663\l0x00006004      lea rdi, str._tmp                                      ; 0x16aab ; \"/tmp\"\l0x0000600b      jmp 0x5669\l"]
	"0x00006010" [URL="dbg.main/0x00006010", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5ac0\l0x00006010      movzx eax, byte [var_147h]\l0x00006018      mov byte [obj.reverse], al                             ; [0x1d43b:1]=0\l0x0000601e      jmp 0x5131\l"]
	"0x00006023" [URL="dbg.main/0x00006023", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4f4c\l0x00006023      lea rdi, [rax + 1]                                     ; int64_t arg1\l0x00006027      lea rdx, str.invalid_number_after__                    ; 0x16c33 ; \"invalid number after ','\" ; int64_t arg3\l0x0000602e      lea rsi, [var_d0h]                                     ; int64_t arg2\l0x00006036      call dbg.parse_field_count\l0x0000603b      mov rdi, rax\l0x0000603e      mov rax, qword [var_d0h]\l0x00006046      lea rdx, [rax - 1]\l0x0000604a      mov qword [var_d0h], rdx\l0x00006052      test rax, rax\l0x00006055      je 0x67f3\l"]
	"0x0000605b" [URL="dbg.main/0x0000605b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000605b      cmp byte [rdi], 0x2e\l0x0000605e      je 0x620d\l"]
	"0x00006064" [URL="dbg.main/0x00006064", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6228\l0x00006064      mov rsi, qword [var_30h]                               ; int64_t arg2\l0x00006069      mov edx, 1                                             ; int64_t arg3\l0x0000606e      call dbg.set_ordering\l0x00006073      jmp 0x4f6a\l"]
	"0x00006078" [URL="dbg.main/0x00006078", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4f21\l0x00006078      add rdi, 1                                             ; int64_t arg1\l0x0000607c      lea rdx, str.invalid_number_after_.                    ; 0x16b9e ; \"invalid number after '.'\" ; int64_t arg3\l0x00006083      lea rsi, [var_c8h]                                     ; int64_t arg2\l0x0000608b      call dbg.parse_field_count\l0x00006090      mov rdi, rax\l0x00006093      mov rax, qword [var_c8h]\l0x0000609b      lea rdx, [rax - 1]\l0x0000609f      mov qword [var_c8h], rdx\l0x000060a7      test rax, rax\l0x000060aa      jne 0x4f27\l"]
	"0x000060b0" [URL="dbg.main/0x000060b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000060b0      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg2\l0x000060b7      lea rsi, str.character_offset_is_zero                  ; 0x16c1a ; \"character offset is zero\"\l0x000060be      call dbg.badfieldspec\l"]
	"0x000060c3" [URL="dbg.main/0x000060c3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x45ae, 0x65d3\l0x000060c3      mov rsi, qword [r13]                                   ; int64_t arg2\l0x000060c7      mov edi, 4                                             ; int64_t arg1\l0x000060cc      call sym.quotearg_style\l0x000060d1      mov edx, 5\l0x000060d6      lea rsi, str.extra_operand__s                          ; 0x16cfa ; \"extra operand %s\"\l0x000060dd      xor edi, edi\l0x000060df      mov r12, rax\l0x000060e2      call sym.imp.dcgettext\l0x000060e7      mov rcx, r12\l0x000060ea      xor esi, esi                                           ; int errname\l0x000060ec      xor edi, edi                                           ; int status\l0x000060ee      mov rdx, rax                                           ; char *format\l0x000060f1      xor eax, eax\l0x000060f3      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000060f8      mov edx, 5\l0x000060fd      lea rsi, str.file_operands_cannot_be_combined_with___files0_from ; 0x16728 ; \"file operands cannot be combined with --files0-from\"\l0x00006104      xor edi, edi\l0x00006106      call sym.imp.dcgettext\l0x0000610b      mov rdi, qword [obj.stderr]                            ; obj.stderr_GLIBC_2.2.5\l                                                                       ; [0x1d200:8]=0\l0x00006112      mov esi, 1\l0x00006117      lea rdx, [0x00017572]                                  ; \"%s\\n\"\l0x0000611e      mov rcx, rax\l0x00006121      xor eax, eax\l0x00006123      call sym.imp.__fprintf_chk\l"]
	"0x00006128" [URL="dbg.main/0x00006128", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 0:                                                            ; from 0x00004482\l;-- case 3...66:                                                       ; from 0x00004482\l;-- case 68:                                                           ; from 0x00004482\l;-- case 69...76:                                                      ; from 0x00004482\l;-- case 78:                                                           ; from 0x00004482\l;-- case 79...81:                                                      ; from 0x00004482\l;-- case 85:                                                           ; from 0x00004482\l;-- case 87...97:                                                      ; from 0x00004482\l;-- case 101:                                                          ; from 0x00004482\l;-- case 106:                                                          ; from 0x00004482\l;-- case 112...113:                                                    ; from 0x00004482\l;-- case 118:                                                          ; from 0x00004482\l;-- case 119...120:                                                    ; from 0x00004482\l;-- case 123:                                                          ; from 0x00004482\l;-- default:                                                           ; from 0x4482\l; CODE XREFS from dbg.main @ 0x4459, 0x446c, 0x4482, 0x4595\l0x00006128      mov edi, 2                                             ; int64_t arg1\l0x0000612d      call dbg.usage\l"]
	"0x00006146" [URL="dbg.main/0x00006146", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5115\l0x00006146      cmp qword [obj.keylist], 0                             ; [0x1d430:8]=0\l0x0000614e      je 0x511b\l"]
	"0x00006154" [URL="dbg.main/0x00006154", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006154      xor edi, edi\l0x00006156      mov edx, 5\l0x0000615b      lea rsi, str.option__r_only_applies_to_last_resort_comparison ; 0x168f8 ; \"option '-r' only applies to last-resort comparison\"\l0x00006162      call sym.imp.dcgettext\l0x00006167      xor esi, esi                                           ; int errname\l0x00006169      xor edi, edi                                           ; int status\l0x0000616b      mov rdx, rax                                           ; char *format\l0x0000616e      xor eax, eax\l0x00006170      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00006175      jmp 0x511b\l"]
	"0x0000617a" [URL="dbg.main/0x0000617a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5ae2\l0x0000617a      cmp qword [obj.keylist], 0                             ; [0x1d430:8]=0\l0x00006182      je 0x511b\l"]
	"0x00006188" [URL="dbg.main/0x00006188", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006188      lea r12, [var_3c0h]\l0x00006190      mov rdi, qword [var_60h]                               ; int64_t arg1\l0x00006195      mov rsi, r12                                           ; int64_t arg2\l0x00006198      call dbg.key_to_opts\l0x0000619d      mov rdi, r12                                           ; const char *s\l0x000061a0      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x000061a5      mov r8d, 5\l0x000061ab      lea rdx, str.options___s_are_ignored                   ; 0x16d31 ; \"options '-%s' are ignored\"\l0x000061b2      xor edi, edi\l0x000061b4      mov rcx, rax\l0x000061b7      lea rsi, str.option___s_is_ignored                     ; 0x16d4b ; \"option '-%s' is ignored\"\l0x000061be      call sym.imp.dcngettext\l0x000061c3      mov rcx, r12\l0x000061c6      xor esi, esi                                           ; int errname\l0x000061c8      xor edi, edi                                           ; int status\l0x000061ca      mov rdx, rax                                           ; char *format\l0x000061cd      xor eax, eax\l0x000061cf      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000061d4      mov byte [var_197h], 1\l0x000061dc      jmp 0x5105\l"]
	"0x000061e1" [URL="dbg.main/0x000061e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x5006, 0x6387\l0x000061e1      mov edi, 1\l0x000061e6      jmp 0x5404\l"]
	"0x000061eb" [URL="dbg.main/0x000061eb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e08\l0x000061eb      add rdx, 1\l0x000061ef      jmp 0x4dfd\l"]
	"0x000061f4" [URL="dbg.main/0x000061f4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5469\l0x000061f4      movsx eax, byte [rax + 1]\l0x000061f8      sub eax, 0x30\l0x000061fb      cmp eax, 9\l0x000061fe      setbe al\l0x00006201      movzx eax, al\l0x00006204      mov dword [var_40h], eax\l0x00006208      jmp 0x546f\l"]
	"0x0000620d" [URL="dbg.main/0x0000620d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x605e\l0x0000620d      add rdi, 1                                             ; int64_t arg1\l0x00006211      lea rsi, [var_d8h]                                     ; int64_t arg2\l0x00006219      lea rdx, str.invalid_number_after_.                    ; 0x16b9e ; \"invalid number after '.'\" ; int64_t arg3\l0x00006220      call dbg.parse_field_count\l0x00006225      mov rdi, rax\l0x00006228      jmp 0x6064\l"]
	"0x0000622d" [URL="dbg.main/0x0000622d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5750\l0x0000622d      mov edi, 2                                             ; int64_t arg1\l0x00006232      call dbg.num_processors\l0x00006237      mov r8, rax\l0x0000623a      mov eax, 8\l0x0000623f      cmp r8, rax\l0x00006242      cmovbe rax, r8\l0x00006246      mov qword [var_68h], rax\l0x0000624b      jmp 0x5756\l"]
	"0x00006250" [URL="dbg.main/0x00006250", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5bce\l0x00006250      mov rdi, qword [var_160h]\l0x00006258      call fcn.00003720\l0x0000625d      mov rdi, qword [var_18h]                               ; int64_t arg1\l0x00006262      mov esi, 0x10                                          ; int64_t arg2\l0x00006267      mov rbx, qword [obj.temphead]                          ; [0x1d388:8]=0\l0x0000626e      call dbg.xnmalloc\l0x00006273      mov rbp, rax\l0x00006276      jmp 0x628b\l"]
	"0x000062b2" [URL="dbg.main/0x000062b2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5453\l0x000062b2      mov dword [var_40h], 0\l0x000062ba      jmp 0x546f\l"]
	"0x000062e4" [URL="dbg.main/0x000062e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4be3\l0x000062e4      mov qword [var_68h], 0xffffffffffffffff\l0x000062ed      jmp 0x43ff\l"]
	"0x000062f2" [URL="dbg.main/0x000062f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x522f\l0x000062f2      mov ebx, 1\l0x000062f7      jmp 0x535e\l"]
	"0x000062fc" [URL="dbg.main/0x000062fc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x53fe\l0x000062fc      movzx eax, byte [rax]\l0x000062ff      cmp al, 0x25\l0x00006301      je 0x6342\l"]
	"0x00006303" [URL="dbg.main/0x00006303", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006303      cmp al, 0x62\l0x00006305      jne 0x5404\l"]
	"0x0000630b" [URL="dbg.main/0x0000630b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x63f9\l0x0000630b      mov rax, qword [var_160h]\l0x00006313      jmp 0x5018\l"]
	"0x00006318" [URL="dbg.main/0x00006318", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x54bc\l0x00006318      mov rax, qword [var_c8h]\l0x00006320      or rax, qword [var_c0h]\l0x00006328      jne 0x6336\l"]
	"0x0000632a" [URL="dbg.main/0x0000632a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000632a      mov qword [var_c0h], 0xffffffffffffffff\l"]
	"0x00006336" [URL="dbg.main/0x00006336", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x54ec, 0x5501, 0x6328\l0x00006336      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0\l0x0000633d      jmp 0x5052\l"]
	"0x00006342" [URL="dbg.main/0x00006342", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6301\l0x00006342      mov qword [var_30h], r9\l0x00006347      call sym.physmem_total\l0x0000634c      mov rax, qword [var_160h]\l0x00006354      mov r9, qword [var_30h]\l0x00006359      movapd xmm1, xmm0\l0x0000635d      test rax, rax\l0x00006360      js 0x63fe\l"]
	"0x00006366" [URL="dbg.main/0x00006366", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006366      pxor xmm0, xmm0\l0x0000636a      cvtsi2sd xmm0, rax\l"]
	"0x0000636f" [URL="dbg.main/0x0000636f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6417\l0x0000636f      mulsd xmm0, xmm1\l0x00006373      movsd xmm1, qword [0x00016f70]                         ; [0x16f70:8]=0x43f0000000000000\l0x0000637b      divsd xmm0, qword [0x00016f68]\l0x00006383      comisd xmm1, xmm0\l0x00006387      jbe 0x61e1\l"]
	"0x0000638d" [URL="dbg.main/0x0000638d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000638d      movsd xmm1, qword [0x00016f78]                         ; [0x16f78:8]=0x43e0000000000000\l0x00006395      comisd xmm0, xmm1\l0x00006399      jae 0x63de\l"]
	"0x0000639b" [URL="dbg.main/0x0000639b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000639b      cvttsd2si rax, xmm0\l0x000063a0      mov qword [var_160h], rax\l0x000063a8      jmp 0x5018\l"]
	"0x000063ad" [URL="dbg.main/0x000063ad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x54c5\l0x000063ad      add rdi, 1                                             ; int64_t arg1\l0x000063b1      xor edx, edx                                           ; int64_t arg3\l0x000063b3      lea rsi, [var_c8h]                                     ; int64_t arg2\l0x000063bb      call dbg.parse_field_count\l0x000063c0      mov rdi, rax\l0x000063c3      mov rax, qword [var_c0h]\l0x000063cb      or rax, qword [var_c8h]\l0x000063d3      jne 0x54e9\l"]
	"0x000063d9" [URL="dbg.main/0x000063d9", fillcolor="white",color="#767676", fontname="Courier",label="0x000063d9      jmp 0x54dd\l"]
	"0x000063de" [URL="dbg.main/0x000063de", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6399\l0x000063de      subsd xmm0, xmm1\l0x000063e2      cvttsd2si rax, xmm0\l0x000063e7      mov qword [var_160h], rax\l0x000063ef      btc qword [var_160h], 0x3f\l0x000063f9      jmp 0x630b\l"]
	"0x000063fe" [URL="dbg.main/0x000063fe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6360\l0x000063fe      mov rdx, rax\l0x00006401      and eax, 1\l0x00006404      pxor xmm0, xmm0\l0x00006408      shr rdx, 1\l0x0000640b      or rdx, rax\l0x0000640e      cvtsi2sd xmm0, rdx\l0x00006413      addsd xmm0, xmm0\l0x00006417      jmp 0x636f\l"]
	"0x0000641c" [URL="dbg.main/0x0000641c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x554a\l0x0000641c      lea rcx, obj.__PRETTY_FUNCTION__.8                     ; 0x1530c ; \"main\" ; const char *function\l0x00006423      mov edx, 0x110d                                        ; '\\r\\x11' ; \"ocale\" ; unsigned int line\l0x00006428      lea rsi, str.src_sort.c                                ; 0x169af ; \"src/sort.c\" ; const char *file\l0x0000642f      lea rdi, [0x00016fec]                                  ; \"s\" ; const char *assertion\l0x00006436      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x0000643b" [URL="dbg.main/0x0000643b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x558f\l0x0000643b      mov rdi, qword [var_40h]                               ; int64_t arg2\l0x00006440      lea rsi, str.stray_character_in_field_spec             ; 0x16bb7 ; \"stray character in field spec\"\l0x00006447      call dbg.badfieldspec\l"]
	"0x0000644c" [URL="dbg.main/0x0000644c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4cf0\l0x0000644c      mov rdi, r9                                            ; int64_t arg1\l0x0000644f      call dbg.quote\l0x00006454      mov edx, 5\l0x00006459      lea rsi, str.invalid____s_argument__s                  ; 0x16c67 ; \"invalid --%s argument %s\"\l0x00006460      xor edi, edi\l0x00006462      mov rbx, rax\l0x00006465      movsxd rax, dword [var_30h]\l0x0000646a      shl rax, 5\l0x0000646e      mov r12, qword [r12 + rax]\l0x00006472      call sym.imp.dcgettext\l0x00006477      mov r8, rbx\l0x0000647a      xor esi, esi                                           ; int errname\l0x0000647c      xor edi, edi                                           ; int status\l0x0000647e      mov rdx, rax                                           ; char *format\l0x00006481      mov rcx, r12\l0x00006484      xor eax, eax\l0x00006486      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000648b      lea rdi, [0x00016c80]                                  ; \"2\" ; int64_t arg1\l0x00006492      call dbg.quote\l0x00006497      mov edx, 5\l0x0000649c      lea rsi, str.minimum____s_argument_is__s               ; 0x16c82 ; \"minimum --%s argument is %s\"\l0x000064a3      xor edi, edi\l0x000064a5      mov rbx, rax\l0x000064a8      call sym.imp.dcgettext\l0x000064ad      mov r8, rbx\l0x000064b0      mov rcx, r12\l0x000064b3      xor esi, esi                                           ; int errname\l0x000064b5      mov rdx, rax                                           ; char *format\l0x000064b8      mov edi, 2                                             ; int status\l0x000064bd      xor eax, eax\l0x000064bf      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000064c4" [URL="dbg.main/0x000064c4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5727\l; CODE XREF from case.0x4482.109 @ +0x48a\l0x000064c4      lea rsi, str.open_failed                               ; 0x16a2d ; \"open failed\"\l0x000064cb      xor edi, edi\l0x000064cd      mov edx, 5\l0x000064d2      call sym.imp.dcgettext\l0x000064d7      mov rsi, qword [var_48h]                               ; int64_t arg2\l0x000064dc      mov rdi, rax                                           ; int64_t arg1\l0x000064df      call dbg.sort_die\l"]
	"0x000064e4" [URL="dbg.main/0x000064e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x56b0\l0x000064e4      mov edx, 5\l0x000064e9      lea rsi, str.close_failed                              ; 0x169c8 ; \"close failed\"\l"]
	"0x000064f0" [URL="dbg.main/0x000064f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x651c\l0x000064f0      xor edi, edi\l0x000064f2      call sym.imp.dcgettext\l0x000064f7      mov rsi, qword [stream]                                ; int64_t arg2\l0x000064fc      mov rdi, rax                                           ; int64_t arg1\l0x000064ff      call dbg.sort_die\l"]
	"0x00006504" [URL="dbg.main/0x00006504", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5688\l0x00006504      cmp qword [stream], 0\l0x0000650a      je 0x6751\l"]
	"0x00006510" [URL="dbg.main/0x00006510", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x675d\l0x00006510      mov edx, 5\l0x00006515      lea rsi, str.open_failed                               ; 0x16a2d ; \"open failed\"\l0x0000651c      jmp 0x64f0\l"]
	"0x0000651e" [URL="dbg.main/0x0000651e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e74\l0x0000651e      mov edx, 5\l0x00006523      lea rsi, str.incompatible_tabs                         ; 0x16ccf ; \"incompatible tabs\"\l0x0000652a      xor edi, edi\l0x0000652c      call sym.imp.dcgettext\l0x00006531      xor esi, esi                                           ; int errname\l0x00006533      mov edi, 2                                             ; int status\l0x00006538      mov rdx, rax                                           ; char *format\l0x0000653b      xor eax, eax\l0x0000653d      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00006542" [URL="dbg.main/0x00006542", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4c55\l0x00006542      mov edx, 5\l0x00006547      lea rsi, str.multiple_random_sources_specified         ; 0x166d8 ; \"multiple random sources specified\"\l0x0000654e      xor edi, edi\l0x00006550      call sym.imp.dcgettext\l0x00006555      xor esi, esi                                           ; int errname\l0x00006557      mov edi, 2                                             ; int status\l0x0000655c      mov rdx, rax                                           ; char *format\l0x0000655f      xor eax, eax\l0x00006561      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00006566" [URL="dbg.main/0x00006566", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4dc3\l0x00006566      mov edx, 5\l0x0000656b      lea rsi, str.multiple_compress_programs_specified      ; 0x16660 ; \"multiple compress programs specified\"\l0x00006572      xor edi, edi\l0x00006574      call sym.imp.dcgettext\l0x00006579      xor esi, esi                                           ; int errname\l0x0000657b      mov edi, 2                                             ; int status\l0x00006580      mov rdx, rax                                           ; char *format\l0x00006583      xor eax, eax\l0x00006585      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000658a" [URL="dbg.main/0x0000658a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4eb6\l0x0000658a      mov edx, 5\l0x0000658f      lea rsi, str.multiple_output_files_specified           ; 0x166b8 ; \"multiple output files specified\"\l0x00006596      xor edi, edi\l0x00006598      call sym.imp.dcgettext\l0x0000659d      xor esi, esi                                           ; int errname\l0x0000659f      mov edi, 2                                             ; int status\l0x000065a4      mov rdx, rax                                           ; char *format\l0x000065a7      xor eax, eax\l0x000065a9      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000065ae" [URL="dbg.main/0x000065ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5cfc\l0x000065ae      mov rbp, qword [r13 + r12*8]\l0x000065b3      mov edx, 5\l0x000065b8      lea rsi, str.stat_failed                               ; 0x16d9b ; \"stat failed\"\l0x000065bf      jmp 0x563f\l"]
	"0x000065c4" [URL="dbg.main/0x000065c4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x43e2\l0x000065c4      cmp qword [var_18h], 0\l0x000065ca      je 0x45b9\l"]
	"0x000065d0" [URL="dbg.main/0x000065d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000065d0      test r14, r14\l0x000065d3      jne 0x60c3\l"]
	"0x000065d9" [URL="dbg.main/0x000065d9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000065d9      lea rax, [0x00016e2b]                                  ; \"r\"\l0x000065e0      mov rdi, qword [var_18h]                               ; int64_t arg1\l0x000065e5      mov rsi, rax                                           ; int64_t arg2\l0x000065e8      call dbg.stream_open\l0x000065ed      mov rbp, rax\l0x000065f0      test rax, rax\l0x000065f3      je 0x6762\l"]
	"0x000065f9" [URL="dbg.main/0x000065f9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000065f9      lea r12, [var_1b0h]\l0x00006601      mov rdi, r12                                           ; int64_t arg1\l0x00006604      call dbg.readtokens0_init\l0x00006609      mov rsi, r12                                           ; int64_t arg2\l0x0000660c      mov rdi, rbp                                           ; int64_t arg1\l0x0000660f      call dbg.readtokens0\l0x00006614      mov rsi, qword [var_18h]\l0x00006619      test al, al\l0x0000661b      je 0x671d\l"]
	"0x00006621" [URL="dbg.main/0x00006621", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006621      mov rdi, rbp                                           ; int64_t arg1\l0x00006624      call dbg.xfclose\l0x00006629      mov rbx, qword [var_1b0h]\l0x00006631      test rbx, rbx\l0x00006634      je 0x66e4\l"]
	"0x0000663a" [URL="dbg.main/0x0000663a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000663a      mov rdi, r13\l0x0000663d      call fcn.00003720\l0x00006642      mov r13, qword [var_1b8h]\l0x0000664a      jmp 0x6662\l"]
	"0x00006650" [URL="dbg.main/0x00006650", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x666a, 0x6670\l0x00006650      add r14, 1\l0x00006654      cmp byte [rsi], 0\l0x00006657      je 0x66a6\l"]
	"0x00006659" [URL="dbg.main/0x00006659", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006659      cmp rbx, r14\l0x0000665c      je 0x45b9\l"]
	"0x00006662" [URL="dbg.main/0x00006662", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x664a\l0x00006662      mov rsi, qword [r13 + r14*8]\l0x00006667      cmp byte [rsi], 0x2d\l0x0000666a      jne 0x6650\l"]
	"0x0000666c" [URL="dbg.main/0x0000666c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000666c      cmp byte [rsi + 1], 0\l0x00006670      jne 0x6650\l"]
	"0x00006672" [URL="dbg.main/0x00006672", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00006672      mov edi, 4                                             ; int64_t arg1\l0x00006677      call sym.quotearg_style\l0x0000667c      mov edx, 5\l0x00006681      lea rsi, str.when_reading_file_names_from_stdin__no_file_name_of__s_allowed ; 0x16780 ; \"when reading file names from stdin, no file name of %s allowed\"\l0x00006688      xor edi, edi\l0x0000668a      mov r12, rax\l0x0000668d      call sym.imp.dcgettext\l0x00006692      mov rcx, r12\l0x00006695      xor esi, esi                                           ; int errname\l0x00006697      mov edi, 2                                             ; int status\l0x0000669c      mov rdx, rax                                           ; char *format\l0x0000669f      xor eax, eax\l0x000066a1      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000066a6" [URL="dbg.main/0x000066a6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6657\l0x000066a6      mov rdx, qword [var_18h]                               ; int64_t arg3\l0x000066ab      mov esi, 3                                             ; int64_t arg2\l0x000066b0      xor edi, edi                                           ; int64_t arg1\l0x000066b2      call sym.quotearg_n_style_colon\l0x000066b7      mov edx, 5\l0x000066bc      lea rsi, str._s:_lu:_invalid_zero_length_file_name     ; 0x167c0 ; \"%s:%lu: invalid zero-length file name\"\l0x000066c3      xor edi, edi\l0x000066c5      mov r12, rax\l0x000066c8      call sym.imp.dcgettext\l0x000066cd      mov r8, r14\l0x000066d0      mov rcx, r12\l0x000066d3      xor esi, esi                                           ; int errname\l0x000066d5      mov rdx, rax                                           ; char *format\l0x000066d8      mov edi, 2                                             ; int status\l0x000066dd      xor eax, eax\l0x000066df      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000066e4" [URL="dbg.main/0x000066e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x6634\l0x000066e4      mov rsi, qword [var_18h]                               ; int64_t arg2\l0x000066e9      mov edi, 4                                             ; int64_t arg1\l0x000066ee      call sym.quotearg_style\l0x000066f3      mov edx, 5\l0x000066f8      lea rsi, str.no_input_from__s                          ; 0x16d0b ; \"no input from %s\"\l0x000066ff      xor edi, edi\l0x00006701      mov r12, rax\l0x00006704      call sym.imp.dcgettext\l0x00006709      mov rcx, r12\l0x0000670c      xor esi, esi                                           ; int errname\l0x0000670e      mov edi, 2                                             ; int status\l0x00006713      mov rdx, rax                                           ; char *format\l0x00006716      xor eax, eax\l0x00006718      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000671d" [URL="dbg.main/0x0000671d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x661b\l0x0000671d      mov edi, 4                                             ; int64_t arg1\l0x00006722      call sym.quotearg_style\l0x00006727      mov edx, 5\l0x0000672c      lea rsi, str.cannot_read_file_names_from__s            ; 0x16760 ; \"cannot read file names from %s\"\l0x00006733      xor edi, edi\l0x00006735      mov r12, rax\l0x00006738      call sym.imp.dcgettext\l0x0000673d      mov rcx, r12\l0x00006740      xor esi, esi                                           ; int errname\l0x00006742      mov edi, 2                                             ; int status\l0x00006747      mov rdx, rax                                           ; char *format\l0x0000674a      xor eax, eax\l0x0000674c      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00006751" [URL="dbg.main/0x00006751", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x650a\l0x00006751      lea rax, str.getrandom                                 ; 0x16b53 ; \"getrandom\"\l0x00006758      mov qword [stream], rax\l0x0000675d      jmp 0x6510\l"]
	"0x00006762" [URL="dbg.main/0x00006762", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x65f3\l0x00006762      mov rdi, qword [var_18h]                               ; int64_t arg1\l0x00006767      call sym.xfopen.part.0\l"]
	"0x0000676c" [URL="dbg.main/0x0000676c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5553\l0x0000676c      add rdi, 1                                             ; int64_t arg1\l0x00006770      lea rsi, [var_d8h]                                     ; int64_t arg2\l0x00006778      lea rdx, str.invalid_number_after_.                    ; 0x16b9e ; \"invalid number after '.'\" ; int64_t arg3\l0x0000677f      call dbg.parse_field_count\l0x00006784      mov rdi, rax\l0x00006787      jmp 0x5559\l"]
	"0x0000678c" [URL="dbg.main/0x0000678c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e5c\l0x0000678c      call dbg.quote\l0x00006791      mov edx, 5\l0x00006796      lea rsi, str.multi_character_tab__s                    ; 0x16cb8 ; \"multi-character tab %s\"\l0x0000679d      xor edi, edi\l0x0000679f      mov r12, rax\l0x000067a2      call sym.imp.dcgettext\l0x000067a7      mov rcx, r12\l0x000067aa      xor esi, esi                                           ; int errname\l0x000067ac      mov edi, 2                                             ; int status\l0x000067b1      mov rdx, rax                                           ; char *format\l0x000067b4      xor eax, eax\l0x000067b6      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000067bb" [URL="dbg.main/0x000067bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x57c8\l0x000067bb      mov rdi, qword [rsp]                                   ; int64_t arg1\l0x000067bf      call sym.xfopen.part.0\l"]
	"0x000067c4" [URL="dbg.main/0x000067c4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4537\l0x000067c4      lea rdi, [0x00016be4]                                  ; \"cC\" ; int64_t arg1\l0x000067cb      call dbg.incompatible_options\l"]
	"0x000067d0" [URL="dbg.main/0x000067d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x46f2\l0x000067d0      cmp byte [var_8h], 0\l0x000067d5      jne 0x67dc\l"]
	"0x000067d7" [URL="dbg.main/0x000067d7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000067d7      mov byte [var_8h], 0x6f                                ; 'o'\l                                                                       ; [0x6f:1]=0\l"]
	"0x000067dc" [URL="dbg.main/0x000067dc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x46e6, 0x67d5\l0x000067dc      movzx eax, byte [var_8h]\l0x000067e1      lea rdi, obj.opts.7                                    ; 0x1d018 ; \"o --debug\" ; int64_t arg1\l0x000067e8      mov byte [obj.opts.7], al                              ; [0x1d018:1]=111 ; \"o --debug\"\l0x000067ee      call dbg.incompatible_options\l"]
	"0x000067f3" [URL="dbg.main/0x000067f3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4f18, 0x6055\l0x000067f3      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg2\l0x000067fa      lea rsi, str.field_number_is_zero                      ; 0x16c05 ; \"field number is zero\"\l0x00006801      call dbg.badfieldspec\l"]
	"0x00006806" [URL="dbg.main/0x00006806", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x46c5\l0x00006806      mov byte [r8 + 0x37], 0\l0x0000680b      lea r9, [var_3c0h]\l0x00006813      mov rdi, r8                                            ; int64_t arg1\l0x00006816      mov word [r8 + 0x30], 0\l0x0000681d      mov rsi, r9                                            ; int64_t arg2\l0x00006820      call dbg.key_to_opts\l0x00006825      mov rdi, r9                                            ; int64_t arg1\l0x00006828      call dbg.incompatible_options\l"]
	"0x0000682d" [URL="dbg.main/0x0000682d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4f6d\l0x0000682d      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1d1e0:8]=0 ; int64_t arg2\l0x00006834      lea rsi, str.stray_character_in_field_spec             ; 0x16bb7 ; \"stray character in field spec\"\l0x0000683b      call dbg.badfieldspec\l"]
	"0x00006840" [URL="dbg.main/0x00006840", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x539c\l0x00006840      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x00006845" [URL="dbg.main/0x00006845", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x517b\l0x00006845      mov rsi, qword [r13 + 8]                               ; int64_t arg2\l0x00006849      mov edi, 4                                             ; int64_t arg1\l0x0000684e      call sym.quotearg_style\l0x00006853      mov edx, 5\l0x00006858      lea rsi, str.extra_operand__s_not_allowed_with___c     ; 0x16930 ; \"extra operand %s not allowed with -%c\"\l0x0000685f      xor edi, edi\l0x00006861      mov r12, rax\l0x00006864      call sym.imp.dcgettext\l0x00006869      movsx r8d, byte [var_8h]\l0x0000686f      mov rcx, r12\l0x00006872      xor esi, esi                                           ; int errname\l0x00006874      mov rdx, rax                                           ; char *format\l0x00006877      mov edi, 2                                             ; int status\l0x0000687c      xor eax, eax\l0x0000687e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00006883" [URL="dbg.main/0x00006883", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x5187\l0x00006883      movzx eax, byte [var_8h]\l0x00006888      lea rdi, obj.opts.6                                    ; 0x1d010 ; \"oo\" ; int64_t arg1\l0x0000688f      mov byte [obj.opts.6], al                              ; [0x1d010:1]=111 ; \"oo\"\l0x00006895      call dbg.incompatible_options\l"]
	"0x0000689a" [URL="dbg.main/0x0000689a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x51a8\l0x0000689a      mov rdi, r14                                           ; int64_t arg1\l0x0000689d      call sym.xfopen.part.0\l"]
	"0x000068a2" [URL="dbg.main/0x000068a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4e38\l0x000068a2      mov edx, 5\l0x000068a7      lea rsi, str.empty_tab                                 ; 0x16cab ; \"empty tab\"\l0x000068ae      xor edi, edi\l0x000068b0      call sym.imp.dcgettext\l0x000068b5      xor esi, esi                                           ; int errname\l0x000068b7      mov edi, 2                                             ; int status\l0x000068bc      mov rdx, rax                                           ; char *format\l0x000068bf      xor eax, eax\l0x000068c1      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000068c6" [URL="dbg.main/0x000068c6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4bf0\l0x000068c6      mov esi, dword [var_40h]                               ; int64_t arg2\l0x000068ca      mov r8, r9\l0x000068cd      mov rcx, r12                                           ; int64_t arg5\l0x000068d0      mov edx, 0xffffff87                                    ; 4294967175 ; int64_t arg4\l0x000068d5      call sym.xstrtol_fatal\l0x000068da      nop word [rax + rax]\l"]
        "0x00003eb0" -> "0x00004087" [color="#13a10e"];
        "0x00003eb0" -> "0x00003f8d" [color="#c50f1f"];
        "0x00003f8d" -> "0x00004087" [color="#13a10e"];
        "0x00003f8d" -> "0x00003f97" [color="#c50f1f"];
        "0x00003f97" -> "0x00004078" [color="#13a10e"];
        "0x00003f97" -> "0x00003fac" [color="#c50f1f"];
        "0x00003fac" -> "0x00004078" [color="#13a10e"];
        "0x00003fac" -> "0x00003fb6" [color="#c50f1f"];
        "0x00003fb6" -> "0x00004049" [color="#3a96dd"];
        "0x00004000" -> "0x000040a0" [color="#13a10e"];
        "0x00004000" -> "0x0000400a" [color="#c50f1f"];
        "0x0000400a" -> "0x00004023" [color="#3a96dd"];
        "0x00004023" -> "0x000040d4" [color="#13a10e"];
        "0x00004023" -> "0x00004046" [color="#c50f1f"];
        "0x00004046" -> "0x00004049" [color="#3a96dd"];
        "0x00004049" -> "0x00004000" [color="#13a10e"];
        "0x00004049" -> "0x00004062" [color="#c50f1f"];
        "0x00004062" -> "0x00004023" [color="#3a96dd"];
        "0x00004078" -> "0x00003fb6" [color="#3a96dd"];
        "0x00004087" -> "0x00003f97" [color="#3a96dd"];
        "0x000040a0" -> "0x00004046" [color="#3a96dd"];
        "0x000040d4" -> "0x000041aa" [color="#13a10e"];
        "0x000040d4" -> "0x000040df" [color="#c50f1f"];
        "0x000040df" -> "0x00004108" [color="#3a96dd"];
        "0x00004108" -> "0x00004171" [color="#13a10e"];
        "0x00004108" -> "0x00004138" [color="#c50f1f"];
        "0x00004138" -> "0x00004150" [color="#3a96dd"];
        "0x00004150" -> "0x00004168" [color="#13a10e"];
        "0x00004150" -> "0x0000415a" [color="#c50f1f"];
        "0x0000415a" -> "0x00004168" [color="#3a96dd"];
        "0x00004168" -> "0x00004150" [color="#13a10e"];
        "0x00004168" -> "0x00004171" [color="#c50f1f"];
        "0x00004171" -> "0x00004108" [color="#13a10e"];
        "0x00004171" -> "0x00004184" [color="#c50f1f"];
        "0x00004184" -> "0x000041aa" [color="#3a96dd"];
        "0x000041aa" -> "0x000041f0" [color="#3a96dd"];
        "0x000041e8" -> "0x000041f0" [color="#3a96dd"];
        "0x000041f0" -> "0x00004211" [color="#13a10e"];
        "0x000041f0" -> "0x00004207" [color="#c50f1f"];
        "0x00004207" -> "0x00004211" [color="#3a96dd"];
        "0x00004211" -> "0x000041e8" [color="#13a10e"];
        "0x00004211" -> "0x0000421d" [color="#c50f1f"];
        "0x0000421d" -> "0x000042d5" [color="#3a96dd"];
        "0x000042c8" -> "0x000042f4" [color="#13a10e"];
        "0x000042c8" -> "0x000042cd" [color="#c50f1f"];
        "0x000042cd" -> "0x000042d5" [color="#3a96dd"];
        "0x000042d5" -> "0x000042c8" [color="#13a10e"];
        "0x000042d5" -> "0x000042e3" [color="#c50f1f"];
        "0x000042e3" -> "0x000042cd" [color="#13a10e"];
        "0x000042e3" -> "0x000042f4" [color="#c50f1f"];
        "0x000042f4" -> "0x000043ff" [color="#3a96dd"];
        "0x000043a0" -> "0x00004430" [color="#13a10e"];
        "0x000043a0" -> "0x000043a9" [color="#c50f1f"];
        "0x000043a9" -> "0x00004430" [color="#13a10e"];
        "0x000043a9" -> "0x000043b3" [color="#c50f1f"];
        "0x000043b3" -> "0x000043e0" [color="#13a10e"];
        "0x000043b3" -> "0x000043c1" [color="#c50f1f"];
        "0x000043c1" -> "0x000043e0" [color="#13a10e"];
        "0x000043c1" -> "0x000043c8" [color="#c50f1f"];
        "0x000043c8" -> "0x000045a8" [color="#13a10e"];
        "0x000043c8" -> "0x000043d0" [color="#c50f1f"];
        "0x000043d0" -> "0x00004420" [color="#13a10e"];
        "0x000043d0" -> "0x000043dd" [color="#c50f1f"];
        "0x000043dd" -> "0x000043e0" [color="#3a96dd"];
        "0x000043e0" -> "0x000065c4" [color="#13a10e"];
        "0x000043e0" -> "0x000043e8" [color="#c50f1f"];
        "0x000043e8" -> "0x000043ff" [color="#3a96dd"];
        "0x000043ff" -> "0x000043a0" [color="#13a10e"];
        "0x000043ff" -> "0x00004410" [color="#c50f1f"];
        "0x00004410" -> "0x000043e0" [color="#3a96dd"];
        "0x00004420" -> "0x000043e0" [color="#13a10e"];
        "0x00004420" -> "0x00004426" [color="#c50f1f"];
        "0x00004426" -> "0x00004b99" [color="#13a10e"];
        "0x00004426" -> "0x00004430" [color="#c50f1f"];
        "0x00004430" -> "0x00004410" [color="#13a10e"];
        "0x00004430" -> "0x00004454" [color="#c50f1f"];
        "0x00004454" -> "0x00006128" [color="#13a10e"];
        "0x00004454" -> "0x0000445f" [color="#c50f1f"];
        "0x0000445f" -> "0x00004547" [color="#13a10e"];
        "0x0000445f" -> "0x00004467" [color="#c50f1f"];
        "0x00004467" -> "0x00006128" [color="#13a10e"];
        "0x00004467" -> "0x00004472" [color="#c50f1f"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00005042" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x0000452b" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00004f93" [color="#3a96dd"];
        "0x00004472" -> "0x00004f82" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x0000452b" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00004ec6" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000055ac" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00004e91" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044bb" [color="#3a96dd"];
        "0x00004472" -> "0x00004e85" [color="#3a96dd"];
        "0x00004472" -> "0x00004e2c" [color="#3a96dd"];
        "0x00004472" -> "0x00004e20" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00004de1" [color="#3a96dd"];
        "0x00004472" -> "0x00004dd5" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x00006128" [color="#3a96dd"];
        "0x00004472" -> "0x000044ea" [color="#3a96dd"];
        "0x00004472" -> "0x00004d9c" [color="#3a96dd"];
        "0x00004472" -> "0x00004d90" [color="#3a96dd"];
        "0x00004472" -> "0x00004d7f" [color="#3a96dd"];
        "0x00004472" -> "0x00004c65" [color="#3a96dd"];
        "0x00004472" -> "0x00004c30" [color="#3a96dd"];
        "0x00004472" -> "0x00004485" [color="#3a96dd"];
        "0x00004472" -> "0x00004ba9" [color="#3a96dd"];
        "0x00004485" -> "0x000044bb" [color="#3a96dd"];
        "0x000044bb" -> "0x000043ff" [color="#3a96dd"];
        "0x000044ea" -> "0x0000452b" [color="#13a10e"];
        "0x000044ea" -> "0x000044fc" [color="#c50f1f"];
        "0x000044fc" -> "0x0000452b" [color="#3a96dd"];
        "0x0000452b" -> "0x0000453d" [color="#13a10e"];
        "0x0000452b" -> "0x00004534" [color="#c50f1f"];
        "0x00004534" -> "0x000067c4" [color="#13a10e"];
        "0x00004534" -> "0x0000453d" [color="#c50f1f"];
        "0x0000453d" -> "0x000043ff" [color="#3a96dd"];
        "0x00004547" -> "0x00004590" [color="#13a10e"];
        "0x00004547" -> "0x0000454e" [color="#c50f1f"];
        "0x00004590" -> "0x00006128" [color="#13a10e"];
        "0x00004590" -> "0x0000459b" [color="#c50f1f"];
        "0x000045a8" -> "0x000060c3" [color="#13a10e"];
        "0x000045a8" -> "0x000045b4" [color="#c50f1f"];
        "0x000045b4" -> "0x000045b9" [color="#3a96dd"];
        "0x000045b9" -> "0x00005aa4" [color="#13a10e"];
        "0x000045b9" -> "0x000045c9" [color="#c50f1f"];
        "0x000045c9" -> "0x00004668" [color="#3a96dd"];
        "0x000045d8" -> "0x00004678" [color="#13a10e"];
        "0x000045d8" -> "0x000045e2" [color="#c50f1f"];
        "0x000045e2" -> "0x00004687" [color="#13a10e"];
        "0x000045e2" -> "0x00004668" [color="#c50f1f"];
        "0x00004668" -> "0x000045d8" [color="#13a10e"];
        "0x00004668" -> "0x00004678" [color="#c50f1f"];
        "0x00004678" -> "0x00004668" [color="#13a10e"];
        "0x00004678" -> "0x00004687" [color="#c50f1f"];
        "0x00004687" -> "0x00004690" [color="#3a96dd"];
        "0x00004690" -> "0x00006806" [color="#13a10e"];
        "0x00004690" -> "0x000046cb" [color="#c50f1f"];
        "0x000046cb" -> "0x00004690" [color="#13a10e"];
        "0x000046cb" -> "0x000046d4" [color="#c50f1f"];
        "0x000046d4" -> "0x0000511b" [color="#13a10e"];
        "0x000046d4" -> "0x000046e1" [color="#c50f1f"];
        "0x000046e1" -> "0x000067dc" [color="#13a10e"];
        "0x000046e1" -> "0x000046ec" [color="#c50f1f"];
        "0x000046ec" -> "0x000067d0" [color="#13a10e"];
        "0x000046ec" -> "0x000046f8" [color="#c50f1f"];
        "0x000046f8" -> "0x000053b4" [color="#13a10e"];
        "0x000046f8" -> "0x00004704" [color="#c50f1f"];
        "0x00004704" -> "0x000053b4" [color="#13a10e"];
        "0x00004704" -> "0x0000471e" [color="#c50f1f"];
        "0x0000471e" -> "0x00005b5c" [color="#13a10e"];
        "0x0000471e" -> "0x0000472b" [color="#c50f1f"];
        "0x0000472b" -> "0x00004766" [color="#3a96dd"];
        "0x00004766" -> "0x00005078" [color="#13a10e"];
        "0x00004766" -> "0x00004792" [color="#c50f1f"];
        "0x00004792" -> "0x0000495f" [color="#3a96dd"];
        "0x00004828" -> "0x00004b23" [color="#13a10e"];
        "0x00004828" -> "0x00004833" [color="#c50f1f"];
        "0x00004833" -> "0x000055c0" [color="#13a10e"];
        "0x00004833" -> "0x0000483b" [color="#c50f1f"];
        "0x0000483b" -> "0x00004860" [color="#13a10e"];
        "0x0000483b" -> "0x00004840" [color="#c50f1f"];
        "0x00004840" -> "0x00005a79" [color="#13a10e"];
        "0x00004840" -> "0x0000485a" [color="#c50f1f"];
        "0x0000485a" -> "0x00004860" [color="#3a96dd"];
        "0x00004860" -> "0x00004877" [color="#13a10e"];
        "0x00004860" -> "0x0000486d" [color="#c50f1f"];
        "0x0000486d" -> "0x000055d0" [color="#13a10e"];
        "0x0000486d" -> "0x00004877" [color="#c50f1f"];
        "0x00004877" -> "0x0000488e" [color="#13a10e"];
        "0x00004877" -> "0x00004884" [color="#c50f1f"];
        "0x00004884" -> "0x000055e1" [color="#13a10e"];
        "0x00004884" -> "0x0000488e" [color="#c50f1f"];
        "0x0000488e" -> "0x00005060" [color="#13a10e"];
        "0x0000488e" -> "0x0000495f" [color="#c50f1f"];
        "0x0000495f" -> "0x00004abb" [color="#13a10e"];
        "0x0000495f" -> "0x00004969" [color="#c50f1f"];
        "0x00004969" -> "0x00004a6e" [color="#13a10e"];
        "0x00004969" -> "0x00004a06" [color="#c50f1f"];
        "0x00004a06" -> "0x00004a6e" [color="#3a96dd"];
        "0x00004a6e" -> "0x00004abb" [color="#3a96dd"];
        "0x00004abb" -> "0x00004b01" [color="#13a10e"];
        "0x00004abb" -> "0x00004acd" [color="#c50f1f"];
        "0x00004acd" -> "0x00004b01" [color="#13a10e"];
        "0x00004acd" -> "0x00004ad2" [color="#c50f1f"];
        "0x00004ad2" -> "0x00004b01" [color="#3a96dd"];
        "0x00004b01" -> "0x00004b1a" [color="#13a10e"];
        "0x00004b01" -> "0x00004b16" [color="#c50f1f"];
        "0x00004b16" -> "0x00004b1a" [color="#3a96dd"];
        "0x00004b1a" -> "0x00004828" [color="#13a10e"];
        "0x00004b1a" -> "0x00004b23" [color="#c50f1f"];
        "0x00004b23" -> "0x000055c0" [color="#13a10e"];
        "0x00004b23" -> "0x00004b2b" [color="#c50f1f"];
        "0x00004b2b" -> "0x0000483b" [color="#13a10e"];
        "0x00004b2b" -> "0x00004b3b" [color="#c50f1f"];
        "0x00004b3b" -> "0x00004b4c" [color="#13a10e"];
        "0x00004b3b" -> "0x00004b41" [color="#c50f1f"];
        "0x00004b41" -> "0x00004b61" [color="#13a10e"];
        "0x00004b41" -> "0x00004b45" [color="#c50f1f"];
        "0x00004b45" -> "0x00004b61" [color="#13a10e"];
        "0x00004b45" -> "0x00004b4c" [color="#c50f1f"];
        "0x00004b4c" -> "0x0000483b" [color="#13a10e"];
        "0x00004b4c" -> "0x00004b56" [color="#c50f1f"];
        "0x00004b56" -> "0x0000483b" [color="#13a10e"];
        "0x00004b56" -> "0x00004b61" [color="#c50f1f"];
        "0x00004b61" -> "0x0000483b" [color="#3a96dd"];
        "0x00004b99" -> "0x00004430" [color="#13a10e"];
        "0x00004b99" -> "0x00004ba4" [color="#c50f1f"];
        "0x00004ba4" -> "0x000043e0" [color="#3a96dd"];
        "0x00004ba9" -> "0x000062e4" [color="#13a10e"];
        "0x00004ba9" -> "0x00004be9" [color="#c50f1f"];
        "0x00004be9" -> "0x000068c6" [color="#13a10e"];
        "0x00004be9" -> "0x00004bf6" [color="#c50f1f"];
        "0x00004bf6" -> "0x000043ff" [color="#13a10e"];
        "0x00004bf6" -> "0x00004c0c" [color="#c50f1f"];
        "0x00004c0c" -> "0x00004c30" [color="#3a96dd"];
        "0x00004c30" -> "0x00004c5b" [color="#13a10e"];
        "0x00004c30" -> "0x00004c41" [color="#c50f1f"];
        "0x00004c41" -> "0x00006542" [color="#13a10e"];
        "0x00004c41" -> "0x00004c5b" [color="#c50f1f"];
        "0x00004c5b" -> "0x000043ff" [color="#3a96dd"];
        "0x00004c65" -> "0x00004ccf" [color="#13a10e"];
        "0x00004c65" -> "0x00004cc4" [color="#c50f1f"];
        "0x00004cc4" -> "0x00004ccf" [color="#3a96dd"];
        "0x00004ccf" -> "0x00005418" [color="#13a10e"];
        "0x00004ccf" -> "0x00004cd8" [color="#c50f1f"];
        "0x00004cd8" -> "0x00004cff" [color="#13a10e"];
        "0x00004cd8" -> "0x00004ced" [color="#c50f1f"];
        "0x00004ced" -> "0x0000644c" [color="#13a10e"];
        "0x00004ced" -> "0x00004cf6" [color="#c50f1f"];
        "0x00004cf6" -> "0x000043ff" [color="#13a10e"];
        "0x00004cf6" -> "0x00004cff" [color="#c50f1f"];
        "0x00004cff" -> "0x00004d7f" [color="#3a96dd"];
        "0x00004d7f" -> "0x000043ff" [color="#3a96dd"];
        "0x00004d90" -> "0x000043ff" [color="#3a96dd"];
        "0x00004d9c" -> "0x00004dc9" [color="#13a10e"];
        "0x00004d9c" -> "0x00004daf" [color="#c50f1f"];
        "0x00004daf" -> "0x00006566" [color="#13a10e"];
        "0x00004daf" -> "0x00004dc9" [color="#c50f1f"];
        "0x00004dc9" -> "0x000043ff" [color="#3a96dd"];
        "0x00004dd5" -> "0x000043ff" [color="#3a96dd"];
        "0x00004de1" -> "0x000043ff" [color="#13a10e"];
        "0x00004de1" -> "0x00004dfd" [color="#c50f1f"];
        "0x00004dfd" -> "0x000061eb" [color="#13a10e"];
        "0x00004dfd" -> "0x00004e0e" [color="#c50f1f"];
        "0x00004e0e" -> "0x000043ff" [color="#3a96dd"];
        "0x00004e20" -> "0x000043ff" [color="#3a96dd"];
        "0x00004e2c" -> "0x000068a2" [color="#13a10e"];
        "0x00004e2c" -> "0x00004e3e" [color="#c50f1f"];
        "0x00004e3e" -> "0x00004e64" [color="#13a10e"];
        "0x00004e3e" -> "0x00004e44" [color="#c50f1f"];
        "0x00004e44" -> "0x0000678c" [color="#13a10e"];
        "0x00004e44" -> "0x00004e62" [color="#c50f1f"];
        "0x00004e62" -> "0x00004e64" [color="#3a96dd"];
        "0x00004e64" -> "0x00004e7a" [color="#13a10e"];
        "0x00004e64" -> "0x00004e72" [color="#c50f1f"];
        "0x00004e72" -> "0x0000651e" [color="#13a10e"];
        "0x00004e72" -> "0x00004e7a" [color="#c50f1f"];
        "0x00004e7a" -> "0x000043ff" [color="#3a96dd"];
        "0x00004e85" -> "0x000043ff" [color="#3a96dd"];
        "0x00004e91" -> "0x00004ebc" [color="#13a10e"];
        "0x00004e91" -> "0x00004ea2" [color="#c50f1f"];
        "0x00004ea2" -> "0x0000658a" [color="#13a10e"];
        "0x00004ea2" -> "0x00004ebc" [color="#c50f1f"];
        "0x00004ebc" -> "0x000043ff" [color="#3a96dd"];
        "0x00004ec6" -> "0x000067f3" [color="#13a10e"];
        "0x00004ec6" -> "0x00004f1e" [color="#c50f1f"];
        "0x00004f1e" -> "0x00006078" [color="#13a10e"];
        "0x00004f1e" -> "0x00004f27" [color="#c50f1f"];
        "0x00004f27" -> "0x00005439" [color="#13a10e"];
        "0x00004f27" -> "0x00004f3d" [color="#c50f1f"];
        "0x00004f3d" -> "0x00006023" [color="#13a10e"];
        "0x00004f3d" -> "0x00004f52" [color="#c50f1f"];
        "0x00004f52" -> "0x00004f6a" [color="#3a96dd"];
        "0x00004f6a" -> "0x0000682d" [color="#13a10e"];
        "0x00004f6a" -> "0x00004f73" [color="#c50f1f"];
        "0x00004f73" -> "0x000043ff" [color="#3a96dd"];
        "0x00004f82" -> "0x000043ff" [color="#3a96dd"];
        "0x00004f93" -> "0x000053e1" [color="#13a10e"];
        "0x00004f93" -> "0x00004fdd" [color="#c50f1f"];
        "0x00004fdd" -> "0x00005018" [color="#13a10e"];
        "0x00004fdd" -> "0x00004ff9" [color="#c50f1f"];
        "0x00004ff9" -> "0x000061e1" [color="#13a10e"];
        "0x00004ff9" -> "0x0000500c" [color="#c50f1f"];
        "0x0000500c" -> "0x00005018" [color="#3a96dd"];
        "0x00005018" -> "0x000043ff" [color="#13a10e"];
        "0x00005018" -> "0x00005025" [color="#c50f1f"];
        "0x00005025" -> "0x000043ff" [color="#3a96dd"];
        "0x00005042" -> "0x0000544a" [color="#13a10e"];
        "0x00005042" -> "0x00005052" [color="#c50f1f"];
        "0x00005052" -> "0x000043ff" [color="#3a96dd"];
        "0x00005060" -> "0x00005078" [color="#3a96dd"];
        "0x00005078" -> "0x00005ad2" [color="#13a10e"];
        "0x00005078" -> "0x00005092" [color="#c50f1f"];
        "0x00005092" -> "0x000050ac" [color="#13a10e"];
        "0x00005092" -> "0x0000509b" [color="#c50f1f"];
        "0x0000509b" -> "0x000050ac" [color="#13a10e"];
        "0x0000509b" -> "0x000050a4" [color="#c50f1f"];
        "0x000050a4" -> "0x000050ac" [color="#3a96dd"];
        "0x000050ac" -> "0x0000511b" [color="#13a10e"];
        "0x000050ac" -> "0x00005105" [color="#c50f1f"];
        "0x00005105" -> "0x0000511b" [color="#13a10e"];
        "0x00005105" -> "0x0000510e" [color="#c50f1f"];
        "0x0000510e" -> "0x00006146" [color="#13a10e"];
        "0x0000510e" -> "0x0000511b" [color="#c50f1f"];
        "0x0000511b" -> "0x00005673" [color="#13a10e"];
        "0x0000511b" -> "0x00005131" [color="#c50f1f"];
        "0x00005131" -> "0x00005651" [color="#13a10e"];
        "0x00005131" -> "0x0000513f" [color="#c50f1f"];
        "0x0000513f" -> "0x000056da" [color="#13a10e"];
        "0x0000513f" -> "0x00005148" [color="#c50f1f"];
        "0x00005148" -> "0x0000516c" [color="#13a10e"];
        "0x00005148" -> "0x00005154" [color="#c50f1f"];
        "0x00005154" -> "0x0000516c" [color="#3a96dd"];
        "0x0000516c" -> "0x000055f2" [color="#13a10e"];
        "0x0000516c" -> "0x00005177" [color="#c50f1f"];
        "0x00005177" -> "0x00006845" [color="#13a10e"];
        "0x00005177" -> "0x00005181" [color="#c50f1f"];
        "0x00005181" -> "0x00006883" [color="#13a10e"];
        "0x00005181" -> "0x0000518d" [color="#c50f1f"];
        "0x0000518d" -> "0x0000689a" [color="#13a10e"];
        "0x0000518d" -> "0x000051ae" [color="#c50f1f"];
        "0x000051ae" -> "0x0000521b" [color="#3a96dd"];
        "0x0000521b" -> "0x000062f2" [color="#13a10e"];
        "0x0000521b" -> "0x00005235" [color="#c50f1f"];
        "0x00005235" -> "0x00005333" [color="#13a10e"];
        "0x00005235" -> "0x00005269" [color="#c50f1f"];
        "0x00005269" -> "0x0000528f" [color="#3a96dd"];
        "0x00005278" -> "0x00005351" [color="#13a10e"];
        "0x00005278" -> "0x0000528f" [color="#c50f1f"];
        "0x0000528f" -> "0x00005278" [color="#13a10e"];
        "0x0000528f" -> "0x00005297" [color="#c50f1f"];
        "0x00005297" -> "0x00005305" [color="#13a10e"];
        "0x00005297" -> "0x000052aa" [color="#c50f1f"];
        "0x000052aa" -> "0x0000521b" [color="#13a10e"];
        "0x000052aa" -> "0x000052d6" [color="#c50f1f"];
        "0x000052d6" -> "0x0000521b" [color="#3a96dd"];
        "0x00005300" -> "0x0000530d" [color="#13a10e"];
        "0x00005300" -> "0x00005305" [color="#c50f1f"];
        "0x00005305" -> "0x00005300" [color="#13a10e"];
        "0x00005305" -> "0x0000530a" [color="#c50f1f"];
        "0x0000530a" -> "0x0000530d" [color="#3a96dd"];
        "0x0000530d" -> "0x000052aa" [color="#3a96dd"];
        "0x00005333" -> "0x00005269" [color="#13a10e"];
        "0x00005333" -> "0x0000534d" [color="#c50f1f"];
        "0x0000534d" -> "0x00005351" [color="#3a96dd"];
        "0x00005351" -> "0x00005f1a" [color="#13a10e"];
        "0x00005351" -> "0x0000535e" [color="#c50f1f"];
        "0x0000535e" -> "0x0000538b" [color="#3a96dd"];
        "0x0000538b" -> "0x00006840" [color="#13a10e"];
        "0x0000538b" -> "0x000053a2" [color="#c50f1f"];
        "0x000053b4" -> "0x0000471e" [color="#3a96dd"];
        "0x000053e1" -> "0x00005404" [color="#13a10e"];
        "0x000053e1" -> "0x000053e6" [color="#c50f1f"];
        "0x000053e6" -> "0x00005404" [color="#13a10e"];
        "0x000053e6" -> "0x000053fa" [color="#c50f1f"];
        "0x000053fa" -> "0x000062fc" [color="#13a10e"];
        "0x000053fa" -> "0x00005404" [color="#c50f1f"];
        "0x00005404" -> "0x00005418" [color="#3a96dd"];
        "0x00005418" -> "0x00004cff" [color="#13a10e"];
        "0x00005418" -> "0x00005422" [color="#c50f1f"];
        "0x00005422" -> "0x00005439" [color="#3a96dd"];
        "0x00005439" -> "0x00004f3d" [color="#3a96dd"];
        "0x0000544a" -> "0x000062b2" [color="#13a10e"];
        "0x0000544a" -> "0x00005459" [color="#c50f1f"];
        "0x00005459" -> "0x000061f4" [color="#13a10e"];
        "0x00005459" -> "0x0000546f" [color="#c50f1f"];
        "0x0000546f" -> "0x00005052" [color="#13a10e"];
        "0x0000546f" -> "0x00005486" [color="#c50f1f"];
        "0x00005486" -> "0x00006318" [color="#13a10e"];
        "0x00005486" -> "0x000054c2" [color="#c50f1f"];
        "0x000054c2" -> "0x000063ad" [color="#13a10e"];
        "0x000054c2" -> "0x000054cb" [color="#c50f1f"];
        "0x000054cb" -> "0x000054f2" [color="#13a10e"];
        "0x000054cb" -> "0x000054dd" [color="#c50f1f"];
        "0x000054dd" -> "0x000054e9" [color="#3a96dd"];
        "0x000054e9" -> "0x00006336" [color="#13a10e"];
        "0x000054e9" -> "0x000054f2" [color="#c50f1f"];
        "0x000054f2" -> "0x00006336" [color="#13a10e"];
        "0x000054f2" -> "0x00005507" [color="#c50f1f"];
        "0x00005507" -> "0x00005595" [color="#13a10e"];
        "0x00005507" -> "0x00005512" [color="#c50f1f"];
        "0x00005512" -> "0x0000641c" [color="#13a10e"];
        "0x00005512" -> "0x00005550" [color="#c50f1f"];
        "0x00005550" -> "0x0000676c" [color="#13a10e"];
        "0x00005550" -> "0x00005559" [color="#c50f1f"];
        "0x00005559" -> "0x0000557d" [color="#13a10e"];
        "0x00005559" -> "0x00005564" [color="#c50f1f"];
        "0x00005564" -> "0x0000557d" [color="#13a10e"];
        "0x00005564" -> "0x00005571" [color="#c50f1f"];
        "0x00005571" -> "0x0000557d" [color="#3a96dd"];
        "0x0000557d" -> "0x0000643b" [color="#13a10e"];
        "0x0000557d" -> "0x00005595" [color="#c50f1f"];
        "0x00005595" -> "0x000043ff" [color="#3a96dd"];
        "0x000055ac" -> "0x000043ff" [color="#3a96dd"];
        "0x000055c0" -> "0x00004860" [color="#13a10e"];
        "0x000055c0" -> "0x000055cb" [color="#c50f1f"];
        "0x000055cb" -> "0x0000483b" [color="#3a96dd"];
        "0x000055d0" -> "0x00004877" [color="#3a96dd"];
        "0x000055e1" -> "0x0000488e" [color="#3a96dd"];
        "0x000055f2" -> "0x0000561a" [color="#3a96dd"];
        "0x00005600" -> "0x00005622" [color="#13a10e"];
        "0x00005600" -> "0x00005606" [color="#c50f1f"];
        "0x00005606" -> "0x00005705" [color="#13a10e"];
        "0x00005606" -> "0x00005617" [color="#c50f1f"];
        "0x00005617" -> "0x0000561a" [color="#3a96dd"];
        "0x0000561a" -> "0x00005600" [color="#13a10e"];
        "0x0000561a" -> "0x00005622" [color="#c50f1f"];
        "0x00005622" -> "0x00005606" [color="#13a10e"];
        "0x00005622" -> "0x00005630" [color="#c50f1f"];
        "0x00005630" -> "0x0000563f" [color="#3a96dd"];
        "0x0000563f" -> "0x00005651" [color="#3a96dd"];
        "0x00005651" -> "0x00006004" [color="#13a10e"];
        "0x00005651" -> "0x00005669" [color="#c50f1f"];
        "0x00005669" -> "0x0000513f" [color="#3a96dd"];
        "0x00005673" -> "0x00006504" [color="#13a10e"];
        "0x00005673" -> "0x0000568e" [color="#c50f1f"];
        "0x0000568e" -> "0x000064e4" [color="#13a10e"];
        "0x0000568e" -> "0x000056b6" [color="#c50f1f"];
        "0x000056b6" -> "0x00005131" [color="#3a96dd"];
        "0x000056da" -> "0x00005148" [color="#3a96dd"];
        "0x00005705" -> "0x0000573c" [color="#13a10e"];
        "0x00005705" -> "0x0000570f" [color="#c50f1f"];
        "0x0000570f" -> "0x000064c4" [color="#13a10e"];
        "0x0000570f" -> "0x0000572d" [color="#c50f1f"];
        "0x0000572d" -> "0x0000573c" [color="#13a10e"];
        "0x0000572d" -> "0x00005732" [color="#c50f1f"];
        "0x00005732" -> "0x0000573c" [color="#3a96dd"];
        "0x0000573c" -> "0x00005fc2" [color="#13a10e"];
        "0x0000573c" -> "0x0000574a" [color="#c50f1f"];
        "0x0000574a" -> "0x0000622d" [color="#13a10e"];
        "0x0000574a" -> "0x00005756" [color="#c50f1f"];
        "0x00005756" -> "0x000067bb" [color="#13a10e"];
        "0x00005756" -> "0x000057ce" [color="#c50f1f"];
        "0x000057ce" -> "0x00005ef1" [color="#13a10e"];
        "0x000057ce" -> "0x000057e3" [color="#c50f1f"];
        "0x000057e3" -> "0x00005c4f" [color="#13a10e"];
        "0x000057e3" -> "0x00005801" [color="#c50f1f"];
        "0x00005801" -> "0x0000596a" [color="#3a96dd"];
        "0x00005830" -> "0x00005a60" [color="#13a10e"];
        "0x00005830" -> "0x0000586b" [color="#c50f1f"];
        "0x0000596a" -> "0x00005bb0" [color="#13a10e"];
        "0x0000596a" -> "0x00005983" [color="#c50f1f"];
        "0x00005983" -> "0x00005830" [color="#13a10e"];
        "0x00005983" -> "0x0000599b" [color="#c50f1f"];
        "0x0000599b" -> "0x000059ea" [color="#13a10e"];
        "0x0000599b" -> "0x000059a3" [color="#c50f1f"];
        "0x00005a79" -> "0x00004860" [color="#3a96dd"];
        "0x00005aa4" -> "0x00005b89" [color="#13a10e"];
        "0x00005aa4" -> "0x00005ab9" [color="#c50f1f"];
        "0x00005ab9" -> "0x00006010" [color="#13a10e"];
        "0x00005ab9" -> "0x00005ac6" [color="#c50f1f"];
        "0x00005ac6" -> "0x000046e1" [color="#3a96dd"];
        "0x00005ad2" -> "0x0000511b" [color="#13a10e"];
        "0x00005ad2" -> "0x00005adb" [color="#c50f1f"];
        "0x00005adb" -> "0x0000617a" [color="#13a10e"];
        "0x00005adb" -> "0x00005ae8" [color="#c50f1f"];
        "0x00005ae8" -> "0x0000510e" [color="#13a10e"];
        "0x00005ae8" -> "0x00005af5" [color="#c50f1f"];
        "0x00005af5" -> "0x0000510e" [color="#13a10e"];
        "0x00005af5" -> "0x00005b03" [color="#c50f1f"];
        "0x00005b03" -> "0x00005105" [color="#3a96dd"];
        "0x00005b5c" -> "0x00004766" [color="#3a96dd"];
        "0x00005b89" -> "0x00004690" [color="#13a10e"];
        "0x00005b89" -> "0x00005bab" [color="#c50f1f"];
        "0x00005bab" -> "0x000046d4" [color="#3a96dd"];
        "0x00005bb0" -> "0x00006250" [color="#13a10e"];
        "0x00005bb0" -> "0x00005bd4" [color="#c50f1f"];
        "0x00005bd4" -> "0x000057ab" [color="#3a96dd"];
        "0x00005c0c" -> "0x00005c1c" [color="#13a10e"];
        "0x00005c0c" -> "0x00005c15" [color="#c50f1f"];
        "0x00005c15" -> "0x0000538b" [color="#3a96dd"];
        "0x00005c1c" -> "0x00005c15" [color="#13a10e"];
        "0x00005c1c" -> "0x00005c2d" [color="#c50f1f"];
        "0x00005c2d" -> "0x00005c4f" [color="#3a96dd"];
        "0x00005c4f" -> "0x00005cca" [color="#3a96dd"];
        "0x00005c63" -> "0x00005ecc" [color="#13a10e"];
        "0x00005c63" -> "0x00005c73" [color="#c50f1f"];
        "0x00005c73" -> "0x00005d46" [color="#13a10e"];
        "0x00005c73" -> "0x00005c86" [color="#c50f1f"];
        "0x00005c86" -> "0x00005ecc" [color="#13a10e"];
        "0x00005c86" -> "0x00005ca9" [color="#c50f1f"];
        "0x00005cca" -> "0x00005eae" [color="#13a10e"];
        "0x00005cca" -> "0x00005cd3" [color="#c50f1f"];
        "0x00005cd3" -> "0x00005e9f" [color="#13a10e"];
        "0x00005cd3" -> "0x00005ce4" [color="#c50f1f"];
        "0x00005ce4" -> "0x00005e9f" [color="#13a10e"];
        "0x00005ce4" -> "0x00005cee" [color="#c50f1f"];
        "0x00005cee" -> "0x00005cfa" [color="#3a96dd"];
        "0x00005cfa" -> "0x000065ae" [color="#13a10e"];
        "0x00005cfa" -> "0x00005d02" [color="#c50f1f"];
        "0x00005d02" -> "0x00005c63" [color="#13a10e"];
        "0x00005d02" -> "0x00005d19" [color="#c50f1f"];
        "0x00005d19" -> "0x00005c86" [color="#13a10e"];
        "0x00005d19" -> "0x00005d2f" [color="#c50f1f"];
        "0x00005d2f" -> "0x00005c86" [color="#13a10e"];
        "0x00005d2f" -> "0x00005d46" [color="#c50f1f"];
        "0x00005e9f" -> "0x00005cfa" [color="#3a96dd"];
        "0x00005eae" -> "0x00005cfa" [color="#3a96dd"];
        "0x00005ecc" -> "0x00005801" [color="#3a96dd"];
        "0x00005ef1" -> "0x00005f00" [color="#3a96dd"];
        "0x00005f00" -> "0x00005f00" [color="#13a10e"];
        "0x00005f00" -> "0x00005f0c" [color="#c50f1f"];
        "0x00005f0c" -> "0x000057e3" [color="#3a96dd"];
        "0x00005f1a" -> "0x0000535e" [color="#3a96dd"];
        "0x00005fc2" -> "0x00005fd4" [color="#3a96dd"];
        "0x00005fd4" -> "0x00005fd4" [color="#13a10e"];
        "0x00005fd4" -> "0x00005ff0" [color="#c50f1f"];
        "0x00005ff0" -> "0x00005c0c" [color="#3a96dd"];
        "0x00006004" -> "0x00005669" [color="#3a96dd"];
        "0x00006010" -> "0x00005131" [color="#3a96dd"];
        "0x00006023" -> "0x000067f3" [color="#13a10e"];
        "0x00006023" -> "0x0000605b" [color="#c50f1f"];
        "0x0000605b" -> "0x0000620d" [color="#13a10e"];
        "0x0000605b" -> "0x00006064" [color="#c50f1f"];
        "0x00006064" -> "0x00004f6a" [color="#3a96dd"];
        "0x00006078" -> "0x00004f27" [color="#13a10e"];
        "0x00006078" -> "0x000060b0" [color="#c50f1f"];
        "0x000060b0" -> "0x000060c3" [color="#3a96dd"];
        "0x000060c3" -> "0x00006128" [color="#3a96dd"];
        "0x00006146" -> "0x0000511b" [color="#13a10e"];
        "0x00006146" -> "0x00006154" [color="#c50f1f"];
        "0x00006154" -> "0x0000511b" [color="#3a96dd"];
        "0x0000617a" -> "0x0000511b" [color="#13a10e"];
        "0x0000617a" -> "0x00006188" [color="#c50f1f"];
        "0x00006188" -> "0x00005105" [color="#3a96dd"];
        "0x000061e1" -> "0x00005404" [color="#3a96dd"];
        "0x000061eb" -> "0x00004dfd" [color="#3a96dd"];
        "0x000061f4" -> "0x0000546f" [color="#3a96dd"];
        "0x0000620d" -> "0x00006064" [color="#3a96dd"];
        "0x0000622d" -> "0x00005756" [color="#3a96dd"];
        "0x00006250" -> "0x0000628b" [color="#3a96dd"];
        "0x000062b2" -> "0x0000546f" [color="#3a96dd"];
        "0x000062e4" -> "0x000043ff" [color="#3a96dd"];
        "0x000062f2" -> "0x0000535e" [color="#3a96dd"];
        "0x000062fc" -> "0x00006342" [color="#13a10e"];
        "0x000062fc" -> "0x00006303" [color="#c50f1f"];
        "0x00006303" -> "0x00005404" [color="#13a10e"];
        "0x00006303" -> "0x0000630b" [color="#c50f1f"];
        "0x0000630b" -> "0x00005018" [color="#3a96dd"];
        "0x00006318" -> "0x00006336" [color="#13a10e"];
        "0x00006318" -> "0x0000632a" [color="#c50f1f"];
        "0x0000632a" -> "0x00006336" [color="#3a96dd"];
        "0x00006336" -> "0x00005052" [color="#3a96dd"];
        "0x00006342" -> "0x000063fe" [color="#13a10e"];
        "0x00006342" -> "0x00006366" [color="#c50f1f"];
        "0x00006366" -> "0x0000636f" [color="#3a96dd"];
        "0x0000636f" -> "0x000061e1" [color="#13a10e"];
        "0x0000636f" -> "0x0000638d" [color="#c50f1f"];
        "0x0000638d" -> "0x000063de" [color="#13a10e"];
        "0x0000638d" -> "0x0000639b" [color="#c50f1f"];
        "0x0000639b" -> "0x00005018" [color="#3a96dd"];
        "0x000063ad" -> "0x000054e9" [color="#13a10e"];
        "0x000063ad" -> "0x000063d9" [color="#c50f1f"];
        "0x000063d9" -> "0x000054dd" [color="#3a96dd"];
        "0x000063de" -> "0x0000630b" [color="#3a96dd"];
        "0x000063fe" -> "0x0000636f" [color="#3a96dd"];
        "0x0000643b" -> "0x0000644c" [color="#3a96dd"];
        "0x0000644c" -> "0x000064c4" [color="#3a96dd"];
        "0x000064c4" -> "0x000064e4" [color="#3a96dd"];
        "0x000064e4" -> "0x000064f0" [color="#3a96dd"];
        "0x000064f0" -> "0x00006504" [color="#3a96dd"];
        "0x00006504" -> "0x00006751" [color="#13a10e"];
        "0x00006504" -> "0x00006510" [color="#c50f1f"];
        "0x00006510" -> "0x000064f0" [color="#3a96dd"];
        "0x0000651e" -> "0x00006542" [color="#3a96dd"];
        "0x00006542" -> "0x00006566" [color="#3a96dd"];
        "0x00006566" -> "0x0000658a" [color="#3a96dd"];
        "0x0000658a" -> "0x000065ae" [color="#3a96dd"];
        "0x000065ae" -> "0x0000563f" [color="#3a96dd"];
        "0x000065c4" -> "0x000045b9" [color="#13a10e"];
        "0x000065c4" -> "0x000065d0" [color="#c50f1f"];
        "0x000065d0" -> "0x000060c3" [color="#13a10e"];
        "0x000065d0" -> "0x000065d9" [color="#c50f1f"];
        "0x000065d9" -> "0x00006762" [color="#13a10e"];
        "0x000065d9" -> "0x000065f9" [color="#c50f1f"];
        "0x000065f9" -> "0x0000671d" [color="#13a10e"];
        "0x000065f9" -> "0x00006621" [color="#c50f1f"];
        "0x00006621" -> "0x000066e4" [color="#13a10e"];
        "0x00006621" -> "0x0000663a" [color="#c50f1f"];
        "0x0000663a" -> "0x00006662" [color="#3a96dd"];
        "0x00006650" -> "0x000066a6" [color="#13a10e"];
        "0x00006650" -> "0x00006659" [color="#c50f1f"];
        "0x00006659" -> "0x000045b9" [color="#13a10e"];
        "0x00006659" -> "0x00006662" [color="#c50f1f"];
        "0x00006662" -> "0x00006650" [color="#13a10e"];
        "0x00006662" -> "0x0000666c" [color="#c50f1f"];
        "0x0000666c" -> "0x00006650" [color="#13a10e"];
        "0x0000666c" -> "0x00006672" [color="#c50f1f"];
        "0x00006672" -> "0x000066a6" [color="#3a96dd"];
        "0x000066a6" -> "0x000066e4" [color="#3a96dd"];
        "0x000066e4" -> "0x0000671d" [color="#3a96dd"];
        "0x0000671d" -> "0x00006751" [color="#3a96dd"];
        "0x00006751" -> "0x00006510" [color="#3a96dd"];
        "0x00006762" -> "0x0000676c" [color="#3a96dd"];
        "0x0000676c" -> "0x00005559" [color="#3a96dd"];
        "0x0000678c" -> "0x000067bb" [color="#3a96dd"];
        "0x000067bb" -> "0x000067c4" [color="#3a96dd"];
        "0x000067c4" -> "0x000067d0" [color="#3a96dd"];
        "0x000067d0" -> "0x000067dc" [color="#13a10e"];
        "0x000067d0" -> "0x000067d7" [color="#c50f1f"];
        "0x000067d7" -> "0x000067dc" [color="#3a96dd"];
        "0x000067dc" -> "0x000067f3" [color="#3a96dd"];
        "0x000067f3" -> "0x00006806" [color="#3a96dd"];
        "0x00006806" -> "0x0000682d" [color="#3a96dd"];
        "0x0000682d" -> "0x00006840" [color="#3a96dd"];
        "0x00006845" -> "0x00006883" [color="#3a96dd"];
        "0x00006883" -> "0x0000689a" [color="#3a96dd"];
        "0x0000689a" -> "0x000068a2" [color="#3a96dd"];
        "0x000068a2" -> "0x000068c6" [color="#3a96dd"];
        "0x000068c6" -> "0x000068e0" [color="#3a96dd"];
}
