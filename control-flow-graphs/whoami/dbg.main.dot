digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002620" [URL="dbg.main/0x00002620", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2778\l312: int dbg.main (int argc, char **argv);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002620      endbr64                                                ; int main(int argc,char ** argv);\l0x00002624      push r12\l0x00002626      lea r12, [0x0000709c]                                  ; \"coreutils\"\l0x0000262d      push rbp\l0x0000262e      mov ebp, edi                                           ; argc\l0x00002630      push rbx\l0x00002631      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002634      mov rbx, rsi                                           ; argv\l0x00002637      call dbg.set_program_name\l0x0000263c      lea rsi, [0x00007021]                                  ; const char *locale\l0x00002643      mov edi, 6                                             ; int category\l0x00002648      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000264d      lea rsi, str._usr_local_share_locale                   ; 0x70c5 ; \"/usr/local/share/locale\" ; char *dirname\l0x00002654      mov rdi, r12                                           ; char *domainname\l0x00002657      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x0000265c      mov rdi, r12                                           ; char *domainname\l0x0000265f      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002664      lea rdi, [dbg.close_stdout]                            ; 0x2bb0 ; func function\l0x0000266b      call sym.atexit                                        ; int atexit(func function)\l0x00002670      mov r9d, 1                                             ; func rtld_fini\l0x00002676      mov rsi, rbx                                           ; int argc\l0x00002679      mov edi, ebp                                           ; func main\l0x0000267b      sub rsp, 8\l0x0000267f      lea rax, str.Richard_Mlynarik                          ; 0x70dd ; \"Richard Mlynarik\"\l0x00002686      mov r8, qword [obj.Version]                            ; [0xa010:8]=0x72b1 ; func fini\l0x0000268d      lea rcx, str.GNU_coreutils                             ; 0x7098 ; \"GNU coreutils\" ; func init\l0x00002694      push 0\l0x00002696      lea rdx, str.whoami                                    ; 0x7004 ; \"whoami\" ; int64_t arg5\l0x0000269d      push rax\l0x0000269e      lea rax, [dbg.usage]                                   ; 0x2850\l0x000026a5      push rax                                               ; 0x2850\l                                                                       ; dbg.usage\l0x000026a6      xor eax, eax\l0x000026a8      call dbg.parse_gnu_standard_options_only\l0x000026ad      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xa090:4]=0\l0x000026b4      add rsp, 0x20\l0x000026b8      cmp eax, ebp\l0x000026ba      jne 0x271e\l"]
	"0x000026bc" [URL="dbg.main/0x000026bc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000026bc      call sym.imp.__errno_location\l0x000026c1      mov dword [rax], 0\l0x000026c7      mov rbp, rax\l0x000026ca      call sym.imp.geteuid                                   ; uid_t geteuid(void)\l0x000026cf      mov ebx, eax\l0x000026d1      cmp eax, 0xffffffff\l0x000026d4      jne 0x26dc\l"]
	"0x000026d6" [URL="dbg.main/0x000026d6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000026d6      cmp dword [rbp], 0\l0x000026da      jne 0x26f7\l"]
	"0x000026dc" [URL="dbg.main/0x000026dc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26d4\l0x000026dc      mov edi, ebx\l0x000026de      call sym.imp.getpwuid\l0x000026e3      test rax, rax\l0x000026e6      je 0x26f7\l"]
	"0x000026e8" [URL="dbg.main/0x000026e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000026e8      mov rdi, qword [rax]                                   ; const char *s\l0x000026eb      call sym.imp.puts                                      ; int puts(const char *s)\l0x000026f0      pop rbx\l0x000026f1      xor eax, eax\l0x000026f3      pop rbp\l0x000026f4      pop r12\l0x000026f6      ret\l"]
	"0x000026f7" [URL="dbg.main/0x000026f7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x26da, 0x26e6\l0x000026f7      mov edx, 5\l0x000026fc      lea rsi, str.cannot_find_name_for_user_ID__lu          ; 0x7290 ; \"cannot find name for user ID %lu\"\l0x00002703      xor edi, edi\l0x00002705      call sym.imp.dcgettext\l0x0000270a      mov esi, dword [rbp]                                   ; int errname\l0x0000270d      mov ecx, ebx\l0x0000270f      mov edi, 1                                             ; int status\l0x00002714      mov rdx, rax                                           ; char *format\l0x00002717      xor eax, eax\l0x00002719      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000271e" [URL="dbg.main/0x0000271e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26ba\l0x0000271e      mov rdi, qword [rbx + rax*8]                           ; int64_t arg1\l0x00002722      call dbg.quote\l0x00002727      mov edx, 5\l0x0000272c      lea rsi, str.extra_operand__s                          ; 0x70ee ; \"extra operand %s\"\l0x00002733      xor edi, edi\l0x00002735      mov r12, rax\l0x00002738      call sym.imp.dcgettext\l0x0000273d      xor edi, edi                                           ; int status\l0x0000273f      mov rcx, r12\l0x00002742      xor esi, esi                                           ; int errname\l0x00002744      mov rdx, rax                                           ; char *format\l0x00002747      xor eax, eax\l0x00002749      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000274e      mov edi, 1                                             ; int64_t arg1\l0x00002753      call dbg.usage\l"]
        "0x00002620" -> "0x0000271e" [color="#13a10e"];
        "0x00002620" -> "0x000026bc" [color="#c50f1f"];
        "0x000026bc" -> "0x000026dc" [color="#13a10e"];
        "0x000026bc" -> "0x000026d6" [color="#c50f1f"];
        "0x000026d6" -> "0x000026f7" [color="#13a10e"];
        "0x000026d6" -> "0x000026dc" [color="#c50f1f"];
        "0x000026dc" -> "0x000026f7" [color="#13a10e"];
        "0x000026dc" -> "0x000026e8" [color="#c50f1f"];
        "0x000026f7" -> "0x0000271e" [color="#3a96dd"];
}
