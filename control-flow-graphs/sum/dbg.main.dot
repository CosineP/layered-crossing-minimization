digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000027e0" [URL="dbg.main/0x000027e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2b98\l913: int dbg.main (int argc, char **argv);\l; var uintmax_t length @ rbp-0x48\l; var unsigned char[6] bin_buffer_unaligned @ rbp-0x3e\l; var int64_t var_fh @ rsp+0x1f\l; var int64_t var_20h @ rsp+0x20\l; var char ***ubp_av @ rsp+0x28\l; var int64_t var_24h @ rsp+0x34\l; var int64_t var_28h @ rsp+0x38\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000027e0      endbr64                                                ; int main(int argc,char ** argv);\l0x000027e4      push r15\l0x000027e6      push r14\l0x000027e8      push r13\l0x000027ea      lea r13, obj.long_options                              ; 0xcac0\l0x000027f1      push r12\l0x000027f3      lea r12, [0x00009091]                                  ; \"coreutils\"\l0x000027fa      push rbp\l0x000027fb      mov rbp, rsi                                           ; argv\l0x000027fe      push rbx\l0x000027ff      mov ebx, edi                                           ; argc\l0x00002801      sub rsp, 0x38\l0x00002805      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002808      mov rax, qword fs:[0x28]\l0x00002811      mov qword [var_28h], rax\l0x00002816      xor eax, eax\l0x00002818      call dbg.set_program_name\l0x0000281d      lea rsi, [0x00009881]                                  ; const char *locale\l0x00002824      mov edi, 6                                             ; int category\l0x00002829      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000282e      lea rsi, str._usr_local_share_locale                   ; 0x90ba ; \"/usr/local/share/locale\" ; char *dirname\l0x00002835      mov rdi, r12                                           ; char *domainname\l0x00002838      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x0000283d      mov rdi, r12                                           ; char *domainname\l0x00002840      lea r12, [global_short_opts]                           ; 0x90f4 ; \"rs\"\l0x00002847      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x0000284c      lea rdi, [dbg.close_stdout]                            ; 0x3460 ; func function\l0x00002853      call sym.atexit                                        ; int atexit(func function)\l0x00002858      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0 ; FILE*stream\l0x0000285f      xor ecx, ecx                                           ; size_t size\l0x00002861      xor esi, esi                                           ; char *buf\l0x00002863      mov edx, 1                                             ; int mode\l0x00002868      call sym.imp.setvbuf                                   ; int setvbuf(FILE*stream, char *buf, int mode, size_t size)\l"]
	"0x0000286d" [URL="dbg.main/0x0000286d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28ec\l0x0000286d      xor r8d, r8d\l0x00002870      mov rcx, r13\l0x00002873      mov rdx, r12\l0x00002876      mov rsi, rbp\l0x00002879      mov edi, ebx\l0x0000287b      call sym.imp.getopt_long\l0x00002880      cmp eax, 0xffffffff\l0x00002883      je 0x290c\l"]
	"0x00002889" [URL="dbg.main/0x00002889", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002889      cmp eax, 0x72\l0x0000288c      je 0x2908\l"]
	"0x0000288e" [URL="dbg.main/0x0000288e", fillcolor="white",color="#767676", fontname="Courier",label="0x0000288e      jg 0x28d8\l"]
	"0x00002890" [URL="dbg.main/0x00002890", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002890      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002895      jne 0x28f1\l"]
	"0x00002897" [URL="dbg.main/0x00002897", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002897      sub rsp, 8\l0x0000289b      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd0a8:8]=0 ; func main\l0x000028a2      xor eax, eax\l0x000028a4      mov rcx, qword [obj.Version]                           ; [0xd010:8]=0x936b \"9.0\" ; \"k\\x93\" ; func init\l0x000028ab      push 0\l0x000028ad      lea r9, str.David_MacKenzie                            ; 0x90d2 ; \"David MacKenzie\" ; int64_t arg_c0h\l0x000028b4      lea r8, str.Kayvan_Aghaiepour                          ; 0x90e2 ; \"Kayvan Aghaiepour\" ; int64_t arg6\l0x000028bb      lea rdx, str.GNU_coreutils                             ; 0x908d ; \"GNU coreutils\" ; int64_t arg3\l0x000028c2      lea rsi, [global_program]                              ; 0x9072 ; \"sum\" ; int64_t arg2\l0x000028c9      call dbg.version_etc\l0x000028ce      xor edi, edi                                           ; int status\l0x000028d0      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x000028d8" [URL="dbg.main/0x000028d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x288e\l0x000028d8      cmp eax, 0x73\l0x000028db      jne 0x2b6a\l"]
	"0x000028e1" [URL="dbg.main/0x000028e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028e1      mov eax, 1\l"]
	"0x000028e6" [URL="dbg.main/0x000028e6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x290a\l0x000028e6      mov dword [obj.sum_algorithm], eax                     ; [0xd0ec:4]=1\l0x000028ec      jmp 0x286d\l"]
	"0x000028f1" [URL="dbg.main/0x000028f1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2895\l0x000028f1      cmp eax, 0xffffff7e                                    ; 4294967166\l0x000028f6      jne 0x2b6a\l"]
	"0x000028fc" [URL="dbg.main/0x000028fc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028fc      xor edi, edi                                           ; int64_t arg1\l0x000028fe      call dbg.usage\l"]
	"0x00002908" [URL="dbg.main/0x00002908", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x288c\l0x00002908      xor eax, eax\l0x0000290a      jmp 0x28e6\l"]
	"0x0000290c" [URL="dbg.main/0x0000290c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2883\l0x0000290c      movsxd rax, ebx\l0x0000290f      lea rax, [rbp + rax*8]\l0x00002914      mov qword [rsp], rax\l0x00002918      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd0b8:4]=0\l0x0000291f      cmp eax, ebx\l0x00002921      jne 0x2939\l"]
	"0x00002923" [URL="dbg.main/0x00002923", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002923      mov rcx, qword [rsp]\l0x00002927      lea rdx, [0x000090f7]                                  ; \"-\"\l0x0000292e      mov qword [rcx], rdx\l0x00002931      add rcx, 8\l0x00002935      mov qword [rsp], rcx\l"]
	"0x00002939" [URL="dbg.main/0x00002939", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2921\l0x00002939      lea rbp, [rbp + rax*8]\l0x0000293e      cmp qword [rsp], rbp\l0x00002942      jbe 0x2abb\l"]
	"0x00002948" [URL="dbg.main/0x00002948", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002948      mov byte [var_fh], 1\l0x0000294d      lea r13, [var_24h]\l0x00002952      jmp 0x29f0\l"]
	"0x00002957" [URL="dbg.main/0x00002957", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a05\l0x00002957      mov r14, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xd0b0:8]=0\l0x0000295e      mov esi, 2                                             ; int64_t arg2\l0x00002963      mov byte [obj.have_read_stdin], 1                      ; [0xd0f0:1]=1\l0x0000296a      mov rdi, r14                                           ; int64_t arg1\l0x0000296d      call dbg.fadvise\l0x00002972      lea rdx, [ubp_av]                                      ; char **ubp_av\l0x00002977      mov rsi, r13                                           ; int argc\l0x0000297a      mov rdi, r14                                           ; func main\l0x0000297d      mov eax, dword [obj.sum_algorithm]                     ; [0xd0ec:4]=1\l0x00002983      lea rcx, obj.sumfns                                    ; 0xcbd0 ; \"p,\" ; func init\l0x0000298a      call qword [rcx + rax*8]\l0x0000298d      mov r15d, eax\l0x00002990      test eax, eax\l0x00002992      je 0x299c\l"]
	"0x00002994" [URL="dbg.main/0x00002994", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002994      call sym.imp.__errno_location\l0x00002999      mov r15d, dword [rax]\l"]
	"0x0000299c" [URL="dbg.main/0x0000299c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2992\l0x0000299c      mov rdi, r14\l0x0000299f      call sym.imp.clearerr_unlocked\l"]
	"0x000029a4" [URL="dbg.main/0x000029a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a6a, 0x2a81\l0x000029a4      test r15d, r15d\l0x000029a7      jne 0x2a8c\l"]
	"0x000029ad" [URL="dbg.main/0x000029ad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a5c\l0x000029ad      push rax\l0x000029ae      mov eax, dword [obj.sum_algorithm]                     ; [0xd0ec:4]=1\l0x000029b4      xor r9d, r9d\l0x000029b7      mov rdx, r13\l0x000029ba      cmp dword [obj.optind], ebx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd0b8:4]=0\l0x000029c0      lea r10, obj.sum_output_fns                            ; 0xcbc0\l0x000029c7      push qword [var_20h]\l0x000029cb      mov rdi, r12                                           ; func main\l0x000029ce      setne r9b\l0x000029d2      mov r8d, 0xa                                           ; func fini\l0x000029d8      xor ecx, ecx                                           ; func init\l0x000029da      xor esi, esi                                           ; int argc\l0x000029dc      call qword [r10 + rax*8]\l0x000029e0      pop rdx\l0x000029e1      pop rcx\l"]
	"0x000029e2" [URL="dbg.main/0x000029e2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ab6, 0x2b28\l0x000029e2      add rbp, 8\l0x000029e6      cmp qword [rsp], rbp\l0x000029ea      jbe 0x2ac0\l"]
	"0x000029f0" [URL="dbg.main/0x000029f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2952\l0x000029f0      mov r12, qword [rbp]\l0x000029f4      lea rsi, [0x000090f7]                                  ; \"-\" ; const char *s2\l0x000029fb      mov rdi, r12                                           ; const char *s1\l0x000029fe      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002a03      test eax, eax\l0x00002a05      je 0x2957\l"]
	"0x00002a0b" [URL="dbg.main/0x00002a0b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a0b      lea rsi, [0x00009379]                                  ; \"r\" ; int64_t arg2\l0x00002a12      mov rdi, r12                                           ; const char *filename\l0x00002a15      call dbg.fopen_safer\l0x00002a1a      mov r14, rax\l0x00002a1d      test rax, rax\l0x00002a20      je 0x2af7\l"]
	"0x00002a26" [URL="dbg.main/0x00002a26", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a26      mov rdi, rax                                           ; int64_t arg1\l0x00002a29      mov esi, 2                                             ; int64_t arg2\l0x00002a2e      call dbg.fadvise\l0x00002a33      lea rdx, [ubp_av]                                      ; char **ubp_av\l0x00002a38      mov rsi, r13                                           ; int argc\l0x00002a3b      mov rdi, r14                                           ; func main\l0x00002a3e      mov eax, dword [obj.sum_algorithm]                     ; [0xd0ec:4]=1\l0x00002a44      lea rcx, obj.sumfns                                    ; 0xcbd0 ; \"p,\" ; func init\l0x00002a4b      call qword [rcx + rax*8]\l0x00002a4e      test eax, eax\l0x00002a50      jne 0x2a6f\l"]
	"0x00002a52" [URL="dbg.main/0x00002a52", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a52      mov rdi, r14                                           ; int64_t arg1\l0x00002a55      call dbg.rpl_fclose\l0x00002a5a      test eax, eax\l0x00002a5c      je 0x29ad\l"]
	"0x00002a62" [URL="dbg.main/0x00002a62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a8a\l0x00002a62      call sym.imp.__errno_location\l0x00002a67      mov r15d, dword [rax]\l0x00002a6a      jmp 0x29a4\l"]
	"0x00002a6f" [URL="dbg.main/0x00002a6f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a50\l0x00002a6f      call sym.imp.__errno_location\l0x00002a74      mov rdi, r14                                           ; int64_t arg1\l0x00002a77      mov r15d, dword [rax]\l0x00002a7a      call dbg.rpl_fclose\l0x00002a7f      test eax, eax\l0x00002a81      je 0x29a4\l"]
	"0x00002a87" [URL="dbg.main/0x00002a87", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a87      test r15d, r15d\l0x00002a8a      je 0x2a62\l"]
	"0x00002a8c" [URL="dbg.main/0x00002a8c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29a7\l0x00002a8c      mov rdx, r12                                           ; int64_t arg3\l0x00002a8f      mov esi, 3                                             ; int64_t arg2\l; DATA XREF from dbg.emit_bug_reporting_address @ 0x6e25\l0x00002a94      xor edi, edi                                           ; int64_t arg1\l0x00002a96      call sym.quotearg_n_style_colon\l0x00002a9b      lea rdx, dbg.ximemdup0                                 ; 0x7330 ; char *format\l0x00002aa2      mov esi, r15d                                          ; int errname\l0x00002aa5      xor edi, edi                                           ; int status\l0x00002aa7      mov rcx, rax\l0x00002aaa      xor eax, eax\l0x00002aac      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ab1      mov byte [var_fh], 0\l0x00002ab6      jmp 0x29e2\l"]
	"0x00002abb" [URL="dbg.main/0x00002abb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2942\l0x00002abb      mov byte [var_fh], 1\l"]
	"0x00002ac0" [URL="dbg.main/0x00002ac0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29ea\l0x00002ac0      cmp byte [obj.have_read_stdin], 0                      ; [0xd0f0:1]=1\l0x00002ac7      jne 0x2b2d\l"]
	"0x00002ac9" [URL="dbg.main/0x00002ac9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b3c\l0x00002ac9      movzx eax, byte [var_fh]\l0x00002ace      xor eax, 1\l0x00002ad1      movzx eax, al\l0x00002ad4      mov rdx, qword [var_28h]\l0x00002ad9      sub rdx, qword fs:[0x28]\l0x00002ae2      jne 0x2b74\l"]
	"0x00002ae8" [URL="dbg.main/0x00002ae8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ae8      add rsp, 0x38\l0x00002aec      pop rbx\l0x00002aed      pop rbp\l0x00002aee      pop r12\l0x00002af0      pop r13\l0x00002af2      pop r14\l0x00002af4      pop r15\l0x00002af6      ret\l"]
	"0x00002af7" [URL="dbg.main/0x00002af7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a20\l0x00002af7      mov rdx, r12                                           ; int64_t arg3\l0x00002afa      mov esi, 3                                             ; int64_t arg2\l0x00002aff      xor edi, edi                                           ; int64_t arg1\l0x00002b01      call sym.quotearg_n_style_colon\l0x00002b06      mov r12, rax\l0x00002b09      call sym.imp.__errno_location\l0x00002b0e      mov rcx, r12\l0x00002b11      lea rdx, [0x00009dd2]                                  ; \"%s\" ; char *format\l0x00002b18      xor edi, edi                                           ; int status\l0x00002b1a      mov esi, dword [rax]                                   ; int errname\l0x00002b1c      xor eax, eax\l0x00002b1e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002b23      mov byte [var_fh], 0\l0x00002b28      jmp 0x29e2\l"]
	"0x00002b2d" [URL="dbg.main/0x00002b2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ac7\l0x00002b2d      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xd0b0:8]=0 ; int64_t arg1\l0x00002b34      call dbg.rpl_fclose\l0x00002b39      add eax, 1\l0x00002b3c      jne 0x2ac9\l"]
	"0x00002b3e" [URL="dbg.main/0x00002b3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b3e      mov edx, 5\l0x00002b43      lea rsi, str.standard_input                            ; 0x90f9 ; \"standard input\"\l0x00002b4a      xor edi, edi\l0x00002b4c      call sym.imp.dcgettext\l0x00002b51      mov r12, rax\l0x00002b54      call sym.imp.__errno_location\l0x00002b59      mov rdx, r12                                           ; char *format\l0x00002b5c      mov edi, 1                                             ; int status\l0x00002b61      mov esi, dword [rax]                                   ; int errname\l0x00002b63      xor eax, eax\l0x00002b65      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002b6a" [URL="dbg.main/0x00002b6a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28db, 0x28f6\l0x00002b6a      mov edi, 1                                             ; int64_t arg1\l0x00002b6f      call dbg.usage\l"]
	"0x00002b74" [URL="dbg.main/0x00002b74", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ae2\l0x00002b74      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x000027e0" -> "0x0000286d" [color="#3a96dd"];
        "0x0000286d" -> "0x0000290c" [color="#13a10e"];
        "0x0000286d" -> "0x00002889" [color="#c50f1f"];
        "0x00002889" -> "0x00002908" [color="#13a10e"];
        "0x00002889" -> "0x0000288e" [color="#c50f1f"];
        "0x0000288e" -> "0x000028d8" [color="#13a10e"];
        "0x0000288e" -> "0x00002890" [color="#c50f1f"];
        "0x00002890" -> "0x000028f1" [color="#13a10e"];
        "0x00002890" -> "0x00002897" [color="#c50f1f"];
        "0x000028d8" -> "0x00002b6a" [color="#13a10e"];
        "0x000028d8" -> "0x000028e1" [color="#c50f1f"];
        "0x000028e1" -> "0x000028e6" [color="#3a96dd"];
        "0x000028e6" -> "0x0000286d" [color="#3a96dd"];
        "0x000028f1" -> "0x00002b6a" [color="#13a10e"];
        "0x000028f1" -> "0x000028fc" [color="#c50f1f"];
        "0x00002908" -> "0x000028e6" [color="#3a96dd"];
        "0x0000290c" -> "0x00002939" [color="#13a10e"];
        "0x0000290c" -> "0x00002923" [color="#c50f1f"];
        "0x00002923" -> "0x00002939" [color="#3a96dd"];
        "0x00002939" -> "0x00002abb" [color="#13a10e"];
        "0x00002939" -> "0x00002948" [color="#c50f1f"];
        "0x00002948" -> "0x000029f0" [color="#3a96dd"];
        "0x00002957" -> "0x0000299c" [color="#13a10e"];
        "0x00002957" -> "0x00002994" [color="#c50f1f"];
        "0x00002994" -> "0x0000299c" [color="#3a96dd"];
        "0x0000299c" -> "0x000029a4" [color="#3a96dd"];
        "0x000029a4" -> "0x00002a8c" [color="#13a10e"];
        "0x000029a4" -> "0x000029ad" [color="#c50f1f"];
        "0x000029ad" -> "0x000029e2" [color="#3a96dd"];
        "0x000029e2" -> "0x00002ac0" [color="#13a10e"];
        "0x000029e2" -> "0x000029f0" [color="#c50f1f"];
        "0x000029f0" -> "0x00002957" [color="#13a10e"];
        "0x000029f0" -> "0x00002a0b" [color="#c50f1f"];
        "0x00002a0b" -> "0x00002af7" [color="#13a10e"];
        "0x00002a0b" -> "0x00002a26" [color="#c50f1f"];
        "0x00002a26" -> "0x00002a6f" [color="#13a10e"];
        "0x00002a26" -> "0x00002a52" [color="#c50f1f"];
        "0x00002a52" -> "0x000029ad" [color="#13a10e"];
        "0x00002a52" -> "0x00002a62" [color="#c50f1f"];
        "0x00002a62" -> "0x000029a4" [color="#3a96dd"];
        "0x00002a6f" -> "0x000029a4" [color="#13a10e"];
        "0x00002a6f" -> "0x00002a87" [color="#c50f1f"];
        "0x00002a87" -> "0x00002a62" [color="#13a10e"];
        "0x00002a87" -> "0x00002a8c" [color="#c50f1f"];
        "0x00002a8c" -> "0x000029e2" [color="#3a96dd"];
        "0x00002abb" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002ac0" -> "0x00002b2d" [color="#13a10e"];
        "0x00002ac0" -> "0x00002ac9" [color="#c50f1f"];
        "0x00002ac9" -> "0x00002b74" [color="#13a10e"];
        "0x00002ac9" -> "0x00002ae8" [color="#c50f1f"];
        "0x00002af7" -> "0x000029e2" [color="#3a96dd"];
        "0x00002b2d" -> "0x00002ac9" [color="#13a10e"];
        "0x00002b2d" -> "0x00002b3e" [color="#c50f1f"];
        "0x00002b3e" -> "0x00002b6a" [color="#3a96dd"];
        "0x00002b6a" -> "0x00002b74" [color="#3a96dd"];
}
