digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002680" [URL="dbg.main/0x00002680", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x30f8\l2651: int dbg.main (int argc, char **argv);\l; var char[22] limit @ rbp-0x40\l; var int64_t var_18h_2 @ rsp+0x18\l; var int64_t var_10h @ rsp+0x30\l; var int64_t var_11h @ rsp+0x31\l; var int64_t var_18h @ rsp+0x48\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002680      endbr64                                                ; int main(int argc,char ** argv);\l0x00002684      push r14\l0x00002686      lea r14, [0x000080ea]                                  ; \"%ld\"\l0x0000268d      push r13\l0x0000268f      lea r13, [0x00008093]                                  ; \"coreutils\"\l0x00002696      push r12\l; DATA XREF from dbg.version_etc_arn @ 0x65a1\l0x00002698      mov r12d, edi                                          ; argc\l0x0000269b      push rbp\l0x0000269c      mov rbp, rsi                                           ; argv\l0x0000269f      sub rsp, 0x28\l0x000026a3      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000026a6      mov rax, qword fs:[0x28]\l0x000026af      mov qword [var_18h], rax\l0x000026b4      xor eax, eax\l0x000026b6      call dbg.set_program_name\l0x000026bb      lea rsi, [0x00008a01]                                  ; const char *locale\l0x000026c2      mov edi, 6                                             ; int category\l0x000026c7      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000026cc      lea rsi, str._usr_local_share_locale                   ; 0x80bc ; \"/usr/local/share/locale\" ; char *dirname\l0x000026d3      mov rdi, r13                                           ; char *domainname\l0x000026d6      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000026db      mov rdi, r13                                           ; char *domainname\l0x000026de      lea r13, [0x000080e6]                                  ; \"%lu\"\l0x000026e5      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000026ea      lea rdi, [dbg.close_stdout]                            ; 0x36a0 ; func function\l0x000026f1      call sym.atexit                                        ; int atexit(func function)\l0x000026f6      push 0\l0x000026f8      mov rsi, rbp                                           ; int64_t arg3\l0x000026fb      mov edi, r12d                                          ; int64_t arg1\l0x000026fe      lea rax, str.Padraig_Brady                             ; 0x80d8 ; \"Padraig Brady\"\l0x00002705      lea r9, [dbg.usage]                                    ; 0x3340\l0x0000270c      push rax\l0x0000270d      lea r8, [0x000080d4]                                   ; \"9.0\"\l0x00002714      xor eax, eax\l0x00002716      lea rcx, str.GNU_coreutils                             ; 0x808f ; \"GNU coreutils\"\l0x0000271d      lea rdx, str.getlimits                                 ; 0x8004 ; \"getlimits\" ; int64_t arg4\l0x00002724      call dbg.parse_long_options\l0x00002729      lea r12, [var_11h]\l0x0000272e      mov rcx, r13\l0x00002731      xor eax, eax\l0x00002733      mov r8d, 0x7f                                          ; '\\x7f'\l0x00002739      mov edx, 0x15\l0x0000273e      mov esi, 1\l0x00002743      mov rdi, r12\l0x00002746      call sym.imp.__sprintf_chk\l0x0000274b      lea rbp, [var_10h]\l0x00002750      mov rdx, r12\l0x00002753      xor eax, eax\l0x00002755      lea rsi, [0x000080ef]                                  ; \"CHAR_MAX=%s\\n\"\l0x0000275c      mov edi, 1\l0x00002761      call sym.imp.__printf_chk\l0x00002766      mov rdi, rbp                                           ; int64_t arg1\l0x00002769      call dbg.decimal_absval_add_one\l0x0000276e      lea rsi, [0x000080fd]                                  ; \"CHAR_OFLOW=%s\\n\"\l0x00002775      mov edi, 1\l0x0000277a      mov rdx, rax\l0x0000277d      xor eax, eax\l0x0000277f      call sym.imp.__printf_chk\l0x00002784      mov rcx, r14\l0x00002787      mov edx, 0x15\l0x0000278c      mov rdi, r12\l0x0000278f      mov r8, 0xffffffffffffff80\l0x00002796      mov esi, 1\l0x0000279b      xor eax, eax\l0x0000279d      call sym.imp.__sprintf_chk\l0x000027a2      mov rdx, r12\l0x000027a5      mov edi, 1\l0x000027aa      xor eax, eax\l0x000027ac      lea rsi, [0x0000810d]                                  ; \"CHAR_MIN=%s\\n\"\l0x000027b3      call sym.imp.__printf_chk\l0x000027b8      mov rdi, rbp                                           ; int64_t arg1\l0x000027bb      call dbg.decimal_absval_add_one\l0x000027c0      lea rsi, [0x0000811b]                                  ; \"CHAR_UFLOW=%s\\n\"\l0x000027c7      mov edi, 1\l0x000027cc      mov rdx, rax\l0x000027cf      xor eax, eax\l0x000027d1      call sym.imp.__printf_chk\l0x000027d6      mov r8d, 0x7f                                          ; '\\x7f'\l0x000027dc      mov rcx, r13\l0x000027df      xor eax, eax\l0x000027e1      mov edx, 0x15\l0x000027e6      mov esi, 1\l0x000027eb      mov rdi, r12\l0x000027ee      call sym.imp.__sprintf_chk\l0x000027f3      mov rdx, r12\l0x000027f6      mov edi, 1\l0x000027fb      xor eax, eax\l0x000027fd      lea rsi, str.SCHAR_MAX_s_n                             ; 0x80ee ; \"SCHAR_MAX=%s\\n\"\l0x00002804      call sym.imp.__printf_chk\l0x00002809      mov rdi, rbp                                           ; int64_t arg1\l0x0000280c      call dbg.decimal_absval_add_one\l0x00002811      lea rsi, str.SCHAR_OFLOW_s_n                           ; 0x80fc ; \"SCHAR_OFLOW=%s\\n\"\l0x00002818      mov edi, 1\l0x0000281d      mov rdx, rax\l0x00002820      xor eax, eax\l0x00002822      call sym.imp.__printf_chk\l0x00002827      mov rcx, r14\l0x0000282a      mov edx, 0x15\l0x0000282f      mov rdi, r12\l0x00002832      mov r8, 0xffffffffffffff80\l0x00002839      mov esi, 1\l0x0000283e      xor eax, eax\l0x00002840      call sym.imp.__sprintf_chk\l0x00002845      xor eax, eax\l0x00002847      mov rdx, r12\l0x0000284a      mov edi, 1\l0x0000284f      lea rsi, str.SCHAR_MIN_s_n                             ; 0x810c ; \"SCHAR_MIN=%s\\n\"\l0x00002856      call sym.imp.__printf_chk\l0x0000285b      mov rdi, rbp                                           ; int64_t arg1\l0x0000285e      call dbg.decimal_absval_add_one\l0x00002863      lea rsi, str.SCHAR_UFLOW_s_n                           ; 0x811a ; \"SCHAR_UFLOW=%s\\n\"\l0x0000286a      mov edi, 1\l0x0000286f      mov rdx, rax\l0x00002872      xor eax, eax\l0x00002874      call sym.imp.__printf_chk\l0x00002879      mov r8d, 0xff\l0x0000287f      mov rcx, r13\l0x00002882      xor eax, eax\l0x00002884      mov edx, 0x15\l0x00002889      mov esi, 1\l0x0000288e      mov rdi, r12\l0x00002891      call sym.imp.__sprintf_chk\l0x00002896      mov rdx, r12\l0x00002899      mov edi, 1\l0x0000289e      xor eax, eax\l0x000028a0      lea rsi, str.UCHAR_MAX_s_n                             ; 0x812a ; \"UCHAR_MAX=%s\\n\"\l0x000028a7      call sym.imp.__printf_chk\l0x000028ac      mov rdi, rbp                                           ; int64_t arg1\l0x000028af      call dbg.decimal_absval_add_one\l0x000028b4      lea rsi, str.UCHAR_OFLOW_s_n                           ; 0x8138 ; \"UCHAR_OFLOW=%s\\n\"\l0x000028bb      mov edi, 1\l0x000028c0      mov rdx, rax\l0x000028c3      xor eax, eax\l0x000028c5      call sym.imp.__printf_chk\l0x000028ca      mov r8d, 0x7fff\l0x000028d0      mov rcx, r13\l0x000028d3      xor eax, eax\l0x000028d5      mov edx, 0x15\l0x000028da      mov esi, 1\l0x000028df      mov rdi, r12\l0x000028e2      call sym.imp.__sprintf_chk\l0x000028e7      mov rdx, r12\l0x000028ea      mov edi, 1\l; DATA XREF from dbg.version_etc_arn @ 0x621a\l0x000028ef      xor eax, eax\l0x000028f1      lea rsi, str.SHRT_MAX_s_n                              ; 0x8148 ; \"SHRT_MAX=%s\\n\"\l0x000028f8      call sym.imp.__printf_chk\l0x000028fd      mov rdi, rbp                                           ; int64_t arg1\l0x00002900      call dbg.decimal_absval_add_one\l0x00002905      lea rsi, str.SHRT_OFLOW_s_n                            ; 0x8155 ; \"SHRT_OFLOW=%s\\n\"\l0x0000290c      mov edi, 1\l0x00002911      mov rdx, rax\l0x00002914      xor eax, eax\l0x00002916      call sym.imp.__printf_chk\l0x0000291b      mov rcx, r14\l0x0000291e      mov edx, 0x15\l0x00002923      mov rdi, r12\l0x00002926      mov r8, 0xffffffffffff8000\l0x0000292d      mov esi, 1\l0x00002932      xor eax, eax\l0x00002934      call sym.imp.__sprintf_chk\l0x00002939      mov rdx, r12\l0x0000293c      mov edi, 1\l0x00002941      xor eax, eax\l0x00002943      lea rsi, str.SHRT_MIN_s_n                              ; 0x8164 ; \"SHRT_MIN=%s\\n\"\l0x0000294a      call sym.imp.__printf_chk\l0x0000294f      mov rdi, rbp                                           ; int64_t arg1\l0x00002952      call dbg.decimal_absval_add_one\l0x00002957      lea rsi, str.SHRT_UFLOW_s_n                            ; 0x8171 ; \"SHRT_UFLOW=%s\\n\"\l0x0000295e      mov edi, 1\l0x00002963      mov rdx, rax\l0x00002966      xor eax, eax\l0x00002968      call sym.imp.__printf_chk\l0x0000296d      mov r8d, 0x7fffffff\l0x00002973      mov rcx, r13\l0x00002976      xor eax, eax\l0x00002978      mov edx, 0x15\l0x0000297d      mov esi, 1\l0x00002982      mov rdi, r12\l0x00002985      call sym.imp.__sprintf_chk\l0x0000298a      mov rdx, r12\l0x0000298d      mov edi, 1\l0x00002992      xor eax, eax\l0x00002994      lea rsi, [0x0000819b]                                  ; \"INT_MAX=%s\\n\"\l0x0000299b      call sym.imp.__printf_chk\l0x000029a0      mov rdi, rbp                                           ; int64_t arg1\l0x000029a3      call dbg.decimal_absval_add_one\l0x000029a8      lea rsi, [0x000081a8]                                  ; \"INT_OFLOW=%s\\n\"\l0x000029af      mov edi, 1\l0x000029b4      mov rdx, rax\l0x000029b7      xor eax, eax\l0x000029b9      call sym.imp.__printf_chk\l0x000029be      mov rcx, r14\l0x000029c1      mov edx, 0x15\l0x000029c6      mov rdi, r12\l0x000029c9      mov r8, 0xffffffff80000000\l0x000029d0      mov esi, 1\l0x000029d5      xor eax, eax\l0x000029d7      call sym.imp.__sprintf_chk\l0x000029dc      mov rdx, r12\l0x000029df      mov edi, 1\l0x000029e4      xor eax, eax\l0x000029e6      lea rsi, str.INT_MIN_s_n                               ; 0x8180 ; \"INT_MIN=%s\\n\"\l0x000029ed      call sym.imp.__printf_chk\l0x000029f2      mov rdi, rbp                                           ; int64_t arg1\l0x000029f5      call dbg.decimal_absval_add_one\l0x000029fa      lea rsi, str.INT_UFLOW_s_n                             ; 0x818c ; \"INT_UFLOW=%s\\n\"\l0x00002a01      mov edi, 1\l0x00002a06      mov rdx, rax\l0x00002a09      xor eax, eax\l0x00002a0b      call sym.imp.__printf_chk\l0x00002a10      mov r8d, 0xffffffff                                    ; -1\l0x00002a16      mov rcx, r13\l0x00002a19      xor eax, eax\l0x00002a1b      mov edx, 0x15\l0x00002a20      mov esi, 1\l0x00002a25      mov rdi, r12\l0x00002a28      call sym.imp.__sprintf_chk\l0x00002a2d      mov rdx, r12\l0x00002a30      mov edi, 1\l0x00002a35      xor eax, eax\l0x00002a37      lea rsi, str.UINT_MAX_s_n                              ; 0x819a ; \"UINT_MAX=%s\\n\"\l0x00002a3e      call sym.imp.__printf_chk\l0x00002a43      mov rdi, rbp                                           ; int64_t arg1\l0x00002a46      call dbg.decimal_absval_add_one\l0x00002a4b      lea rsi, str.UINT_OFLOW_s_n                            ; 0x81a7 ; \"UINT_OFLOW=%s\\n\"\l0x00002a52      mov edi, 1\l0x00002a57      mov rdx, rax\l0x00002a5a      xor eax, eax\l0x00002a5c      call sym.imp.__printf_chk\l0x00002a61      mov rcx, r13\l0x00002a64      mov edx, 0x15\l0x00002a69      mov rdi, r12\l0x00002a6c      movabs r8, 0x7fffffffffffffff                          ; 9223372036854775807\l0x00002a76      mov esi, 1\l0x00002a7b      xor eax, eax\l0x00002a7d      call sym.imp.__sprintf_chk\l0x00002a82      mov rdx, r12\l0x00002a85      mov edi, 1\l0x00002a8a      xor eax, eax\l0x00002a8c      lea rsi, [0x000081d3]                                  ; \"LONG_MAX=%s\\n\"\l0x00002a93      call sym.imp.__printf_chk\l0x00002a98      mov rdi, rbp                                           ; int64_t arg1\l0x00002a9b      call dbg.decimal_absval_add_one\l0x00002aa0      lea rsi, [0x000081e1]                                  ; \"LONG_OFLOW=%s\\n\"\l0x00002aa7      mov edi, 1\l0x00002aac      mov rdx, rax\l0x00002aaf      xor eax, eax\l0x00002ab1      call sym.imp.__printf_chk\l0x00002ab6      mov rcx, r14\l0x00002ab9      mov edx, 0x15\l0x00002abe      mov rdi, r12\l0x00002ac1      movabs r8, 0x8000000000000000\l0x00002acb      mov esi, 1\l0x00002ad0      xor eax, eax\l0x00002ad2      call sym.imp.__sprintf_chk\l0x00002ad7      mov rdx, r12\l0x00002ada      mov edi, 1\l0x00002adf      xor eax, eax\l0x00002ae1      lea rsi, str.LONG_MIN_s_n                              ; 0x81b6 ; \"LONG_MIN=%s\\n\"\l0x00002ae8      call sym.imp.__printf_chk\l0x00002aed      mov rdi, rbp                                           ; int64_t arg1\l0x00002af0      call dbg.decimal_absval_add_one\l; DATA XREF from dbg.version_etc_arn @ 0x61e4\l0x00002af5      lea rsi, str.LONG_UFLOW_s_n                            ; 0x81c3 ; \"LONG_UFLOW=%s\\n\"\l0x00002afc      mov edi, 1\l0x00002b01      mov rdx, rax\l0x00002b04      xor eax, eax\l0x00002b06      call sym.imp.__printf_chk\l0x00002b0b      mov rcx, r13\l0x00002b0e      mov edx, 0x15\l0x00002b13      mov rdi, r12\l0x00002b16      mov r8, 0xffffffffffffffff\l0x00002b1d      mov esi, 1\l0x00002b22      xor eax, eax\l0x00002b24      call sym.imp.__sprintf_chk\l0x00002b29      mov rdx, r12\l0x00002b2c      mov edi, 1\l0x00002b31      xor eax, eax\l0x00002b33      lea rsi, str.ULONG_MAX_s_n                             ; 0x81d2 ; \"ULONG_MAX=%s\\n\"\l0x00002b3a      call sym.imp.__printf_chk\l0x00002b3f      mov rdi, rbp                                           ; int64_t arg1\l0x00002b42      call dbg.decimal_absval_add_one\l0x00002b47      lea rsi, str.ULONG_OFLOW_s_n                           ; 0x81e0 ; \"ULONG_OFLOW=%s\\n\"\l0x00002b4e      mov edi, 1\l0x00002b53      mov rdx, rax\l0x00002b56      xor eax, eax\l0x00002b58      call sym.imp.__printf_chk\l0x00002b5d      mov rcx, r13\l0x00002b60      mov edx, 0x15\l0x00002b65      mov rdi, r12\l0x00002b68      mov r8, 0xffffffffffffffff\l0x00002b6f      mov esi, 1\l0x00002b74      xor eax, eax\l0x00002b76      call sym.imp.__sprintf_chk\l0x00002b7b      mov rdx, r12\l0x00002b7e      mov edi, 1\l0x00002b83      xor eax, eax\l0x00002b85      lea rsi, [0x000081f1]                                  ; \"SIZE_MAX=%s\\n\"\l0x00002b8c      call sym.imp.__printf_chk\l0x00002b91      mov rdi, rbp                                           ; int64_t arg1\l0x00002b94      call dbg.decimal_absval_add_one\l0x00002b99      lea rsi, [0x000081ff]                                  ; \"SIZE_OFLOW=%s\\n\"\l0x00002ba0      mov edi, 1\l0x00002ba5      mov rdx, rax\l0x00002ba8      xor eax, eax\l0x00002baa      call sym.imp.__printf_chk\l0x00002baf      mov rcx, r13\l0x00002bb2      mov edx, 0x15\l0x00002bb7      mov rdi, r12\l0x00002bba      movabs r8, 0x7fffffffffffffff                          ; 9223372036854775807\l0x00002bc4      mov esi, 1\l0x00002bc9      xor eax, eax\l0x00002bcb      call sym.imp.__sprintf_chk\l0x00002bd0      mov rdx, r12\l0x00002bd3      mov edi, 1\l0x00002bd8      xor eax, eax\l0x00002bda      lea rsi, str.SSIZE_MAX_s_n                             ; 0x81f0 ; \"SSIZE_MAX=%s\\n\"\l0x00002be1      call sym.imp.__printf_chk\l0x00002be6      mov rdi, rbp                                           ; int64_t arg1\l0x00002be9      call dbg.decimal_absval_add_one\l0x00002bee      lea rsi, str.SSIZE_OFLOW_s_n                           ; 0x81fe ; \"SSIZE_OFLOW=%s\\n\"\l0x00002bf5      mov edi, 1\l0x00002bfa      mov rdx, rax\l0x00002bfd      xor eax, eax\l0x00002bff      call sym.imp.__printf_chk\l0x00002c04      mov rcx, r14\l0x00002c07      mov edx, 0x15\l0x00002c0c      mov rdi, r12\l0x00002c0f      movabs r8, 0x8000000000000000\l0x00002c19      mov esi, 1\l0x00002c1e      xor eax, eax\l0x00002c20      call sym.imp.__sprintf_chk\l0x00002c25      mov rdx, r12\l0x00002c28      mov edi, 1\l0x00002c2d      xor eax, eax\l0x00002c2f      lea rsi, str.SSIZE_MIN_s_n                             ; 0x820e ; \"SSIZE_MIN=%s\\n\"\l0x00002c36      call sym.imp.__printf_chk\l0x00002c3b      mov rdi, rbp                                           ; int64_t arg1\l0x00002c3e      call dbg.decimal_absval_add_one\l0x00002c43      lea rsi, str.SSIZE_UFLOW_s_n                           ; 0x821c ; \"SSIZE_UFLOW=%s\\n\"\l0x00002c4a      mov edi, 1\l0x00002c4f      mov rdx, rax\l0x00002c52      xor eax, eax\l0x00002c54      call sym.imp.__printf_chk\l0x00002c59      mov rcx, r13\l0x00002c5c      mov edx, 0x15\l0x00002c61      mov rdi, r12\l0x00002c64      movabs r8, 0x7fffffffffffffff                          ; 9223372036854775807\l0x00002c6e      mov esi, 1\l0x00002c73      xor eax, eax\l0x00002c75      call sym.imp.__sprintf_chk\l0x00002c7a      mov rdx, r12\l0x00002c7d      mov edi, 1\l0x00002c82      xor eax, eax\l0x00002c84      lea rsi, str.TIME_T_MAX_s_n                            ; 0x822c ; \"TIME_T_MAX=%s\\n\"\l0x00002c8b      call sym.imp.__printf_chk\l0x00002c90      mov rdi, rbp                                           ; int64_t arg1\l0x00002c93      call dbg.decimal_absval_add_one\l0x00002c98      lea rsi, str.TIME_T_OFLOW_s_n                          ; 0x823b ; \"TIME_T_OFLOW=%s\\n\"\l0x00002c9f      mov edi, 1\l0x00002ca4      mov rdx, rax\l0x00002ca7      xor eax, eax\l0x00002ca9      call sym.imp.__printf_chk\l0x00002cae      xor eax, eax\l0x00002cb0      mov rcx, r14\l0x00002cb3      mov edx, 0x15\l0x00002cb8      movabs r8, 0x8000000000000000\l0x00002cc2      mov esi, 1\l0x00002cc7      mov rdi, r12\l0x00002cca      call sym.imp.__sprintf_chk\l0x00002ccf      mov rdx, r12\l0x00002cd2      mov edi, 1\l0x00002cd7      xor eax, eax\l0x00002cd9      lea rsi, str.TIME_T_MIN_s_n                            ; 0x824c ; \"TIME_T_MIN=%s\\n\"\l0x00002ce0      call sym.imp.__printf_chk\l0x00002ce5      mov rdi, rbp                                           ; int64_t arg1\l0x00002ce8      call dbg.decimal_absval_add_one\l0x00002ced      lea rsi, str.TIME_T_UFLOW_s_n                          ; 0x825b ; \"TIME_T_UFLOW=%s\\n\"\l0x00002cf4      mov edi, 1\l0x00002cf9      mov rdx, rax\l0x00002cfc      xor eax, eax\l0x00002cfe      call sym.imp.__printf_chk\l0x00002d03      mov r8d, 0xffffffff                                    ; -1\l0x00002d09      mov rcx, r13\l0x00002d0c      xor eax, eax\l0x00002d0e      mov edx, 0x15\l0x00002d13      mov esi, 1\l0x00002d18      mov rdi, r12\l0x00002d1b      call sym.imp.__sprintf_chk\l0x00002d20      mov rdx, r12\l0x00002d23      mov edi, 1\l0x00002d28      xor eax, eax\l0x00002d2a      lea rsi, str.UID_T_MAX_s_n                             ; 0x826c ; \"UID_T_MAX=%s\\n\"\l0x00002d31      call sym.imp.__printf_chk\l0x00002d36      mov rdi, rbp                                           ; int64_t arg1\l0x00002d39      call dbg.decimal_absval_add_one\l0x00002d3e      lea rsi, str.UID_T_OFLOW_s_n                           ; 0x827a ; \"UID_T_OFLOW=%s\\n\"\l0x00002d45      mov edi, 1\l0x00002d4a      mov rdx, rax\l0x00002d4d      xor eax, eax\l0x00002d4f      call sym.imp.__printf_chk\l0x00002d54      mov r8d, 0xffffffff                                    ; -1\l0x00002d5a      mov rcx, r13\l0x00002d5d      xor eax, eax\l0x00002d5f      mov edx, 0x15\l0x00002d64      mov esi, 1\l0x00002d69      mov rdi, r12\l0x00002d6c      call sym.imp.__sprintf_chk\l0x00002d71      mov rdx, r12\l0x00002d74      mov edi, 1\l0x00002d79      xor eax, eax\l0x00002d7b      lea rsi, str.GID_T_MAX_s_n                             ; 0x828a ; \"GID_T_MAX=%s\\n\"\l0x00002d82      call sym.imp.__printf_chk\l0x00002d87      mov rdi, rbp                                           ; int64_t arg1\l0x00002d8a      call dbg.decimal_absval_add_one\l0x00002d8f      lea rsi, str.GID_T_OFLOW_s_n                           ; 0x8298 ; \"GID_T_OFLOW=%s\\n\"\l0x00002d96      mov edi, 1\l0x00002d9b      mov rdx, rax\l0x00002d9e      xor eax, eax\l0x00002da0      call sym.imp.__printf_chk\l0x00002da5      mov r8d, 0x7fffffff\l0x00002dab      mov rcx, r13\l0x00002dae      xor eax, eax\l0x00002db0      mov edx, 0x15\l0x00002db5      mov esi, 1\l0x00002dba      mov rdi, r12\l0x00002dbd      call sym.imp.__sprintf_chk\l0x00002dc2      mov rdx, r12\l0x00002dc5      mov edi, 1\l0x00002dca      xor eax, eax\l0x00002dcc      lea rsi, str.PID_T_MAX_s_n                             ; 0x82a8 ; \"PID_T_MAX=%s\\n\"\l0x00002dd3      call sym.imp.__printf_chk\l0x00002dd8      mov rdi, rbp                                           ; int64_t arg1\l0x00002ddb      call dbg.decimal_absval_add_one\l0x00002de0      lea rsi, str.PID_T_OFLOW_s_n                           ; 0x82b6 ; \"PID_T_OFLOW=%s\\n\"\l0x00002de7      mov edi, 1\l0x00002dec      mov rdx, rax\l0x00002def      xor eax, eax\l0x00002df1      call sym.imp.__printf_chk\l0x00002df6      mov rcx, r14\l0x00002df9      mov edx, 0x15\l0x00002dfe      mov rdi, r12\l0x00002e01      mov r8, 0xffffffff80000000\l0x00002e08      mov esi, 1\l0x00002e0d      xor eax, eax\l0x00002e0f      call sym.imp.__sprintf_chk\l0x00002e14      mov rdx, r12\l0x00002e17      mov edi, 1\l0x00002e1c      xor eax, eax\l0x00002e1e      lea rsi, str.PID_T_MIN_s_n                             ; 0x82c6 ; \"PID_T_MIN=%s\\n\"\l0x00002e25      call sym.imp.__printf_chk\l; DATA XREF from dbg.dtoastr @ 0x3783\l; DATA XREF from dbg.ftoastr @ 0x38f9\l0x00002e2a      mov rdi, rbp                                           ; int64_t arg1\l0x00002e2d      call dbg.decimal_absval_add_one\l0x00002e32      lea rsi, str.PID_T_UFLOW_s_n                           ; 0x82d4 ; \"PID_T_UFLOW=%s\\n\"\l0x00002e39      mov edi, 1\l0x00002e3e      mov rdx, rax\l0x00002e41      xor eax, eax\l0x00002e43      call sym.imp.__printf_chk\l0x00002e48      mov rcx, r13\l0x00002e4b      mov edx, 0x15\l0x00002e50      mov rdi, r12\l0x00002e53      movabs r8, 0x7fffffffffffffff                          ; 9223372036854775807\l0x00002e5d      mov esi, 1\l0x00002e62      xor eax, eax\l0x00002e64      call sym.imp.__sprintf_chk\l0x00002e69      mov rdx, r12\l0x00002e6c      mov edi, 1\l0x00002e71      xor eax, eax\l0x00002e73      lea rsi, str.OFF_T_MAX_s_n                             ; 0x82e4 ; \"OFF_T_MAX=%s\\n\"\l0x00002e7a      call sym.imp.__printf_chk\l0x00002e7f      mov rdi, rbp                                           ; int64_t arg1\l0x00002e82      call dbg.decimal_absval_add_one\l0x00002e87      lea rsi, str.OFF_T_OFLOW_s_n                           ; 0x82f2 ; \"OFF_T_OFLOW=%s\\n\"\l0x00002e8e      mov edi, 1\l0x00002e93      mov rdx, rax\l0x00002e96      xor eax, eax\l0x00002e98      call sym.imp.__printf_chk\l0x00002e9d      mov rcx, r14\l0x00002ea0      mov edx, 0x15\l0x00002ea5      mov rdi, r12\l0x00002ea8      movabs r8, 0x8000000000000000\l0x00002eb2      mov esi, 1\l0x00002eb7      xor eax, eax\l0x00002eb9      call sym.imp.__sprintf_chk\l0x00002ebe      mov rdx, r12\l0x00002ec1      mov edi, 1\l0x00002ec6      xor eax, eax\l0x00002ec8      lea rsi, str.OFF_T_MIN_s_n                             ; 0x8302 ; \"OFF_T_MIN=%s\\n\"\l0x00002ecf      call sym.imp.__printf_chk\l0x00002ed4      mov rdi, rbp                                           ; int64_t arg1\l0x00002ed7      call dbg.decimal_absval_add_one\l0x00002edc      lea rsi, str.OFF_T_UFLOW_s_n                           ; 0x8310 ; \"OFF_T_UFLOW=%s\\n\"\l0x00002ee3      mov edi, 1\l0x00002ee8      mov rdx, rax\l0x00002eeb      xor eax, eax\l0x00002eed      call sym.imp.__printf_chk\l0x00002ef2      mov rcx, r13\l0x00002ef5      mov edx, 0x15\l0x00002efa      mov rdi, r12\l0x00002efd      movabs r8, 0x7fffffffffffffff                          ; 9223372036854775807\l0x00002f07      mov esi, 1\l0x00002f0c      xor eax, eax\l0x00002f0e      call sym.imp.__sprintf_chk\l0x00002f13      mov rdx, r12\l0x00002f16      mov edi, 1\l0x00002f1b      xor eax, eax\l0x00002f1d      lea rsi, [0x00008341]                                  ; \"INTMAX_MAX=%s\\n\"\l0x00002f24      call sym.imp.__printf_chk\l0x00002f29      mov rdi, rbp                                           ; int64_t arg1\l0x00002f2c      call dbg.decimal_absval_add_one\l0x00002f31      lea rsi, [0x00008351]                                  ; \"INTMAX_OFLOW=%s\\n\"\l0x00002f38      mov edi, 1\l0x00002f3d      mov rdx, rax\l0x00002f40      xor eax, eax\l0x00002f42      call sym.imp.__printf_chk\l0x00002f47      mov rcx, r14\l0x00002f4a      mov edx, 0x15\l0x00002f4f      mov rdi, r12\l0x00002f52      movabs r8, 0x8000000000000000\l0x00002f5c      mov esi, 1\l0x00002f61      xor eax, eax\l0x00002f63      call sym.imp.__sprintf_chk\l0x00002f68      mov rdx, r12\l0x00002f6b      mov edi, 1\l0x00002f70      xor eax, eax\l0x00002f72      lea rsi, str.INTMAX_MIN_s_n                            ; 0x8320 ; \"INTMAX_MIN=%s\\n\"\l0x00002f79      call sym.imp.__printf_chk\l0x00002f7e      mov rdi, rbp                                           ; int64_t arg1\l0x00002f81      call dbg.decimal_absval_add_one\l0x00002f86      lea rsi, str.INTMAX_UFLOW_s_n                          ; 0x832f ; \"INTMAX_UFLOW=%s\\n\"\l0x00002f8d      mov edi, 1\l0x00002f92      mov rdx, rax\l0x00002f95      xor eax, eax\l0x00002f97      call sym.imp.__printf_chk\l0x00002f9c      mov rcx, r13\l0x00002f9f      mov edx, 0x15\l0x00002fa4      mov rdi, r12\l0x00002fa7      mov r8, 0xffffffffffffffff\l0x00002fae      mov esi, 1\l0x00002fb3      xor eax, eax\l0x00002fb5      call sym.imp.__sprintf_chk\l0x00002fba      mov rdx, r12\l0x00002fbd      mov edi, 1\l0x00002fc2      xor eax, eax\l0x00002fc4      lea rsi, str.UINTMAX_MAX_s_n                           ; 0x8340 ; \"UINTMAX_MAX=%s\\n\"\l0x00002fcb      call sym.imp.__printf_chk\l0x00002fd0      mov rdi, rbp                                           ; int64_t arg1\l0x00002fd3      call dbg.decimal_absval_add_one\l0x00002fd8      lea rsi, str.UINTMAX_OFLOW_s_n                         ; 0x8350 ; \"UINTMAX_OFLOW=%s\\n\"\l0x00002fdf      mov edi, 1\l0x00002fe4      mov rdx, rax\l0x00002fe7      xor eax, eax\l0x00002fe9      call sym.imp.__printf_chk\l0x00002fee      lea rsi, str.FLT_MIN                                   ; 0x8362 ; \"FLT_MIN=\"\l0x00002ff5      mov edi, 1\l0x00002ffa      xor eax, eax\l0x00002ffc      call sym.imp.__printf_chk\l0x00003001      movss xmm0, dword [0x0000850c]                         ; [0x850c:4]=0x800000\l0x00003009      call dbg.print_FLT\l0x0000300e      lea rsi, str.FLT_MAX                                   ; 0x836b ; \"FLT_MAX=\"\l0x00003015      mov edi, 1\l0x0000301a      xor eax, eax\l0x0000301c      call sym.imp.__printf_chk\l0x00003021      movss xmm0, dword [0x00008510]                         ; [0x8510:4]=0x7f7fffff\l0x00003029      call dbg.print_FLT\l0x0000302e      lea rsi, [0x00008375]                                  ; \"DBL_MIN=\"\l0x00003035      mov edi, 1\l0x0000303a      xor eax, eax\l0x0000303c      call sym.imp.__printf_chk\l0x00003041      movsd xmm0, qword [0x00008518]                         ; [0x8518:8]=0x10000000000000\l0x00003049      call dbg.print_DBL\l0x0000304e      lea rsi, [0x0000837f]                                  ; \"DBL_MAX=\"\l0x00003055      mov edi, 1\l0x0000305a      xor eax, eax\l0x0000305c      call sym.imp.__printf_chk\l0x00003061      movsd xmm0, qword [0x00008520]                         ; [0x8520:8]=0x7fefffffffffffff\l0x00003069      call dbg.print_DBL\l0x0000306e      lea rsi, str.LDBL_MIN                                  ; 0x8374 ; \"LDBL_MIN=\"\l0x00003075      mov edi, 1\l0x0000307a      xor eax, eax\l0x0000307c      call sym.imp.__printf_chk\l0x00003081      push 1                                                 ; \"\\\"\\\"?\"\l0x00003083      movabs rax, 0x8000000000000000\l0x0000308d      push rax\l0x0000308e      call dbg.print_LDBL\l0x00003093      mov rsp, rbp\l0x00003096      mov edi, 1\l0x0000309b      xor eax, eax\l0x0000309d      lea rsi, str.LDBL_MAX                                  ; 0x837e ; \"LDBL_MAX=\"\l0x000030a4      call sym.imp.__printf_chk\l0x000030a9      push 0x7ffe\l0x000030ae      push 0xffffffffffffffff\l0x000030b0      call dbg.print_LDBL\l0x000030b5      mov rsp, rbp\l0x000030b8      mov rax, qword [var_18h_2]\l0x000030bd      sub rax, qword fs:[0x28]\l0x000030c6      jne 0x30d6\l"]
	"0x000030c8" [URL="dbg.main/0x000030c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030c8      add rsp, 0x28\l0x000030cc      xor eax, eax\l0x000030ce      pop rbp\l0x000030cf      pop r12\l0x000030d1      pop r13\l0x000030d3      pop r14\l0x000030d5      ret\l"]
	"0x000030d6" [URL="dbg.main/0x000030d6", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30c6\l0x000030d6      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x00002680" -> "0x000030d6" [color="#13a10e"];
        "0x00002680" -> "0x000030c8" [color="#c50f1f"];
}
