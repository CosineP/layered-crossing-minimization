digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000025e0" [URL="dbg.main/0x000025e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2818\l530: int dbg.main (int argc, char **argv);\l; var int64_t var_20h @ rsp+0x20\l; var size_t *var_8h @ rsp+0x28\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000025e0      endbr64                                                ; int main(int argc,char ** argv);\l0x000025e4      push r15\l0x000025e6      push r14\l0x000025e8      push r13\l0x000025ea      lea r13, [0x00007082]                                  ; \"coreutils\"\l0x000025f1      push r12\l0x000025f3      mov r12d, edi                                          ; argc\l0x000025f6      push rbp\l0x000025f7      mov rbp, rsi                                           ; argv\l0x000025fa      push rbx\l0x000025fb      sub rsp, 0x18\l0x000025ff      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002602      call dbg.set_program_name\l0x00002607      lea rsi, [0x00007721]                                  ; const char *locale\l0x0000260e      mov edi, 6                                             ; int category\l0x00002613      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002618      lea rsi, str._usr_local_share_locale                   ; 0x70ab ; \"/usr/local/share/locale\" ; char *dirname\l0x0000261f      mov rdi, r13                                           ; char *domainname\l0x00002622      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002627      mov rdi, r13                                           ; char *domainname\l0x0000262a      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x0000262f      lea rdi, [dbg.close_stdout]                            ; 0x2c50 ; func function\l0x00002636      call sym.atexit                                        ; int atexit(func function)\l0x0000263b      sub rsp, 8\l0x0000263f      mov rsi, rbp                                           ; int argc\l0x00002642      lea rax, str.David_MacKenzie                           ; 0x70c3 ; \"David MacKenzie\"\l0x00002649      push 0\l0x0000264b      mov r9d, 1\l0x00002651      mov edi, r12d                                          ; int64_t arg3\l0x00002654      mov r8, qword [obj.Version]                            ; [0xb010:8]=0x728b\l0x0000265b      push rax\l0x0000265c      lea rax, [dbg.usage]                                   ; 0x28f0\l0x00002663      lea rcx, str.GNU_coreutils                             ; 0x707e ; \"GNU coreutils\"\l0x0000266a      push rax\l0x0000266b      lea rdx, [0x00007004]                                  ; \"yes\" ; int64_t arg5\l0x00002672      xor eax, eax\l0x00002674      call dbg.parse_gnu_standard_options_only\l0x00002679      movsxd rdx, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=0\l0x00002680      mov rax, rdx\l0x00002683      lea rbx, [rbp + rdx*8]\l0x00002688      movsxd rdx, r12d\l0x0000268b      lea rcx, [rbp + rdx*8]\l0x00002690      mov qword [var_20h], rcx\l0x00002695      add rsp, 0x20\l0x00002699      cmp eax, r12d\l0x0000269c      jne 0x26b3\l"]
	"0x0000269e" [URL="dbg.main/0x0000269e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000269e      mov rax, rcx\l0x000026a1      lea rcx, [0x000070d3]                                  ; \"y\"\l0x000026a8      mov qword [rax], rcx\l0x000026ab      add rax, 8\l0x000026af      mov qword [rsp], rax\l"]
	"0x000026b3" [URL="dbg.main/0x000026b3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x269c\l0x000026b3      mov rbp, qword [rbx]\l0x000026b6      mov r14, rbx\l0x000026b9      mov r13d, 1\l0x000026bf      xor r12d, r12d\l0x000026c2      mov r15, rbp\l0x000026c5      nop dword [rax]\l"]
	"0x000026c8" [URL="dbg.main/0x000026c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x276a\l0x000026c8      mov rdi, r15                                           ; const char *s\l0x000026cb      add r14, 8\l0x000026cf      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x000026d4      add rax, 1\l0x000026d8      add r12, rax\l0x000026db      cmp r14, qword [rsp]\l0x000026df      jb 0x2758\l"]
	"0x000026e1" [URL="dbg.main/0x000026e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000026e1      cmp r12, 0x1000\l0x000026e8      jbe 0x273c\l"]
	"0x000026ea" [URL="dbg.main/0x000026ea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000026ea      test r13b, r13b\l0x000026ed      je 0x2742\l"]
	"0x000026ef" [URL="dbg.main/0x000026ef", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2750\l0x000026ef      xor r14d, r14d\l0x000026f2      jmp 0x2710\l"]
	"0x000026f8" [URL="dbg.main/0x000026f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x272b, 0x273a\l0x000026f8      lea rdx, [r14 + r15]\l0x000026fc      add rbx, 8\l0x00002700      lea r14, [rdx + 1]\l0x00002704      add rdx, rbp\l0x00002707      mov byte [rdx], 0x20                                   ; [0x20:1]=64 ; \"@\"\l0x0000270a      cmp qword [rsp], rbx\l0x0000270e      jbe 0x2770\l"]
	"0x00002710" [URL="dbg.main/0x00002710", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26f2\l0x00002710      mov rsi, qword [rbx]\l0x00002713      mov rdi, rsi                                           ; const char *s\l0x00002716      mov qword [var_8h], rsi\l0x0000271b      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00002720      test r13b, r13b\l0x00002723      mov rsi, qword [var_8h]\l0x00002728      mov r15, rax\l0x0000272b      jne 0x26f8\l"]
	"0x0000272d" [URL="dbg.main/0x0000272d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000272d      lea rdi, [rbp + r14]                                   ; void *s1\l0x00002732      mov rdx, rax                                           ; size_t n\l0x00002735      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0000273a      jmp 0x26f8\l"]
	"0x0000273c" [URL="dbg.main/0x0000273c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26e8\l0x0000273c      mov r12d, sym._init                                    ; 0x2000\l"]
	"0x00002742" [URL="dbg.main/0x00002742", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26ed\l0x00002742      mov rdi, r12                                           ; size_t size\l0x00002745      xor r13d, r13d\l0x00002748      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x0000274d      mov rbp, rax\l0x00002750      jmp 0x26ef\l"]
	"0x00002758" [URL="dbg.main/0x00002758", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x26df\l0x00002758      add rax, r15\l0x0000275b      mov r15, qword [r14]\l0x0000275e      cmp rax, r15\l0x00002761      mov eax, 0\l0x00002766      cmovne r13d, eax\l0x0000276a      jmp 0x26c8\l"]
	"0x00002770" [URL="dbg.main/0x00002770", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x270e\l0x00002770      mov rax, r12\l0x00002773      mov byte [rdx], 0xa\l0x00002776      xor edx, edx\l0x00002778      div r14\l0x0000277b      mov rbx, rax\l0x0000277e      mov r12, rax\l0x00002781      sub rbx, 1\l0x00002785      je 0x27ab\l"]
	"0x00002787" [URL="dbg.main/0x00002787", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002787      lea rdi, [rbp + r14]\l0x0000278c      nop dword [rax]\l"]
	"0x00002790" [URL="dbg.main/0x00002790", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27a5\l0x00002790      mov rdx, r14                                           ; size_t n\l0x00002793      mov rsi, rbp                                           ; const void *s2\l0x00002796      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0000279b      mov rdi, rax\l0x0000279e      add rdi, r14\l0x000027a1      sub rbx, 1\l0x000027a5      jne 0x2790\l"]
	"0x000027a7" [URL="dbg.main/0x000027a7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027a7      imul r14, r12\l"]
	"0x000027ab" [URL="dbg.main/0x000027ab", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2785, 0x27be\l0x000027ab      mov rdx, r14                                           ; int64_t arg3\l0x000027ae      mov rsi, rbp                                           ; int64_t arg2\l0x000027b1      mov edi, 1                                             ; int64_t arg1\l0x000027b6      call dbg.full_write\l0x000027bb      cmp r14, rax\l0x000027be      je 0x27ab\l"]
	"0x000027c0" [URL="dbg.main/0x000027c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027c0      mov edx, 5\l0x000027c5      lea rsi, str.standard_output                           ; 0x70d5 ; \"standard output\"\l0x000027cc      xor edi, edi\l0x000027ce      call sym.imp.dcgettext\l0x000027d3      mov r12, rax\l0x000027d6      call sym.imp.__errno_location\l0x000027db      mov rdx, r12                                           ; char *format\l0x000027de      xor edi, edi                                           ; int status\l0x000027e0      mov esi, dword [rax]                                   ; int errname\l0x000027e2      xor eax, eax\l0x000027e4      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000027e9      add rsp, 0x18\l0x000027ed      mov eax, 1\l0x000027f2      pop rbx\l0x000027f3      pop rbp\l0x000027f4      pop r12\l0x000027f6      pop r13\l0x000027f8      pop r14\l0x000027fa      pop r15\l0x000027fc      ret\l"]
        "0x000025e0" -> "0x000026b3" [color="#13a10e"];
        "0x000025e0" -> "0x0000269e" [color="#c50f1f"];
        "0x0000269e" -> "0x000026b3" [color="#3a96dd"];
        "0x000026b3" -> "0x000026c8" [color="#3a96dd"];
        "0x000026c8" -> "0x00002758" [color="#13a10e"];
        "0x000026c8" -> "0x000026e1" [color="#c50f1f"];
        "0x000026e1" -> "0x0000273c" [color="#13a10e"];
        "0x000026e1" -> "0x000026ea" [color="#c50f1f"];
        "0x000026ea" -> "0x00002742" [color="#13a10e"];
        "0x000026ea" -> "0x000026ef" [color="#c50f1f"];
        "0x000026ef" -> "0x00002710" [color="#3a96dd"];
        "0x000026f8" -> "0x00002770" [color="#13a10e"];
        "0x000026f8" -> "0x00002710" [color="#c50f1f"];
        "0x00002710" -> "0x000026f8" [color="#13a10e"];
        "0x00002710" -> "0x0000272d" [color="#c50f1f"];
        "0x0000272d" -> "0x000026f8" [color="#3a96dd"];
        "0x0000273c" -> "0x00002742" [color="#3a96dd"];
        "0x00002742" -> "0x000026ef" [color="#3a96dd"];
        "0x00002758" -> "0x000026c8" [color="#3a96dd"];
        "0x00002770" -> "0x000027ab" [color="#13a10e"];
        "0x00002770" -> "0x00002787" [color="#c50f1f"];
        "0x00002787" -> "0x00002790" [color="#3a96dd"];
        "0x00002790" -> "0x00002790" [color="#13a10e"];
        "0x00002790" -> "0x000027a7" [color="#c50f1f"];
        "0x000027a7" -> "0x000027ab" [color="#3a96dd"];
        "0x000027ab" -> "0x000027ab" [color="#13a10e"];
        "0x000027ab" -> "0x000027c0" [color="#c50f1f"];
}
