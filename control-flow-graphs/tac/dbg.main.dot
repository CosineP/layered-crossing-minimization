digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002970" [URL="dbg.main/0x00002970", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x30f8\l1881: int dbg.main (int argc, char **argv);\l; var int64_t var_8h @ rsp+0x18\l; var int64_t var_10h @ rsp+0x20\l; var int64_t var_1fh @ rsp+0x2f\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002970      endbr64                                                ; int main(int argc,char ** argv);\l0x00002974      push r15\l0x00002976      push r14\l0x00002978      push r13\l0x0000297a      lea r13, obj.longopts                                  ; 0x1ba80\l0x00002981      push r12\l0x00002983      lea r12, [0x000160b2]                                  ; \"coreutils\"\l0x0000298a      push rbp\l0x0000298b      mov ebp, edi                                           ; argc\l0x0000298d      push rbx\l0x0000298e      mov rbx, rsi                                           ; argv\l0x00002991      sub rsp, 0x28\l0x00002995      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002998      call dbg.set_program_name\l0x0000299d      lea rsi, [0x000169c1]                                  ; const char *locale\l0x000029a4      mov edi, 6                                             ; int category\l0x000029a9      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000029ae      lea rsi, str._usr_local_share_locale                   ; 0x160e2 ; \"/usr/local/share/locale\" ; char *dirname\l0x000029b5      mov rdi, r12                                           ; char *domainname\l0x000029b8      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000029bd      mov rdi, r12                                           ; char *domainname\l0x000029c0      lea r12, str.brs:                                      ; 0x16116 ; \"brs:\"\l0x000029c7      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000029cc      lea rdi, [dbg.close_stdout]                            ; 0x3c90 ; func function\l0x000029d3      call sym.atexit                                        ; int atexit(func function)\l0x000029d8      lea rax, [0x000169c0]                                  ; \"\\n\"\l0x000029df      mov qword [obj.sentinel_length], 1                     ; [0x1e280:8]=1\l0x000029ea      mov qword [obj.separator], rax                         ; [0x1e290:8]=0\l0x000029f1      mov byte [obj.separator_ends_record], 1                ; [0x1e288:1]=0\l"]
	"0x000029f8" [URL="dbg.main/0x000029f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a2f, 0x2a97, 0x2ab7\l0x000029f8      xor r8d, r8d\l0x000029fb      mov rcx, r13\l0x000029fe      mov rdx, r12\l0x00002a01      mov rsi, rbx\l0x00002a04      mov edi, ebp\l0x00002a06      call sym.imp.getopt_long\l0x00002a0b      cmp eax, 0xffffffff\l0x00002a0e      je 0x2abc\l"]
	"0x00002a14" [URL="dbg.main/0x00002a14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a14      cmp eax, 0x62\l0x00002a17      je 0x2ab0\l"]
	"0x00002a1d" [URL="dbg.main/0x00002a1d", fillcolor="white",color="#767676", fontname="Courier",label="0x00002a1d      jle 0x2a38\l"]
	"0x00002a1f" [URL="dbg.main/0x00002a1f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a1f      cmp eax, 0x72\l0x00002a22      jne 0x2a80\l"]
	"0x00002a24" [URL="dbg.main/0x00002a24", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a24      mov qword [obj.sentinel_length], 0                     ; [0x1e280:8]=1\l0x00002a2f      jmp 0x29f8\l"]
	"0x00002a38" [URL="dbg.main/0x00002a38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a1d\l0x00002a38      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002a3d      jne 0x2a9c\l"]
	"0x00002a3f" [URL="dbg.main/0x00002a3f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a3f      sub rsp, 8\l0x00002a43      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x1c088:8]=0 ; func main\l0x00002a4a      xor eax, eax\l0x00002a4c      mov rcx, qword [obj.Version]                           ; [0x1c010:8]=0x16537 \"9.0\" ; \"7e\\x01\" ; func init\l0x00002a53      push 0\l0x00002a55      lea r9, str.David_MacKenzie                            ; 0x160fa ; \"David MacKenzie\" ; int64_t arg_c0h\l0x00002a5c      lea r8, str.Jay_Lepreau                                ; 0x1610a ; \"Jay Lepreau\" ; int64_t arg6\l0x00002a63      lea rdx, str.GNU_coreutils                             ; 0x160ae ; \"GNU coreutils\" ; int64_t arg3\l0x00002a6a      lea rsi, [0x00016034]                                  ; \"tac\" ; int64_t arg2\l0x00002a71      call dbg.version_etc\l0x00002a76      xor edi, edi                                           ; int status\l0x00002a78      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002a80" [URL="dbg.main/0x00002a80", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a22\l0x00002a80      cmp eax, 0x73\l0x00002a83      jne 0x301a\l"]
	"0x00002a89" [URL="dbg.main/0x00002a89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a89      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x1c0a0:8]=0\l0x00002a90      mov qword [obj.separator], rax                         ; [0x1e290:8]=0\l0x00002a97      jmp 0x29f8\l"]
	"0x00002a9c" [URL="dbg.main/0x00002a9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a3d\l0x00002a9c      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002aa1      jne 0x301a\l"]
	"0x00002aa7" [URL="dbg.main/0x00002aa7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002aa7      xor edi, edi                                           ; int64_t arg1\l0x00002aa9      call dbg.usage\l0x00002aae      nop\l"]
	"0x00002ab0" [URL="dbg.main/0x00002ab0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a17\l0x00002ab0      mov byte [obj.separator_ends_record], 0                ; [0x1e288:1]=0\l0x00002ab7      jmp 0x29f8\l"]
	"0x00002abc" [URL="dbg.main/0x00002abc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a0e\l0x00002abc      mov r12, qword [obj.separator]                         ; [0x1e290:8]=0\l0x00002ac3      cmp qword [obj.sentinel_length], 0                     ; [0x1e280:8]=1\l0x00002acb      movzx edx, byte [r12]\l0x00002ad0      jne 0x2f44\l"]
	"0x00002ad6" [URL="dbg.main/0x00002ad6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ad6      test dl, dl\l0x00002ad8      je 0x30ae\l"]
	"0x00002ade" [URL="dbg.main/0x00002ade", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ade      lea rax, obj.compiled_separator_fastmap                ; 0x1e120\l0x00002ae5      mov rdi, r12                                           ; const char *s\l0x00002ae8      mov qword [obj.compiled_separator], 0                  ; [0x1e220:8]=0\l0x00002af3      mov qword [0x0001e228], 0                              ; [0x1e228:8]=0\l0x00002afe      mov qword [0x0001e240], rax                            ; [0x1e240:8]=0x1e120 obj.compiled_separator_fastmap\l0x00002b05      mov qword [0x0001e248], 0                              ; [0x1e248:8]=0\l0x00002b10      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00002b15      lea rdx, obj.compiled_separator                        ; 0x1e220 ; int64_t arg3\l0x00002b1c      mov rdi, r12                                           ; int64_t arg1\l0x00002b1f      mov rsi, rax                                           ; int64_t arg2\l0x00002b22      call dbg.rpl_re_compile_pattern\l0x00002b27      test rax, rax\l0x00002b2a      jne 0x3030\l"]
	"0x00002b30" [URL="dbg.main/0x00002b30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f63\l0x00002b30      mov rsi, qword [obj.sentinel_length]                   ; [0x1e280:8]=1\l0x00002b37      mov edx, 0x32                                          ; '2'\l0x00002b3c      mov eax, sym._init                                     ; 0x2000\l0x00002b41      mov qword [obj.read_size], 0x2000                      ; [0x1e268:8]=0\l0x00002b4c      cmp rsi, 0xfff\l0x00002b53      ja 0x2b69\l"]
	"0x00002b55" [URL="dbg.main/0x00002b55", fillcolor="white",color="#767676", fontname="Courier",label="0x00002b55      jmp 0x2b7e\l"]
	"0x00002b60" [URL="dbg.main/0x00002b60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b75\l0x00002b60      sub edx, 1\l0x00002b63      je 0x3024\l"]
	"0x00002b69" [URL="dbg.main/0x00002b69", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b53\l0x00002b69      add rax, rax\l0x00002b6c      mov rcx, rax\l0x00002b6f      shr rcx, 1\l0x00002b72      cmp rcx, rsi\l0x00002b75      jbe 0x2b60\l"]
	"0x00002b77" [URL="dbg.main/0x00002b77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b77      mov qword [obj.read_size], rax                         ; [0x1e268:8]=0\l"]
	"0x00002b7e" [URL="dbg.main/0x00002b7e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b55\l0x00002b7e      lea rdx, [rax + rsi + 1]\l0x00002b83      lea rdi, [rdx + rdx]\l0x00002b87      cmp rdx, rax\l0x00002b8a      setbe al\l0x00002b8d      cmp rdi, rdx\l0x00002b90      mov qword [obj.G_buffer_size], rdi                     ; [0x1e260:8]=3\l0x00002b97      setbe dl\l0x00002b9a      or al, dl\l0x00002b9c      jne 0x30a9\l"]
	"0x00002ba2" [URL="dbg.main/0x00002ba2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ba2      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00002ba7      mov r12, qword [obj.sentinel_length]                   ; [0x1e280:8]=1\l0x00002bae      mov rcx, rax\l0x00002bb1      lea rax, [rax + 1]\l0x00002bb5      test r12, r12\l0x00002bb8      jne 0x2fa2\l"]
	"0x00002bbe" [URL="dbg.main/0x00002bbe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fba\l0x00002bbe      mov qword [obj.G_buffer], rax                          ; [0x1e270:8]=1\l0x00002bc5      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x1c090:4]=0\l0x00002bcc      cmp eax, ebp\l0x00002bce      jge 0x2f31\l"]
	"0x00002bd4" [URL="dbg.main/0x00002bd4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bd4      lea rax, [rbx + rax*8]\l0x00002bd8      mov r14, qword [rax]\l0x00002bdb      test r14, r14\l0x00002bde      je 0x2f68\l"]
	"0x00002be4" [URL="dbg.main/0x00002be4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f3f\l0x00002be4      add rax, 8\l0x00002be8      mov byte [var_1fh], 1\l0x00002bed      mov qword [var_8h], rax\l0x00002bf2      nop word [rax + rax]\l"]
	"0x00002bf8" [URL="dbg.main/0x00002bf8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d5c\l0x00002bf8      movzx ebx, byte [r14]\l0x00002bfc      sub ebx, 0x2d\l0x00002bff      jne 0x2d92\l"]
	"0x00002c05" [URL="dbg.main/0x00002c05", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c05      movzx ebx, byte [r14 + 1]\l0x00002c0a      test ebx, ebx\l0x00002c0c      jne 0x2d92\l"]
	"0x00002c12" [URL="dbg.main/0x00002c12", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c12      mov edx, 5\l0x00002c17      lea rsi, str.standard_input                            ; 0x16135 ; \"standard input\"\l0x00002c1e      xor edi, edi\l0x00002c20      xor ebp, ebp\l; DATA XREF from dbg.parse_expression @ 0x144e3\l0x00002c22      mov byte [obj.have_read_stdin], 1                      ; [0x1e289:1]=1\l0x00002c29      call sym.imp.dcgettext\l0x00002c2e      mov r14, rax\l"]
	"0x00002c31" [URL="dbg.main/0x00002c31", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2da2\l0x00002c31      mov edx, 2\l0x00002c36      xor esi, esi\l0x00002c38      mov edi, ebp\l0x00002c3a      call sym.imp.lseek\l0x00002c3f      mov r12, rax\l0x00002c42      test rax, rax\l0x00002c45      js 0x2c56\l"]
	"0x00002c47" [URL="dbg.main/0x00002c47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c47      mov edi, ebp                                           ; int fd\l0x00002c49      call sym.imp.isatty                                    ; int isatty(int fd)\l0x00002c4e      test eax, eax\l0x00002c50      je 0x2f13\l"]
	"0x00002c56" [URL="dbg.main/0x00002c56", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c45\l0x00002c56      cmp qword [obj.tempfile.3], 0                          ; [0x1e0f0:8]=0\l0x00002c5e      je 0x2ea5\l"]
	"0x00002c64" [URL="dbg.main/0x00002c64", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c64      mov r12, qword [obj.tmp_fp.2]                          ; [0x1e0e8:8]=0\l0x00002c6b      mov rdi, r12\l0x00002c6e      call sym.imp.clearerr_unlocked\l0x00002c73      xor edx, edx                                           ; int64_t arg3\l0x00002c75      xor esi, esi                                           ; int64_t arg2\l0x00002c77      mov rdi, r12                                           ; uint32_t arg1\l0x00002c7a      call dbg.rpl_fseeko\l0x00002c7f      test eax, eax\l0x00002c81      js 0x2e83\l"]
	"0x00002c87" [URL="dbg.main/0x00002c87", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c87      mov rdi, qword [obj.tmp_fp.2]                          ; [0x1e0e8:8]=0 ; FILE *stream\l0x00002c8e      call sym.imp.fileno                                    ; int fileno(FILE *stream)\l0x00002c93      xor esi, esi\l0x00002c95      mov edi, eax\l0x00002c97      call sym.imp.ftruncate\l0x00002c9c      test eax, eax\l0x00002c9e      js 0x2e83\l"]
	"0x00002ca4" [URL="dbg.main/0x00002ca4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f0e\l0x00002ca4      mov rax, qword [obj.tempfile.3]                        ; [0x1e0f0:8]=0\l0x00002cab      mov r13, qword [obj.tmp_fp.2]                          ; [0x1e0e8:8]=0\l0x00002cb2      xor r12d, r12d\l0x00002cb5      mov qword [var_10h], rax\l0x00002cba      jmp 0x2ced\l"]
	"0x00002cc0" [URL="dbg.main/0x00002cc0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d08\l0x00002cc0      cmp rax, 0xffffffffffffffff\l0x00002cc4      je 0x2e1b\l"]
	"0x00002cca" [URL="dbg.main/0x00002cca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cca      mov rdi, qword [obj.G_buffer]                          ; [0x1e270:8]=1\l0x00002cd1      mov rcx, r13\l0x00002cd4      mov rdx, rax\l0x00002cd7      mov esi, 1\l0x00002cdc      call sym.imp.fwrite_unlocked\l0x00002ce1      cmp r15, rax\l0x00002ce4      jne 0x2e61\l"]
	"0x00002cea" [URL="dbg.main/0x00002cea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cea      add r12, r15\l"]
	"0x00002ced" [URL="dbg.main/0x00002ced", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cba\l0x00002ced      mov rdx, qword [obj.read_size]                         ; [0x1e268:8]=0 ; int64_t arg3\l0x00002cf4      mov rsi, qword [obj.G_buffer]                          ; [0x1e270:8]=1 ; int64_t arg2\l0x00002cfb      mov edi, ebp                                           ; int64_t arg1\l0x00002cfd      call dbg.safe_read\l0x00002d02      mov r15, rax\l0x00002d05      test rax, rax\l0x00002d08      jne 0x2cc0\l"]
	"0x00002d0a" [URL="dbg.main/0x00002d0a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d0a      mov rdi, r13\l0x00002d0d      call sym.imp.fflush_unlocked\l0x00002d12      test eax, eax\l0x00002d14      jne 0x2e61\l"]
	"0x00002d1a" [URL="dbg.main/0x00002d1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d1a      test r12, r12\l0x00002d1d      js 0x30a1\l"]
	"0x00002d23" [URL="dbg.main/0x00002d23", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d23      mov rdi, r13                                           ; FILE *stream\l0x00002d26      call sym.imp.fileno                                    ; int fileno(FILE *stream)\l0x00002d2b      mov rsi, qword [var_10h]                               ; int64_t arg2\l0x00002d30      mov rdx, r12                                           ; int64_t arg3\l0x00002d33      mov edi, eax                                           ; int64_t arg1\l0x00002d35      call dbg.tac_seekable\l0x00002d3a      mov r12d, eax\l"]
	"0x00002d3d" [URL="dbg.main/0x00002d3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e5c, 0x2f23, 0x3015, 0x30a4\l0x00002d3d      test ebx, ebx\l0x00002d3f      jne 0x2dec\l"]
	"0x00002d45" [URL="dbg.main/0x00002d45", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2de7, 0x2df5\l0x00002d45      add qword [var_8h], 8\l0x00002d4b      mov rax, qword [var_8h]\l0x00002d50      and byte [var_1fh], r12b\l0x00002d55      mov r14, qword [rax - 8]\l0x00002d59      test r14, r14\l0x00002d5c      jne 0x2bf8\l"]
	"0x00002d62" [URL="dbg.main/0x00002d62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f6d\l0x00002d62      xor esi, esi                                           ; int64_t arg2\l0x00002d64      xor edi, edi                                           ; int64_t arg1\l0x00002d66      call dbg.output\l0x00002d6b      cmp byte [obj.have_read_stdin], 0                      ; [0x1e289:1]=1\l0x00002d72      jne 0x2f72\l"]
	"0x00002d78" [URL="dbg.main/0x00002d78", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2f7b, 0x2f9d\l0x00002d78      movzx eax, byte [var_1fh]\l0x00002d7d      add rsp, 0x28\l0x00002d81      pop rbx\l0x00002d82      pop rbp\l0x00002d83      xor eax, 1\l0x00002d86      pop r12\l0x00002d88      pop r13\l0x00002d8a      movzx eax, al\l0x00002d8d      pop r14\l0x00002d8f      pop r15\l0x00002d91      ret\l"]
	"0x00002d92" [URL="dbg.main/0x00002d92", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2bff, 0x2c0c\l0x00002d92      xor esi, esi                                           ; int oflag\l0x00002d94      mov rdi, r14                                           ; const char *path\l0x00002d97      xor eax, eax\l0x00002d99      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x00002d9e      mov ebp, eax\l0x00002da0      test eax, eax\l0x00002da2      jns 0x2c31\l"]
	"0x00002da8" [URL="dbg.main/0x00002da8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002da8      mov rsi, r14                                           ; int64_t arg2\l0x00002dab      mov edi, 4                                             ; int64_t arg1\l0x00002db0      call sym.quotearg_style\l0x00002db5      mov edx, 5\l0x00002dba      lea rsi, str.failed_to_open__s_for_reading             ; 0x16144 ; \"failed to open %s for reading\"\l0x00002dc1      mov r13, rax\l"]
	"0x00002dc4" [URL="dbg.main/0x00002dc4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e19\l0x00002dc4      xor edi, edi\l0x00002dc6      call sym.imp.dcgettext\l0x00002dcb      mov r12, rax\l0x00002dce      call sym.imp.__errno_location\l0x00002dd3      mov rdx, r12                                           ; char *format\l0x00002dd6      mov rcx, r13\l0x00002dd9      xor edi, edi                                           ; int status\l0x00002ddb      mov esi, dword [rax]                                   ; int errname\l0x00002ddd      xor eax, eax\l0x00002ddf      xor r12d, r12d\l0x00002de2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002de7      jmp 0x2d45\l"]
	"0x00002dec" [URL="dbg.main/0x00002dec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d3f\l0x00002dec      mov edi, ebp                                           ; int fildes\l0x00002dee      call sym.imp.close                                     ; int close(int fildes)\l0x00002df3      test eax, eax\l0x00002df5      je 0x2d45\l"]
	"0x00002dfb" [URL="dbg.main/0x00002dfb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dfb      mov rdx, r14                                           ; int64_t arg3\l0x00002dfe      mov esi, 3                                             ; int64_t arg2\l0x00002e03      xor edi, edi                                           ; int64_t arg1\l0x00002e05      call sym.quotearg_n_style_colon\l0x00002e0a      mov edx, 5\l0x00002e0f      lea rsi, str._s:_read_error                            ; 0x16014 ; \"%s: read error\"\l0x00002e16      mov r13, rax\l0x00002e19      jmp 0x2dc4\l"]
	"0x00002e1b" [URL="dbg.main/0x00002e1b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cc4\l0x00002e1b      mov rdx, r14                                           ; int64_t arg3\l0x00002e1e      mov esi, 3                                             ; int64_t arg2\l0x00002e23      xor edi, edi                                           ; int64_t arg1\l0x00002e25      call sym.quotearg_n_style_colon\l0x00002e2a      mov edx, 5\l0x00002e2f      lea rsi, str._s:_read_error                            ; 0x16014 ; \"%s: read error\"\l0x00002e36      mov r13, rax\l"]
	"0x00002e39" [URL="dbg.main/0x00002e39", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e81, 0x2ea3\l0x00002e39      xor edi, edi\l0x00002e3b      call sym.imp.dcgettext\l0x00002e40      mov r12, rax\l0x00002e43      call sym.imp.__errno_location\l0x00002e48      mov rdx, r12                                           ; char *format\l0x00002e4b      mov rcx, r13\l0x00002e4e      xor edi, edi                                           ; int status\l0x00002e50      mov esi, dword [rax]                                   ; int errname\l0x00002e52      xor eax, eax\l0x00002e54      xor r12d, r12d\l0x00002e57      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e5c      jmp 0x2d3d\l"]
	"0x00002e61" [URL="dbg.main/0x00002e61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ce4, 0x2d14\l0x00002e61      mov rdx, qword [var_10h]                               ; int64_t arg3\l0x00002e66      mov esi, 3                                             ; int64_t arg2\l0x00002e6b      xor edi, edi                                           ; int64_t arg1\l0x00002e6d      call sym.quotearg_n_style_colon\l0x00002e72      mov edx, 5\l0x00002e77      lea rsi, str._s:_write_error                           ; 0x16194 ; \"%s: write error\"\l0x00002e7e      mov r13, rax\l0x00002e81      jmp 0x2e39\l"]
	"0x00002e83" [URL="dbg.main/0x00002e83", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2c81, 0x2c9e\l0x00002e83      mov rsi, qword [obj.tempfile.3]                        ; [0x1e0f0:8]=0 ; int64_t arg2\l0x00002e8a      mov edi, 4                                             ; int64_t arg1\l0x00002e8f      call sym.quotearg_style\l0x00002e94      mov edx, 5\l0x00002e99      lea rsi, str.failed_to_rewind_stream_for__s            ; 0x16518 ; \"failed to rewind stream for %s\"\l0x00002ea0      mov r13, rax\l0x00002ea3      jmp 0x2e39\l"]
	"0x00002ea5" [URL="dbg.main/0x00002ea5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c5e\l0x00002ea5      lea rdi, str.TMPDIR                                    ; 0x16162 ; \"TMPDIR\" ; const char *name\l0x00002eac      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x00002eb1      mov r12, rax\l0x00002eb4      test rax, rax\l0x00002eb7      je 0x2f28\l"]
	"0x00002eb9" [URL="dbg.main/0x00002eb9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f2f\l0x00002eb9      xor edx, edx                                           ; int64_t arg3\l0x00002ebb      lea rsi, str.tacXXXXXX                                 ; 0x16169 ; \"tacXXXXXX\" ; int64_t arg2\l0x00002ec2      mov rdi, r12                                           ; int64_t arg1\l0x00002ec5      call dbg.mfile_name_concat\l0x00002eca      mov rdi, rax                                           ; char *template\l0x00002ecd      mov qword [obj.tempfile.3], rax                        ; [0x1e0f0:8]=0\l0x00002ed4      call dbg.mkstemp_safer\l0x00002ed9      mov r13d, eax\l0x00002edc      test eax, eax\l0x00002ede      js 0x2fbf\l"]
	"0x00002ee4" [URL="dbg.main/0x00002ee4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ee4      mov edi, eax\l0x00002ee6      lea rsi, [0x00016173]                                  ; \"w+\"\l0x00002eed      call sym.imp.fdopen\l0x00002ef2      mov rdi, qword [obj.tempfile.3]                        ; [0x1e0f0:8]=0\l0x00002ef9      mov qword [obj.tmp_fp.2], rax                          ; [0x1e0e8:8]=0\l0x00002f00      test rax, rax\l0x00002f03      je 0x3048\l"]
	"0x00002f09" [URL="dbg.main/0x00002f09", fillcolor="white",color="#767676", fontname="Courier",label="0x00002f09      call sym.imp.unlink                                    ; int unlink(const char *path)\l0x00002f0e      jmp 0x2ca4\l"]
	"0x00002f13" [URL="dbg.main/0x00002f13", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c50\l0x00002f13      mov rdx, r12                                           ; int64_t arg3\l0x00002f16      mov rsi, r14                                           ; int64_t arg2\l0x00002f19      mov edi, ebp                                           ; int64_t arg1\l0x00002f1b      call dbg.tac_seekable\l0x00002f20      mov r12d, eax\l0x00002f23      jmp 0x2d3d\l"]
	"0x00002f28" [URL="dbg.main/0x00002f28", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2eb7\l0x00002f28      lea r12, str._tmp                                      ; 0x160dd ; \"/tmp\"\l0x00002f2f      jmp 0x2eb9\l"]
	"0x00002f31" [URL="dbg.main/0x00002f31", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bce\l0x00002f31      lea rax, [global_default_file_list]                    ; 0x1ba60\l0x00002f38      lea r14, [0x000160db]                                  ; \"-\"\l0x00002f3f      jmp 0x2be4\l"]
	"0x00002f44" [URL="dbg.main/0x00002f44", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad0\l0x00002f44      mov eax, 1\l0x00002f49      test dl, dl\l0x00002f4b      je 0x2f55\l"]
	"0x00002f4d" [URL="dbg.main/0x00002f4d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f4d      mov rdi, r12                                           ; const char *s\l0x00002f50      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l"]
	"0x00002f55" [URL="dbg.main/0x00002f55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f4b\l0x00002f55      mov qword [obj.sentinel_length], rax                   ; [0x1e280:8]=1\l0x00002f5c      mov qword [obj.match_length], rax                      ; [0x1e278:8]=0\l0x00002f63      jmp 0x2b30\l"]
	"0x00002f68" [URL="dbg.main/0x00002f68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bde\l0x00002f68      mov byte [var_1fh], 1\l0x00002f6d      jmp 0x2d62\l"]
	"0x00002f72" [URL="dbg.main/0x00002f72", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d72\l0x00002f72      xor edi, edi                                           ; int fildes\l0x00002f74      call sym.imp.close                                     ; int close(int fildes)\l0x00002f79      test eax, eax\l0x00002f7b      jns 0x2d78\l"]
	"0x00002f81" [URL="dbg.main/0x00002f81", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f81      call sym.imp.__errno_location\l0x00002f86      lea rdx, [0x000160db]                                  ; \"-\" ; char *format\l0x00002f8d      xor edi, edi                                           ; int status\l0x00002f8f      mov esi, dword [rax]                                   ; int errname\l0x00002f91      xor eax, eax\l0x00002f93      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002f98      mov byte [var_1fh], 0\l0x00002f9d      jmp 0x2d78\l"]
	"0x00002fa2" [URL="dbg.main/0x00002fa2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bb8\l0x00002fa2      mov rsi, qword [obj.separator]                         ; [0x1e290:8]=0 ; const void *s2\l0x00002fa9      lea rdx, [r12 + 1]                                     ; size_t n\l0x00002fae      mov rdi, rcx                                           ; void *s1\l0x00002fb1      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l0x00002fb6      lea rax, [rax + r12]\l0x00002fba      jmp 0x2bbe\l"]
	"0x00002fbf" [URL="dbg.main/0x00002fbf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ede\l0x00002fbf      mov rsi, r12                                           ; int64_t arg2\l0x00002fc2      mov edi, 4                                             ; int64_t arg1\l0x00002fc7      call sym.quotearg_style\l0x00002fcc      mov edx, 5\l0x00002fd1      lea rsi, str.failed_to_create_temporary_file_in__s     ; 0x164f0 ; \"failed to create temporary file in %s\"\l0x00002fd8      xor edi, edi\l0x00002fda      mov r13, rax\l0x00002fdd      call sym.imp.dcgettext\l0x00002fe2      mov r12, rax\l0x00002fe5      call sym.imp.__errno_location\l0x00002fea      mov rcx, r13\l0x00002fed      mov rdx, r12                                           ; char *format\l0x00002ff0      xor edi, edi                                           ; int status\l0x00002ff2      mov esi, dword [rax]                                   ; int errname\l0x00002ff4      xor eax, eax\l0x00002ff6      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002ffb" [URL="dbg.main/0x00002ffb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x309c\l0x00002ffb      mov rdi, qword [obj.tempfile.3]                        ; [0x1e0f0:8]=0 ; void *ptr\l0x00003002      xor r12d, r12d\l0x00003005      call sym.imp.free                                      ; void free(void *ptr)\l0x0000300a      mov qword [obj.tempfile.3], 0                          ; [0x1e0f0:8]=0\l0x00003015      jmp 0x2d3d\l"]
	"0x0000301a" [URL="dbg.main/0x0000301a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a83, 0x2aa1\l0x0000301a      mov edi, 1                                             ; int64_t arg1\l0x0000301f      call dbg.usage\l"]
	"0x00003024" [URL="dbg.main/0x00003024", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b63\l0x00003024      mov qword [obj.read_size], rax                         ; [0x1e268:8]=0\l0x0000302b      call dbg.xalloc_die\l"]
	"0x00003030" [URL="dbg.main/0x00003030", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b2a\l0x00003030      mov rcx, rax\l0x00003033      lea rdx, [0x0001653f]                                  ; \"%s\" ; char *format\l0x0000303a      xor esi, esi                                           ; int errname\l0x0000303c      xor eax, eax\l0x0000303e      mov edi, 1                                             ; int status\l0x00003043      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003048" [URL="dbg.main/0x00003048", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f03\l0x00003048      mov rsi, rdi                                           ; int64_t arg2\l0x0000304b      mov edi, 4                                             ; int64_t arg1\l0x00003050      call sym.quotearg_style\l0x00003055      xor edi, edi\l0x00003057      mov edx, 5\l0x0000305c      lea rsi, str.failed_to_open__s_for_writing             ; 0x16176 ; \"failed to open %s for writing\"\l0x00003063      mov qword [var_10h], rax\l0x00003068      call sym.imp.dcgettext\l0x0000306d      mov r12, rax\l0x00003070      call sym.imp.__errno_location\l0x00003075      mov rcx, qword [var_10h]\l0x0000307a      mov rdx, r12                                           ; char *format\l0x0000307d      xor edi, edi                                           ; int status\l0x0000307f      mov esi, dword [rax]                                   ; int errname\l0x00003081      xor eax, eax\l0x00003083      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003088      mov edi, r13d                                          ; int fildes\l0x0000308b      call sym.imp.close                                     ; int close(int fildes)\l0x00003090      mov rdi, qword [obj.tempfile.3]                        ; [0x1e0f0:8]=0 ; const char *path\l0x00003097      call sym.imp.unlink                                    ; int unlink(const char *path)\l0x0000309c      jmp 0x2ffb\l"]
	"0x000030a1" [URL="dbg.main/0x000030a1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d1d\l0x000030a1      xor r12d, r12d\l0x000030a4      jmp 0x2d3d\l"]
	"0x000030a9" [URL="dbg.main/0x000030a9", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b9c\l0x000030a9      call dbg.xalloc_die\l"]
	"0x000030ae" [URL="dbg.main/0x000030ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad8\l0x000030ae      mov edx, 5\l0x000030b3      lea rsi, str.separator_cannot_be_empty                 ; 0x1611b ; \"separator cannot be empty\"\l0x000030ba      xor edi, edi\l0x000030bc      call sym.imp.dcgettext\l0x000030c1      xor esi, esi                                           ; int errname\l0x000030c3      mov edi, 1                                             ; int status\l0x000030c8      mov rdx, rax                                           ; char *format\l0x000030cb      xor eax, eax\l0x000030cd      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000030d2      nop word cs:[rax + rax]\l0x000030dc      nop dword [rax]\l"]
        "0x00002970" -> "0x000029f8" [color="#3a96dd"];
        "0x000029f8" -> "0x00002abc" [color="#13a10e"];
        "0x000029f8" -> "0x00002a14" [color="#c50f1f"];
        "0x00002a14" -> "0x00002ab0" [color="#13a10e"];
        "0x00002a14" -> "0x00002a1d" [color="#c50f1f"];
        "0x00002a1d" -> "0x00002a38" [color="#13a10e"];
        "0x00002a1d" -> "0x00002a1f" [color="#c50f1f"];
        "0x00002a1f" -> "0x00002a80" [color="#13a10e"];
        "0x00002a1f" -> "0x00002a24" [color="#c50f1f"];
        "0x00002a24" -> "0x000029f8" [color="#3a96dd"];
        "0x00002a38" -> "0x00002a9c" [color="#13a10e"];
        "0x00002a38" -> "0x00002a3f" [color="#c50f1f"];
        "0x00002a80" -> "0x0000301a" [color="#13a10e"];
        "0x00002a80" -> "0x00002a89" [color="#c50f1f"];
        "0x00002a89" -> "0x000029f8" [color="#3a96dd"];
        "0x00002a9c" -> "0x0000301a" [color="#13a10e"];
        "0x00002a9c" -> "0x00002aa7" [color="#c50f1f"];
        "0x00002aa7" -> "0x00002ab0" [color="#3a96dd"];
        "0x00002ab0" -> "0x000029f8" [color="#3a96dd"];
        "0x00002abc" -> "0x00002f44" [color="#13a10e"];
        "0x00002abc" -> "0x00002ad6" [color="#c50f1f"];
        "0x00002ad6" -> "0x000030ae" [color="#13a10e"];
        "0x00002ad6" -> "0x00002ade" [color="#c50f1f"];
        "0x00002ade" -> "0x00003030" [color="#13a10e"];
        "0x00002ade" -> "0x00002b30" [color="#c50f1f"];
        "0x00002b30" -> "0x00002b69" [color="#13a10e"];
        "0x00002b30" -> "0x00002b55" [color="#c50f1f"];
        "0x00002b55" -> "0x00002b7e" [color="#3a96dd"];
        "0x00002b60" -> "0x00003024" [color="#13a10e"];
        "0x00002b60" -> "0x00002b69" [color="#c50f1f"];
        "0x00002b69" -> "0x00002b60" [color="#13a10e"];
        "0x00002b69" -> "0x00002b77" [color="#c50f1f"];
        "0x00002b77" -> "0x00002b7e" [color="#3a96dd"];
        "0x00002b7e" -> "0x000030a9" [color="#13a10e"];
        "0x00002b7e" -> "0x00002ba2" [color="#c50f1f"];
        "0x00002ba2" -> "0x00002fa2" [color="#13a10e"];
        "0x00002ba2" -> "0x00002bbe" [color="#c50f1f"];
        "0x00002bbe" -> "0x00002f31" [color="#13a10e"];
        "0x00002bbe" -> "0x00002bd4" [color="#c50f1f"];
        "0x00002bd4" -> "0x00002f68" [color="#13a10e"];
        "0x00002bd4" -> "0x00002be4" [color="#c50f1f"];
        "0x00002be4" -> "0x00002bf8" [color="#3a96dd"];
        "0x00002bf8" -> "0x00002d92" [color="#13a10e"];
        "0x00002bf8" -> "0x00002c05" [color="#c50f1f"];
        "0x00002c05" -> "0x00002d92" [color="#13a10e"];
        "0x00002c05" -> "0x00002c12" [color="#c50f1f"];
        "0x00002c12" -> "0x00002c31" [color="#3a96dd"];
        "0x00002c31" -> "0x00002c56" [color="#13a10e"];
        "0x00002c31" -> "0x00002c47" [color="#c50f1f"];
        "0x00002c47" -> "0x00002f13" [color="#13a10e"];
        "0x00002c47" -> "0x00002c56" [color="#c50f1f"];
        "0x00002c56" -> "0x00002ea5" [color="#13a10e"];
        "0x00002c56" -> "0x00002c64" [color="#c50f1f"];
        "0x00002c64" -> "0x00002e83" [color="#13a10e"];
        "0x00002c64" -> "0x00002c87" [color="#c50f1f"];
        "0x00002c87" -> "0x00002e83" [color="#13a10e"];
        "0x00002c87" -> "0x00002ca4" [color="#c50f1f"];
        "0x00002ca4" -> "0x00002ced" [color="#3a96dd"];
        "0x00002cc0" -> "0x00002e1b" [color="#13a10e"];
        "0x00002cc0" -> "0x00002cca" [color="#c50f1f"];
        "0x00002cca" -> "0x00002e61" [color="#13a10e"];
        "0x00002cca" -> "0x00002cea" [color="#c50f1f"];
        "0x00002cea" -> "0x00002ced" [color="#3a96dd"];
        "0x00002ced" -> "0x00002cc0" [color="#13a10e"];
        "0x00002ced" -> "0x00002d0a" [color="#c50f1f"];
        "0x00002d0a" -> "0x00002e61" [color="#13a10e"];
        "0x00002d0a" -> "0x00002d1a" [color="#c50f1f"];
        "0x00002d1a" -> "0x000030a1" [color="#13a10e"];
        "0x00002d1a" -> "0x00002d23" [color="#c50f1f"];
        "0x00002d23" -> "0x00002d3d" [color="#3a96dd"];
        "0x00002d3d" -> "0x00002dec" [color="#13a10e"];
        "0x00002d3d" -> "0x00002d45" [color="#c50f1f"];
        "0x00002d45" -> "0x00002bf8" [color="#13a10e"];
        "0x00002d45" -> "0x00002d62" [color="#c50f1f"];
        "0x00002d62" -> "0x00002f72" [color="#13a10e"];
        "0x00002d62" -> "0x00002d78" [color="#c50f1f"];
        "0x00002d92" -> "0x00002c31" [color="#13a10e"];
        "0x00002d92" -> "0x00002da8" [color="#c50f1f"];
        "0x00002da8" -> "0x00002dc4" [color="#3a96dd"];
        "0x00002dc4" -> "0x00002d45" [color="#3a96dd"];
        "0x00002dec" -> "0x00002d45" [color="#13a10e"];
        "0x00002dec" -> "0x00002dfb" [color="#c50f1f"];
        "0x00002dfb" -> "0x00002dc4" [color="#3a96dd"];
        "0x00002e1b" -> "0x00002e39" [color="#3a96dd"];
        "0x00002e39" -> "0x00002d3d" [color="#3a96dd"];
        "0x00002e61" -> "0x00002e39" [color="#3a96dd"];
        "0x00002e83" -> "0x00002e39" [color="#3a96dd"];
        "0x00002ea5" -> "0x00002f28" [color="#13a10e"];
        "0x00002ea5" -> "0x00002eb9" [color="#c50f1f"];
        "0x00002eb9" -> "0x00002fbf" [color="#13a10e"];
        "0x00002eb9" -> "0x00002ee4" [color="#c50f1f"];
        "0x00002ee4" -> "0x00003048" [color="#13a10e"];
        "0x00002ee4" -> "0x00002f09" [color="#c50f1f"];
        "0x00002f09" -> "0x00002ca4" [color="#3a96dd"];
        "0x00002f13" -> "0x00002d3d" [color="#3a96dd"];
        "0x00002f28" -> "0x00002eb9" [color="#3a96dd"];
        "0x00002f31" -> "0x00002be4" [color="#3a96dd"];
        "0x00002f44" -> "0x00002f55" [color="#13a10e"];
        "0x00002f44" -> "0x00002f4d" [color="#c50f1f"];
        "0x00002f4d" -> "0x00002f55" [color="#3a96dd"];
        "0x00002f55" -> "0x00002b30" [color="#3a96dd"];
        "0x00002f68" -> "0x00002d62" [color="#3a96dd"];
        "0x00002f72" -> "0x00002d78" [color="#13a10e"];
        "0x00002f72" -> "0x00002f81" [color="#c50f1f"];
        "0x00002f81" -> "0x00002d78" [color="#3a96dd"];
        "0x00002fa2" -> "0x00002bbe" [color="#3a96dd"];
        "0x00002fbf" -> "0x00002ffb" [color="#3a96dd"];
        "0x00002ffb" -> "0x00002d3d" [color="#3a96dd"];
        "0x0000301a" -> "0x00003024" [color="#3a96dd"];
        "0x00003024" -> "0x00003030" [color="#3a96dd"];
        "0x00003030" -> "0x00003048" [color="#3a96dd"];
        "0x00003048" -> "0x00002ffb" [color="#3a96dd"];
        "0x000030a1" -> "0x00002d3d" [color="#3a96dd"];
        "0x000030a9" -> "0x000030ae" [color="#3a96dd"];
        "0x000030ae" -> "0x000030e0" [color="#3a96dd"];
}
