digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002700" [URL="dbg.main/0x00002700", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x31a8\l2646: int dbg.main (int argc, char **argv);\l; var idx_t n @ rbp-0x68\l; var base_decode_context ctx @ rbp-0x60\l; var void *var_8h @ rsp+0x18\l; var int64_t var_10h @ rsp+0x20\l; var uint32_t var_18h @ rsp+0x28\l; var uint32_t var_20h @ rsp+0x30\l; var uint32_t var_28h @ rsp+0x38\l; var char *filename @ rsp+0x40\l; var char *s2 @ rsp+0x48\l; var uint32_t var_48h @ rsp+0x58\l; var int64_t var_50h @ rsp+0x60\l; var int64_t var_60h @ rsp+0x70\l; var int64_t var_78h @ rsp+0x88\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002700      endbr64                                                ; int main(int argc,char ** argv);\l0x00002704      push r15\l0x00002706      mov r15d, 0x4c                                         ; 'L'\l0x0000270c      push r14\l0x0000270e      xor r14d, r14d\l0x00002711      push r13\l0x00002713      lea r13, obj.long_options                              ; 0xda00\l0x0000271a      push r12\l0x0000271c      lea r12, [0x000097c8]                                  ; \"coreutils\"\l0x00002723      push rbp\l0x00002724      mov ebp, edi                                           ; argc\l0x00002726      push rbx\l0x00002727      mov rbx, rsi                                           ; argv\l0x0000272a      sub rsp, 0x88\l0x00002731      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002734      mov rax, qword fs:[0x28]\l0x0000273d      mov qword [var_78h], rax\l0x00002742      xor eax, eax\l0x00002744      call dbg.set_program_name\l0x00002749      lea rsi, [0x0000a1a1]                                  ; const char *locale\l0x00002750      mov edi, 6                                             ; int category\l0x00002755      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000275a      lea rsi, str._usr_local_share_locale                   ; 0x97f3 ; \"/usr/local/share/locale\" ; char *dirname\l0x00002761      mov rdi, r12                                           ; char *domainname\l0x00002764      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002769      mov rdi, r12                                           ; char *domainname\l0x0000276c      lea r12, str.diw:                                      ; 0x9841 ; \"diw:\"\l0x00002773      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002778      lea rdi, [dbg.close_stdout]                            ; 0x5250 ; func function\l0x0000277f      call sym.atexit                                        ; int atexit(func function)\l0x00002784      mov dword [var_8h], 0\l0x0000278c      mov byte [var_20h], 0\l0x00002791      nop dword [rax]\l"]
	"0x00002798" [URL="dbg.main/0x00002798", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x27d5, 0x2827, 0x2854, 0x2865\l0x00002798      xor r8d, r8d\l0x0000279b      mov rcx, r13\l0x0000279e      mov rdx, r12\l0x000027a1      mov rsi, rbx\l0x000027a4      mov edi, ebp\l0x000027a6      call sym.imp.getopt_long\l0x000027ab      cmp eax, 0xffffffff\l0x000027ae      je 0x28ae\l"]
	"0x000027b4" [URL="dbg.main/0x000027b4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027b4      cmp eax, 0x69\l0x000027b7      je 0x2860\l"]
	"0x000027bd" [URL="dbg.main/0x000027bd", fillcolor="white",color="#767676", fontname="Courier",label="0x000027bd      jg 0x27e0\l"]
	"0x000027bf" [URL="dbg.main/0x000027bf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027bf      cmp eax, 0xffffff7e                                    ; 4294967166\l0x000027c4      je 0x3042\l"]
	"0x000027ca" [URL="dbg.main/0x000027ca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027ca      cmp eax, 0x64\l0x000027cd      jne 0x2830\l"]
	"0x000027cf" [URL="dbg.main/0x000027cf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027cf      mov r14d, 1\l0x000027d5      jmp 0x2798\l"]
	"0x000027e0" [URL="dbg.main/0x000027e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27bd\l0x000027e0      cmp eax, 0x77\l0x000027e3      jne 0x2848\l"]
	"0x000027e5" [URL="dbg.main/0x000027e5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027e5      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xe0a0:8]=0 ; int64_t arg1\l0x000027ec      xor esi, esi                                           ; int64_t arg2\l0x000027ee      lea rcx, [var_48h]                                     ; int64_t arg4\l0x000027f3      lea r8, [0x0000a1a1]                                   ; int64_t arg5\l0x000027fa      mov edx, 0xa                                           ; int64_t arg3\l0x000027ff      call dbg.xstrtoimax\l0x00002804      cmp eax, 1\l0x00002807      ja 0x3049\l"]
	"0x0000280d" [URL="dbg.main/0x0000280d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000280d      mov r15, qword [var_48h]\l0x00002812      test r15, r15\l0x00002815      js 0x3049\l"]
	"0x0000281b" [URL="dbg.main/0x0000281b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000281b      cmp eax, 1\l0x0000281e      mov eax, 0\l0x00002823      cmove r15, rax\l0x00002827      jmp 0x2798\l"]
	"0x00002830" [URL="dbg.main/0x00002830", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27cd\l0x00002830      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002835      je 0x2870\l"]
	"0x00002837" [URL="dbg.main/0x00002837", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x284e, 0x311a\l0x00002837      mov edi, 1                                             ; int64_t arg1\l0x0000283c      call dbg.usage\l0x00002841      nop dword [rax]\l"]
	"0x00002848" [URL="dbg.main/0x00002848", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27e3\l0x00002848      lea edx, [rax - 0x80]\l0x0000284b      cmp edx, 7\l0x0000284e      ja 0x2837\l"]
	"0x00002850" [URL="dbg.main/0x00002850", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002850      mov dword [var_8h], eax\l0x00002854      jmp 0x2798\l"]
	"0x00002860" [URL="dbg.main/0x00002860", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27b7\l0x00002860      mov byte [var_20h], 1\l0x00002865      jmp 0x2798\l"]
	"0x00002870" [URL="dbg.main/0x00002870", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2835\l0x00002870      sub rsp, 8\l0x00002874      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0 ; func main\l0x0000287b      xor eax, eax\l0x0000287d      mov rcx, qword [obj.Version]                           ; [0xe010:8]=0x9aa9 ; func init\l0x00002884      push 0\l0x00002886      lea r9, str.Assaf_Gordon                               ; 0x9824 ; \"Assaf Gordon\" ; int64_t arg_c0h\l0x0000288d      lea r8, str.Simon_Josefsson                            ; 0x9831 ; \"Simon Josefsson\" ; int64_t arg6\l0x00002894      lea rdx, str.GNU_coreutils                             ; 0x97c4 ; \"GNU coreutils\" ; int64_t arg3\l0x0000289b      lea rsi, [global_program]                              ; 0x9729 ; \"basenc\" ; int64_t arg2\l0x000028a2      call dbg.version_etc\l0x000028a7      xor edi, edi                                           ; int status\l0x000028a9      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x000028ae" [URL="dbg.main/0x000028ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27ae\l0x000028ae      mov eax, dword [var_8h]\l0x000028b2      add eax, 0xffffff80\l0x000028b5      cmp eax, 7\l0x000028b8      ja case.default.0x28cc\l"]
	"0x000028be" [URL="dbg.main/0x000028be", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028be      lea rdx, [0x00009920]\l0x000028c5      movsxd rax, dword [rdx + rax*4]\l0x000028c9      add rax, rdx\l;-- switch\l0x000028cc      jmp rax                                                ; switch table (8 cases) at 0x9920\l"]
	"0x000028cf" [URL="dbg.main/0x000028cf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 134:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x000028cf      lea rdi, [dbg.base2_length]                            ; 0x3390\l0x000028d6      lea rsi, [sym.isbase2]                                 ; 0x3380\l0x000028dd      lea rcx, [dbg.base2lsbf_encode]                        ; 0x33f0\l0x000028e4      lea rdx, [dbg.base2_decode_ctx_init]                   ; 0x3680\l0x000028eb      lea rax, [sym.base2lsbf_decode_ctx]                    ; 0x3a20\l"]
	"0x000028f2" [URL="dbg.main/0x000028f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002ad2  CODE 0x00002afa  CODE 0x00002b22  \l; XREFS: CODE 0x00002b4a  CODE 0x00002b72  CODE 0x00002b9a  \l; XREFS: CODE 0x00002bc2  \l0x000028f2      mov qword [obj.base_decode_ctx], rax                   ; [0xe0d0:8]=0x3a20 sym.base2lsbf_decode_ctx ; \" :\"\l0x000028f9      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xe098:4]=0\l; DATA XREF from dbg.version_etc_arn @ 0x784d\l0x00002900      mov qword [obj.base_decode_ctx_init], rdx              ; [0xe0d8:8]=0x3680 dbg.base2_decode_ctx_init\l0x00002907      mov edx, ebp\l0x00002909      sub edx, eax\l0x0000290b      mov qword [obj.base_length], rdi                       ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002912      sub edx, 1\l0x00002915      mov qword [obj.isbase], rsi                            ; [0xe0e8:8]=0x3380 sym.isbase2\l0x0000291c      mov qword [obj.base_encode], rcx                       ; [0xe0e0:8]=0x33f0 dbg.base2lsbf_encode\l0x00002923      jg 0x311f\l"]
	"0x00002929" [URL="dbg.main/0x00002929", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002929      cmp eax, ebp\l0x0000292b      jge 0x2cb6\l"]
	"0x00002931" [URL="dbg.main/0x00002931", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002931      mov rdi, qword [rbx + rax*8]                           ; const char *s1\l0x00002935      lea rax, [0x000097f1]                                  ; \"-\"\l0x0000293c      mov rsi, rax                                           ; const char *s2\l0x0000293f      mov qword [s2], rax\l0x00002944      mov qword [filename], rdi\l0x00002949      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x0000294e      test eax, eax\l0x00002950      je 0x2cc7\l"]
	"0x00002956" [URL="dbg.main/0x00002956", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002956      mov rdi, qword [filename]                              ; const char *filename\l0x0000295b      lea rsi, [0x0000986d]                                  ; \"rb\" ; const char *mode\l0x00002962      call sym.imp.fopen                                     ; file*fopen(const char *filename, const char *mode)\l0x00002967      mov r12, rax\l0x0000296a      test rax, rax\l0x0000296d      je 0x315a\l"]
	"0x00002973" [URL="dbg.main/0x00002973", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cce\l0x00002973      mov esi, 2                                             ; int64_t arg2\l0x00002978      mov rdi, r12                                           ; int64_t arg1\l0x0000297b      call dbg.fadvise\l0x00002980      test r14b, r14b\l0x00002983      je 0x2cd3\l"]
	"0x00002989" [URL="dbg.main/0x00002989", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002989      mov rax, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0\l0x00002990      mov edi, 0x1068                                        ; 'h\\x10'\l0x00002995      mov qword [var_10h], rax\l0x0000299a      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x000029a0      movsxd rdi, eax                                        ; size_t size\l0x000029a3      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000029a8      mov edi, 0x1068                                        ; 'h\\x10' ; size_t size\l0x000029ad      mov r13, rax\l0x000029b0      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000029b5      mov qword [var_60h], 0\l0x000029be      mov r14, rax\l0x000029c1      lea rax, [var_50h]\l0x000029c6      mov qword [var_18h], rax\l0x000029cb      mov rdi, rax\l0x000029ce      call qword [obj.base_decode_ctx_init]                  ; [0xe0d8:8]=0x3680 dbg.base2_decode_ctx_init\l0x000029d4      nop dword [rax]\l"]
	"0x000029d8" [URL="dbg.main/0x000029d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2be2\l0x000029d8      mov qword [var_8h], r13\l0x000029dd      xor ebx, ebx\l0x000029df      mov qword [var_28h], r14\l0x000029e4      jmp 0x2a22\l"]
	"0x000029f0" [URL="dbg.main/0x000029f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a51, 0x2a56, 0x2a88\l0x000029f0      add rbx, rbp\l0x000029f3      mov ebp, dword [r12]\l0x000029f7      and ebp, 0x20\l0x000029fa      jne 0x3016\l"]
	"0x00002a00" [URL="dbg.main/0x00002a00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a00      mov edi, 0x1068                                        ; 'h\\x10'\l0x00002a05      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002a0b      cdqe\l0x00002a0d      cmp rbx, rax\l0x00002a10      jge 0x2bc7\l"]
	"0x00002a16" [URL="dbg.main/0x00002a16", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a16      mov eax, dword [r12]\l0x00002a1a      test al, 0x10\l0x00002a1c      jne 0x2c71\l"]
	"0x00002a22" [URL="dbg.main/0x00002a22", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29e4\l0x00002a22      mov edi, 0x1068                                        ; 'h\\x10'\l0x00002a27      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002a2d      mov rcx, r12\l0x00002a30      mov esi, 1\l0x00002a35      movsxd rdx, eax\l0x00002a38      mov rax, qword [var_8h]\l; DATA XREF from dbg.version_etc_arn @ 0x7717\l0x00002a3d      sub rdx, rbx\l0x00002a40      lea rdi, [rax + rbx]\l0x00002a44      call sym.imp.fread_unlocked\l0x00002a49      cmp byte [var_20h], 0\l0x00002a4e      mov rbp, rax\l0x00002a51      je 0x29f0\l"]
	"0x00002a53" [URL="dbg.main/0x00002a53", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a53      test rax, rax\l0x00002a56      jle 0x29f0\l"]
	"0x00002a58" [URL="dbg.main/0x00002a58", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a58      xor r14d, r14d\l0x00002a5b      jmp 0x2a8e\l"]
	"0x00002a60" [URL="dbg.main/0x00002a60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aa7\l0x00002a60      cmp byte [r15], 0x3d\l0x00002a64      je 0x2aa9\l"]
	"0x00002a66" [URL="dbg.main/0x00002a66", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a66      sub rbp, 1\l0x00002a6a      mov rax, qword [var_8h]\l0x00002a6f      mov rdi, r15                                           ; void *s1\l0x00002a72      mov r9, rbp\l0x00002a75      sub r9, r14\l0x00002a78      lea rsi, [rax + r13 + 1]                               ; const void *s2\l0x00002a7d      mov rdx, r9                                            ; size_t n\l0x00002a80      call sym.imp.memmove                                   ; void *memmove(void *s1, const void *s2, size_t n)\l"]
	"0x00002a85" [URL="dbg.main/0x00002a85", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aad\l0x00002a85      cmp rbp, r14\l0x00002a88      jle 0x29f0\l"]
	"0x00002a8e" [URL="dbg.main/0x00002a8e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a5b\l0x00002a8e      mov rax, qword [var_8h]\l0x00002a93      lea r13, [rbx + r14]\l0x00002a97      lea r15, [rax + r13]\l0x00002a9b      movsx edi, byte [r15]\l0x00002a9f      call qword [obj.isbase]                                ; [0xe0e8:8]=0x3380 sym.isbase2\l0x00002aa5      test al, al\l0x00002aa7      je 0x2a60\l"]
	"0x00002aa9" [URL="dbg.main/0x00002aa9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a64\l0x00002aa9      add r14, 1\l0x00002aad      jmp 0x2a85\l"]
	"0x00002aaf" [URL="dbg.main/0x00002aaf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 133:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002aaf      lea rdi, [dbg.base2_length]                            ; 0x3390\l0x00002ab6      lea rsi, [sym.isbase2]                                 ; 0x3380\l0x00002abd      lea rcx, [dbg.base2msbf_encode]                        ; 0x33a0\l0x00002ac4      lea rdx, [dbg.base2_decode_ctx_init]                   ; 0x3680\l0x00002acb      lea rax, [sym.base2msbf_decode_ctx]                    ; 0x3960\l0x00002ad2      jmp 0x28f2\l"]
	"0x00002ad7" [URL="dbg.main/0x00002ad7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 132:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002ad7      lea rdi, [dbg.base16_length]                           ; 0x3300\l0x00002ade      lea rsi, [dbg.isbase16]                                ; 0x32e0\l0x00002ae5      lea rcx, [dbg.base16_encode]                           ; 0x3310\l0x00002aec      lea rdx, [dbg.base16_decode_ctx_init]                  ; 0x36b0\l0x00002af3      lea rax, [sym.base16_decode_ctx]                       ; 0x3bd0\l0x00002afa      jmp 0x28f2\l"]
	"0x00002aff" [URL="dbg.main/0x00002aff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 131:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002aff      lea rdi, [dbg.base32_length_wrapper]                   ; 0x32a0\l0x00002b06      lea rsi, [sym.isbase32hex]                             ; 0x32c0\l0x00002b0d      lea rcx, [sym.base32hex_encode]                        ; 0x38e0\l0x00002b14      lea rdx, [dbg.base32hex_decode_ctx_init_wrapper]       ; 0x3760\l0x00002b1b      lea rax, [dbg.base32hex_decode_ctx_wrapper]            ; 0x3c70\l0x00002b22      jmp 0x28f2\l"]
	"0x00002b27" [URL="dbg.main/0x00002b27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 130:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002b27      lea rsi, [sym.isbase32]                                ; 0x4710\l0x00002b2e      lea rcx, [dbg.base32_encode]                           ; 0x4400\l0x00002b35      lea rdi, [dbg.base32_length_wrapper]                   ; 0x32a0\l0x00002b3c      lea rdx, [dbg.base32_decode_ctx_init_wrapper]          ; 0x3790\l0x00002b43      lea rax, [dbg.base32_decode_ctx_wrapper]               ; 0x3740\l0x00002b4a      jmp 0x28f2\l"]
	"0x00002b4f" [URL="dbg.main/0x00002b4f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 129:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002b4f      lea rdi, [dbg.base64_length_wrapper]                   ; 0x3280\l0x00002b56      lea rsi, [dbg.isbase64url]                             ; 0x35c0\l0x00002b5d      lea rcx, [dbg.base64url_encode]                        ; 0x3600\l0x00002b64      lea rdx, [dbg.base64url_decode_ctx_init_wrapper]       ; 0x37c0\l0x00002b6b      lea rax, [dbg.base64url_decode_ctx_wrapper]            ; 0x3800\l0x00002b72      jmp 0x28f2\l"]
	"0x00002b77" [URL="dbg.main/0x00002b77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002b77      lea rsi, [sym.isbase64]                                ; 0x4e70\l0x00002b7e      lea rcx, [dbg.base64_encode]                           ; 0x4be0\l0x00002b85      lea rdi, [dbg.base64_length_wrapper]                   ; 0x3280\l0x00002b8c      lea rdx, [dbg.base64_decode_ctx_init_wrapper]          ; 0x37f0\l0x00002b93      lea rax, [dbg.base64_decode_ctx_wrapper]               ; 0x37a0\l0x00002b9a      jmp 0x28f2\l"]
	"0x00002b9f" [URL="dbg.main/0x00002b9f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 135:                                                          ; from 0x000028cc\l; CODE XREF from dbg.main @ 0x28cc\l0x00002b9f      lea rdi, [dbg.z85_length]                              ; 0x3360\l0x00002ba6      lea rsi, [dbg.isz85]                                   ; 0x36e0\l0x00002bad      lea rcx, [dbg.z85_encode]                              ; 0x3440\l0x00002bb4      lea rdx, [dbg.z85_decode_ctx_init]                     ; 0x3650\l0x00002bbb      lea rax, [sym.z85_decode_ctx]                          ; 0x3ab0\l0x00002bc2      jmp 0x28f2\l"]
	"0x00002bc7" [URL="dbg.main/0x00002bc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a10\l0x00002bc7      mov r13, qword [var_8h]\l0x00002bcc      mov r14, qword [var_28h]\l0x00002bd1      mov eax, dword [r12]\l0x00002bd5      jmp 0x2c47\l"]
	"0x00002be0" [URL="dbg.main/0x00002be0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c49\l0x00002be0      test ebp, ebp\l0x00002be2      jne 0x29d8\l"]
	"0x00002be8" [URL="dbg.main/0x00002be8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c53\l0x00002be8      xor edx, edx\l0x00002bea      test ebp, ebp\l0x00002bec      mov rax, qword [obj.base_decode_ctx]                   ; [0xe0d0:8]=0x3a20 sym.base2lsbf_decode_ctx ; \" :\"\l0x00002bf3      mov qword [var_48h], 0x1068                            ; 'h\\x10'\l                                                                       ; [0x1068:8]=0x970e \"c\"\l0x00002bfc      cmove rdx, rbx\l"]
	"0x00002c00" [URL="dbg.main/0x00002c00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c6f\l0x00002c00      mov rdi, qword [var_18h]\l0x00002c05      mov rcx, r14\l0x00002c08      lea r8, [var_48h]\l0x00002c0d      mov rsi, r13\l0x00002c10      call rax\l0x00002c12      mov rcx, qword [var_10h]\l0x00002c17      mov rdx, qword [var_48h]\l0x00002c1c      mov rdi, r14\l0x00002c1f      mov esi, 1\l0x00002c24      mov r15d, eax\l0x00002c27      call sym.imp.fwrite_unlocked\l0x00002c2c      cmp rax, qword [var_48h]\l0x00002c31      jb 0x2fea\l"]
	"0x00002c37" [URL="dbg.main/0x00002c37", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c37      test r15b, r15b\l0x00002c3a      je 0x2fc6\l"]
	"0x00002c40" [URL="dbg.main/0x00002c40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c40      mov eax, dword [r12]\l0x00002c44      add ebp, 1\l"]
	"0x00002c47" [URL="dbg.main/0x00002c47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bd5\l0x00002c47      test al, 0x10\l0x00002c49      je 0x2be0\l"]
	"0x00002c4b" [URL="dbg.main/0x00002c4b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c7b\l0x00002c4b      cmp ebp, 2\l0x00002c4e      je 0x2c7d\l"]
	"0x00002c50" [URL="dbg.main/0x00002c50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c50      cmp ebp, 1\l0x00002c53      jne 0x2be8\l"]
	"0x00002c55" [URL="dbg.main/0x00002c55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c55      mov eax, dword [var_50h]\l0x00002c59      test eax, eax\l0x00002c5b      je 0x2c7d\l"]
	"0x00002c5d" [URL="dbg.main/0x00002c5d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c5d      mov qword [var_48h], 0x1068                            ; 'h\\x10'\l                                                                       ; [0x1068:8]=0x970e \"c\"\l0x00002c66      mov rax, qword [obj.base_decode_ctx]                   ; [0xe0d0:8]=0x3a20 sym.base2lsbf_decode_ctx ; \" :\"\l0x00002c6d      xor edx, edx\l0x00002c6f      jmp 0x2c00\l"]
	"0x00002c71" [URL="dbg.main/0x00002c71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a1c\l0x00002c71      mov r13, qword [var_8h]\l0x00002c76      mov r14, qword [var_28h]\l0x00002c7b      jmp 0x2c4b\l"]
	"0x00002c7d" [URL="dbg.main/0x00002c7d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2c4e, 0x2c5b, 0x2d58\l0x00002c7d      mov rdi, r12                                           ; int64_t arg1\l0x00002c80      call dbg.rpl_fclose\l0x00002c85      add eax, 1\l0x00002c88      je 0x2f3a\l"]
	"0x00002c8e" [URL="dbg.main/0x00002c8e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c8e      mov rax, qword [var_78h]\l0x00002c93      sub rax, qword fs:[0x28]\l0x00002c9c      jne 0x30f4\l"]
	"0x00002ca2" [URL="dbg.main/0x00002ca2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ca2      add rsp, 0x88\l0x00002ca9      xor eax, eax\l0x00002cab      pop rbx\l0x00002cac      pop rbp\l0x00002cad      pop r12\l; DATA XREF from dbg.version_etc_arn @ 0x7792\l0x00002caf      pop r13\l0x00002cb1      pop r14\l0x00002cb3      pop r15\l0x00002cb5      ret\l"]
	"0x00002cb6" [URL="dbg.main/0x00002cb6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x292b\l0x00002cb6      lea rax, [0x000097f1]                                  ; \"-\"\l0x00002cbd      mov qword [s2], rax\l0x00002cc2      mov qword [filename], rax\l"]
	"0x00002cc7" [URL="dbg.main/0x00002cc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2950\l0x00002cc7      mov r12, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0xe090:8]=0\l0x00002cce      jmp 0x2973\l"]
	"0x00002cd3" [URL="dbg.main/0x00002cd3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2983\l0x00002cd3      mov edi, 0x7800                                        ; size_t size\l0x00002cd8      mov rbp, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0\l0x00002cdf      xor ebx, ebx\l0x00002ce1      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00002ce6      mov edi, 0x7800\l0x00002ceb      mov r13, rax\l0x00002cee      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002cf4      movsxd rdi, eax                                        ; size_t size\l0x00002cf7      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x00002cfc      mov qword [var_18h], r15\l0x00002d01      mov qword [var_8h], rax\l"]
	"0x00002d06" [URL="dbg.main/0x00002d06", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e92\l0x00002d06      xor r14d, r14d\l0x00002d09      jmp 0x2d19\l"]
	"0x00002d10" [URL="dbg.main/0x00002d10", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d3c\l0x00002d10      cmp r14, 0x77ff\l0x00002d17      jg 0x2d8a\l"]
	"0x00002d19" [URL="dbg.main/0x00002d19", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d09\l0x00002d19      mov edx, 0x7800\l0x00002d1e      lea rdi, [r13 + r14]\l0x00002d23      mov rcx, r12\l0x00002d26      mov esi, 1\l0x00002d2b      sub rdx, r14\l0x00002d2e      call sym.imp.fread_unlocked\l0x00002d33      add r14, rax\l0x00002d36      mov eax, dword [r12]\l0x00002d3a      test al, 0x30\l0x00002d3c      je 0x2d10\l"]
	"0x00002d3e" [URL="dbg.main/0x00002d3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d3e      test r14, r14\l0x00002d41      jg 0x2d8a\l"]
	"0x00002d43" [URL="dbg.main/0x00002d43", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e85, 0x2e98\l0x00002d43      mov r15, qword [var_18h]\l0x00002d48      test rbx, rbx\l0x00002d4b      jle 0x2d56\l"]
	"0x00002d4d" [URL="dbg.main/0x00002d4d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d4d      test r15, r15\l0x00002d50      jne 0x2f7b\l"]
	"0x00002d56" [URL="dbg.main/0x00002d56", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2d4b, 0x2f98\l0x00002d56      test al, 0x20\l0x00002d58      je 0x2c7d\l"]
	"0x00002d5e" [URL="dbg.main/0x00002d5e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d5e      mov edx, 5\l0x00002d63      lea rsi, str.read_error                                ; 0x9870 ; \"read error\"\l0x00002d6a      xor edi, edi\l0x00002d6c      call sym.imp.dcgettext\l0x00002d71      mov r12, rax\l0x00002d74      call sym.imp.__errno_location\l0x00002d79      mov rdx, r12                                           ; char *format\l0x00002d7c      mov edi, 1                                             ; int status\l0x00002d81      mov esi, dword [rax]                                   ; int errname\l0x00002d83      xor eax, eax\l0x00002d85      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002d8a" [URL="dbg.main/0x00002d8a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2d17, 0x2d41\l0x00002d8a      mov r10, qword [obj.base_encode]                       ; [0xe0e0:8]=0x33f0 dbg.base2lsbf_encode\l0x00002d91      mov edi, r14d\l0x00002d94      mov qword [var_10h], r10\l0x00002d99      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002d9f      mov rdx, qword [var_8h]\l0x00002da4      mov rsi, r14\l0x00002da7      mov rdi, r13\l0x00002daa      mov r10, qword [var_10h]\l0x00002daf      movsxd rcx, eax\l0x00002db2      call r10\l0x00002db5      mov edi, r14d\l0x00002db8      call qword [obj.base_length]                           ; [0xe0f0:8]=0x3390 dbg.base2_length\l0x00002dbe      cmp qword [var_18h], 0\l0x00002dc4      je 0x2edf\l"]
	"0x00002dca" [URL="dbg.main/0x00002dca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dca      movsxd r15, eax\l0x00002dcd      xor r9d, r9d\l0x00002dd0      test r15, r15\l0x00002dd3      jle 0x2e7f\l"]
	"0x00002dd9" [URL="dbg.main/0x00002dd9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dd9      mov qword [var_10h], r12\l0x00002dde      mov r12, rbx\l0x00002de1      mov rbx, qword [var_18h]\l0x00002de6      mov qword [var_20h], r13\l0x00002deb      mov r13, rbp\l0x00002dee      mov rbp, r15\l0x00002df1      mov qword [var_28h], r14\l0x00002df6      mov r14, r9\l0x00002df9      jmp 0x2e21\l"]
	"0x00002e00" [URL="dbg.main/0x00002e00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e37\l0x00002e00      mov rax, qword [r13 + 0x28]\l0x00002e04      cmp rax, qword [r13 + 0x30]\l0x00002e08      jae 0x2e9d\l"]
	"0x00002e0e" [URL="dbg.main/0x00002e0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e0e      lea rdx, [rax + 1]\l0x00002e12      mov qword [r13 + 0x28], rdx\l0x00002e16      mov byte [rax], 0xa\l"]
	"0x00002e19" [URL="dbg.main/0x00002e19", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ead\l0x00002e19      xor r12d, r12d\l0x00002e1c      cmp r14, rbp\l0x00002e1f      jge 0x2e6a\l"]
	"0x00002e21" [URL="dbg.main/0x00002e21", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2df9, 0x2e68\l0x00002e21      mov r15, rbp\l0x00002e24      mov rax, rbx\l0x00002e27      sub r15, r14\l0x00002e2a      sub rax, r12\l0x00002e2d      cmp r15, rax\l0x00002e30      cmovg r15, rax\l0x00002e34      test r15, r15\l0x00002e37      je 0x2e00\l"]
	"0x00002e39" [URL="dbg.main/0x00002e39", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e39      mov rax, qword [var_8h]\l0x00002e3e      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0\l0x00002e45      mov rdx, r15\l0x00002e48      mov esi, 1\l0x00002e4d      lea rdi, [rax + r14]\l0x00002e51      call sym.imp.fwrite_unlocked\l0x00002e56      cmp r15, rax\l0x00002e59      ja 0x3086\l"]
	"0x00002e5f" [URL="dbg.main/0x00002e5f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e5f      add r14, r15\l0x00002e62      add r12, r15\l0x00002e65      cmp r14, rbp\l0x00002e68      jl 0x2e21\l"]
	"0x00002e6a" [URL="dbg.main/0x00002e6a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e1f\l0x00002e6a      mov rbx, r12\l0x00002e6d      mov rbp, r13\l0x00002e70      mov r12, qword [var_10h]\l0x00002e75      mov r13, qword [var_20h]\l0x00002e7a      mov r14, qword [var_28h]\l"]
	"0x00002e7f" [URL="dbg.main/0x00002e7f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2dd3, 0x2f08\l0x00002e7f      mov eax, dword [r12]\l0x00002e83      test al, 0x30\l0x00002e85      jne 0x2d43\l"]
	"0x00002e8b" [URL="dbg.main/0x00002e8b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e8b      cmp r14, 0x7800\l0x00002e92      je 0x2d06\l"]
	"0x00002e98" [URL="dbg.main/0x00002e98", fillcolor="white",color="#767676", fontname="Courier",label="0x00002e98      jmp 0x2d43\l"]
	"0x00002e9d" [URL="dbg.main/0x00002e9d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e08\l0x00002e9d      mov esi, 0xa\l0x00002ea2      mov rdi, r13\l0x00002ea5      call sym.imp.__overflow\l0x00002eaa      add eax, 1\l0x00002ead      jne 0x2e19\l"]
	"0x00002eb3" [URL="dbg.main/0x00002eb3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002eb3      mov edx, 5\l0x00002eb8      lea rsi, str.write_error                               ; 0x987b ; \"write error\"\l0x00002ebf      xor edi, edi\l0x00002ec1      call sym.imp.dcgettext\l0x00002ec6      mov r12, rax\l0x00002ec9      call sym.imp.__errno_location\l0x00002ece      mov rdx, r12                                           ; char *format\l0x00002ed1      mov edi, 1                                             ; int status\l0x00002ed6      mov esi, dword [rax]                                   ; int errname\l0x00002ed8      xor eax, eax\l0x00002eda      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002edf" [URL="dbg.main/0x00002edf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dc4\l0x00002edf      movsxd r10, eax\l0x00002ee2      mov rdi, qword [var_8h]\l0x00002ee7      mov esi, 1\l0x00002eec      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0\l0x00002ef3      mov rdx, r10\l0x00002ef6      mov qword [var_10h], r10\l0x00002efb      call sym.imp.fwrite_unlocked\l0x00002f00      mov r10, qword [var_10h]\l0x00002f05      cmp r10, rax\l0x00002f08      jbe 0x2e7f\l"]
	"0x00002f0e" [URL="dbg.main/0x00002f0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f0e      mov edx, 5\l0x00002f13      lea rsi, str.write_error                               ; 0x987b ; \"write error\"\l0x00002f1a      xor edi, edi\l0x00002f1c      call sym.imp.dcgettext\l0x00002f21      mov r12, rax\l0x00002f24      call sym.imp.__errno_location\l0x00002f29      mov rdx, r12                                           ; char *format\l0x00002f2c      mov edi, 1                                             ; int status\l0x00002f31      mov esi, dword [rax]                                   ; int errname\l0x00002f33      xor eax, eax\l0x00002f35      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002f3a" [URL="dbg.main/0x00002f3a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c88\l0x00002f3a      mov rsi, qword [s2]                                    ; const char *s2\l0x00002f3f      mov rdi, qword [filename]                              ; const char *s1\l0x00002f44      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002f49      mov ebp, eax\l0x00002f4b      call sym.imp.__errno_location\l0x00002f50      mov rbx, rax\l0x00002f53      test ebp, ebp\l0x00002f55      jne 0x2f9d\l"]
	"0x00002f57" [URL="dbg.main/0x00002f57", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f57      mov edx, 5\l0x00002f5c      lea rsi, str.closing_standard_input                    ; 0x9895 ; \"closing standard input\"\l0x00002f63      xor edi, edi\l0x00002f65      call sym.imp.dcgettext\l0x00002f6a      mov esi, dword [rbx]                                   ; int errname\l0x00002f6c      mov edi, 1                                             ; int status\l0x00002f71      mov rdx, rax                                           ; char *format\l0x00002f74      xor eax, eax\l0x00002f76      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002f7b" [URL="dbg.main/0x00002f7b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d50\l0x00002f7b      mov rax, qword [rbp + 0x28]\l0x00002f7f      cmp rax, qword [rbp + 0x30]\l0x00002f83      jae 0x30b2\l"]
	"0x00002f89" [URL="dbg.main/0x00002f89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f89      lea rdx, [rax + 1]\l0x00002f8d      mov qword [rbp + 0x28], rdx\l0x00002f91      mov byte [rax], 0xa\l"]
	"0x00002f94" [URL="dbg.main/0x00002f94", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30c2\l0x00002f94      mov eax, dword [r12]\l0x00002f98      jmp 0x2d56\l"]
	"0x00002f9d" [URL="dbg.main/0x00002f9d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f55\l0x00002f9d      mov rdx, qword [filename]                              ; int64_t arg3\l0x00002fa2      mov esi, 3                                             ; int64_t arg2\l0x00002fa7      xor edi, edi                                           ; int64_t arg1\l0x00002fa9      call sym.quotearg_n_style_colon\l0x00002fae      mov esi, dword [rbx]                                   ; int errname\l0x00002fb0      mov edi, 1                                             ; int status\l0x00002fb5      lea rdx, [0x00009821]                                  ; \"%s\" ; char *format\l0x00002fbc      mov rcx, rax\l0x00002fbf      xor eax, eax\l0x00002fc1      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002fc6" [URL="dbg.main/0x00002fc6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c3a\l0x00002fc6      mov edx, 5\l0x00002fcb      lea rsi, str.invalid_input                             ; 0x9887 ; \"invalid input\"\l0x00002fd2      xor edi, edi\l0x00002fd4      call sym.imp.dcgettext\l0x00002fd9      xor esi, esi                                           ; int errname\l0x00002fdb      mov edi, 1                                             ; int status\l0x00002fe0      mov rdx, rax                                           ; char *format\l0x00002fe3      xor eax, eax\l0x00002fe5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002fea" [URL="dbg.main/0x00002fea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c31\l0x00002fea      mov edx, 5\l0x00002fef      lea rsi, str.write_error                               ; 0x987b ; \"write error\"\l0x00002ff6      xor edi, edi\l0x00002ff8      call sym.imp.dcgettext\l0x00002ffd      mov r12, rax\l0x00003000      call sym.imp.__errno_location\l0x00003005      mov rdx, r12                                           ; char *format\l0x00003008      mov edi, 1                                             ; int status\l0x0000300d      mov esi, dword [rax]                                   ; int errname\l0x0000300f      xor eax, eax\l0x00003011      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003016" [URL="dbg.main/0x00003016", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29fa\l0x00003016      mov edx, 5\l0x0000301b      lea rsi, str.read_error                                ; 0x9870 ; \"read error\"\l0x00003022      xor edi, edi\l0x00003024      call sym.imp.dcgettext\l0x00003029      mov r12, rax\l0x0000302c      call sym.imp.__errno_location\l0x00003031      mov rdx, r12                                           ; char *format\l0x00003034      mov edi, 1                                             ; int status\l0x00003039      mov esi, dword [rax]                                   ; int errname\l0x0000303b      xor eax, eax\l0x0000303d      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003042" [URL="dbg.main/0x00003042", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27c4\l0x00003042      xor edi, edi                                           ; int64_t arg1\l0x00003044      call dbg.usage\l"]
	"0x00003049" [URL="dbg.main/0x00003049", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2807, 0x2815\l0x00003049      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xe0a0:8]=0 ; int64_t arg1\l0x00003050      call dbg.quote\l0x00003055      mov edx, 5\l0x0000305a      lea rsi, str.invalid_wrap_size                         ; 0x980b ; \"invalid wrap size\"\l0x00003061      xor edi, edi\l0x00003063      mov rbx, rax\l0x00003066      call sym.imp.dcgettext\l0x0000306b      mov r8, rbx\l0x0000306e      xor esi, esi                                           ; int errname\l0x00003070      mov edi, 1                                             ; int status\l0x00003075      mov rcx, rax\l0x00003078      lea rdx, str._s:__s                                    ; 0x981d ; \"%s: %s\" ; char *format\l0x0000307f      xor eax, eax\l0x00003081      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003086" [URL="dbg.main/0x00003086", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e59\l0x00003086      mov edx, 5\l0x0000308b      lea rsi, str.write_error                               ; 0x987b ; \"write error\"\l0x00003092      xor edi, edi\l0x00003094      call sym.imp.dcgettext\l0x00003099      mov r12, rax\l0x0000309c      call sym.imp.__errno_location\l0x000030a1      mov rdx, r12                                           ; char *format\l0x000030a4      mov edi, 1                                             ; int status\l0x000030a9      mov esi, dword [rax]                                   ; int errname\l0x000030ab      xor eax, eax\l0x000030ad      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000030b2" [URL="dbg.main/0x000030b2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f83\l0x000030b2      mov esi, 0xa\l0x000030b7      mov rdi, rbp\l0x000030ba      call sym.imp.__overflow\l0x000030bf      add eax, 1\l0x000030c2      jne 0x2f94\l"]
	"0x000030c8" [URL="dbg.main/0x000030c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030c8      mov edx, 5\l0x000030cd      lea rsi, str.write_error                               ; 0x987b ; \"write error\"\l0x000030d4      xor edi, edi\l0x000030d6      call sym.imp.dcgettext\l0x000030db      mov r12, rax\l0x000030de      call sym.imp.__errno_location\l0x000030e3      mov rdx, r12                                           ; char *format\l0x000030e6      mov edi, 1                                             ; int status\l0x000030eb      mov esi, dword [rax]                                   ; int errname\l0x000030ed      xor eax, eax\l0x000030ef      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000030f4" [URL="dbg.main/0x000030f4", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c9c\l0x000030f4      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x000030f9" [URL="dbg.main/0x000030f9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- default:                                                           ; from 0x28cc\l; CODE XREFS from dbg.main @ 0x28b8, 0x28cc\l0x000030f9      xor edi, edi\l0x000030fb      mov edx, 5\l0x00003100      lea rsi, str.missing_encoding_type                     ; 0x9846 ; \"missing encoding type\"\l0x00003107      call sym.imp.dcgettext\l0x0000310c      xor esi, esi                                           ; int errname\l0x0000310e      xor edi, edi                                           ; int status\l0x00003110      mov rdx, rax                                           ; char *format\l0x00003113      xor eax, eax\l0x00003115      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000311a      jmp 0x2837\l"]
	"0x0000311f" [URL="dbg.main/0x0000311f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2923\l0x0000311f      mov rdi, qword [rbx + rax*8 + 8]                       ; int64_t arg1\l0x00003124      call dbg.quote\l0x00003129      mov edx, 5\l0x0000312e      lea rsi, str.extra_operand__s                          ; 0x985c ; \"extra operand %s\"\l0x00003135      xor edi, edi\l0x00003137      mov r12, rax\l0x0000313a      call sym.imp.dcgettext\l0x0000313f      xor edi, edi                                           ; int status\l0x00003141      mov rcx, r12\l0x00003144      xor esi, esi                                           ; int errname\l0x00003146      mov rdx, rax                                           ; char *format\l0x00003149      xor eax, eax\l0x0000314b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003150      mov edi, 1                                             ; int64_t arg1\l0x00003155      call dbg.usage\l"]
	"0x0000315a" [URL="dbg.main/0x0000315a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x296d\l0x0000315a      mov rdx, qword [filename]                              ; int64_t arg3\l0x0000315f      mov esi, 3                                             ; int64_t arg2\l0x00003164      xor edi, edi                                           ; int64_t arg1\l0x00003166      call sym.quotearg_n_style_colon\l0x0000316b      mov r12, rax\l0x0000316e      call sym.imp.__errno_location\l0x00003173      mov rcx, r12\l0x00003176      mov edi, 1                                             ; int status\l0x0000317b      lea rdx, [0x00009821]                                  ; \"%s\" ; char *format\l0x00003182      mov esi, dword [rax]                                   ; int errname\l0x00003184      xor eax, eax\l0x00003186      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000318b      nop dword [rax + rax]\l"]
        "0x00002700" -> "0x00002798" [color="#3a96dd"];
        "0x00002798" -> "0x000028ae" [color="#13a10e"];
        "0x00002798" -> "0x000027b4" [color="#c50f1f"];
        "0x000027b4" -> "0x00002860" [color="#13a10e"];
        "0x000027b4" -> "0x000027bd" [color="#c50f1f"];
        "0x000027bd" -> "0x000027e0" [color="#13a10e"];
        "0x000027bd" -> "0x000027bf" [color="#c50f1f"];
        "0x000027bf" -> "0x00003042" [color="#13a10e"];
        "0x000027bf" -> "0x000027ca" [color="#c50f1f"];
        "0x000027ca" -> "0x00002830" [color="#13a10e"];
        "0x000027ca" -> "0x000027cf" [color="#c50f1f"];
        "0x000027cf" -> "0x00002798" [color="#3a96dd"];
        "0x000027e0" -> "0x00002848" [color="#13a10e"];
        "0x000027e0" -> "0x000027e5" [color="#c50f1f"];
        "0x000027e5" -> "0x00003049" [color="#13a10e"];
        "0x000027e5" -> "0x0000280d" [color="#c50f1f"];
        "0x0000280d" -> "0x00003049" [color="#13a10e"];
        "0x0000280d" -> "0x0000281b" [color="#c50f1f"];
        "0x0000281b" -> "0x00002798" [color="#3a96dd"];
        "0x00002830" -> "0x00002870" [color="#13a10e"];
        "0x00002830" -> "0x00002837" [color="#c50f1f"];
        "0x00002837" -> "0x00002848" [color="#3a96dd"];
        "0x00002848" -> "0x00002837" [color="#13a10e"];
        "0x00002848" -> "0x00002850" [color="#c50f1f"];
        "0x00002850" -> "0x00002798" [color="#3a96dd"];
        "0x00002860" -> "0x00002798" [color="#3a96dd"];
        "0x000028ae" -> "0x000030f9" [color="#13a10e"];
        "0x000028ae" -> "0x000028be" [color="#c50f1f"];
        "0x000028be" -> "0x00002b77" [color="#3a96dd"];
        "0x000028be" -> "0x00002b4f" [color="#3a96dd"];
        "0x000028be" -> "0x00002b27" [color="#3a96dd"];
        "0x000028be" -> "0x00002aff" [color="#3a96dd"];
        "0x000028be" -> "0x00002ad7" [color="#3a96dd"];
        "0x000028be" -> "0x00002aaf" [color="#3a96dd"];
        "0x000028be" -> "0x000028cf" [color="#3a96dd"];
        "0x000028be" -> "0x00002b9f" [color="#3a96dd"];
        "0x000028cf" -> "0x000028f2" [color="#3a96dd"];
        "0x000028f2" -> "0x0000311f" [color="#13a10e"];
        "0x000028f2" -> "0x00002929" [color="#c50f1f"];
        "0x00002929" -> "0x00002cb6" [color="#13a10e"];
        "0x00002929" -> "0x00002931" [color="#c50f1f"];
        "0x00002931" -> "0x00002cc7" [color="#13a10e"];
        "0x00002931" -> "0x00002956" [color="#c50f1f"];
        "0x00002956" -> "0x0000315a" [color="#13a10e"];
        "0x00002956" -> "0x00002973" [color="#c50f1f"];
        "0x00002973" -> "0x00002cd3" [color="#13a10e"];
        "0x00002973" -> "0x00002989" [color="#c50f1f"];
        "0x00002989" -> "0x000029d8" [color="#3a96dd"];
        "0x000029d8" -> "0x00002a22" [color="#3a96dd"];
        "0x000029f0" -> "0x00003016" [color="#13a10e"];
        "0x000029f0" -> "0x00002a00" [color="#c50f1f"];
        "0x00002a00" -> "0x00002bc7" [color="#13a10e"];
        "0x00002a00" -> "0x00002a16" [color="#c50f1f"];
        "0x00002a16" -> "0x00002c71" [color="#13a10e"];
        "0x00002a16" -> "0x00002a22" [color="#c50f1f"];
        "0x00002a22" -> "0x000029f0" [color="#13a10e"];
        "0x00002a22" -> "0x00002a53" [color="#c50f1f"];
        "0x00002a53" -> "0x000029f0" [color="#13a10e"];
        "0x00002a53" -> "0x00002a58" [color="#c50f1f"];
        "0x00002a58" -> "0x00002a8e" [color="#3a96dd"];
        "0x00002a60" -> "0x00002aa9" [color="#13a10e"];
        "0x00002a60" -> "0x00002a66" [color="#c50f1f"];
        "0x00002a66" -> "0x00002a85" [color="#3a96dd"];
        "0x00002a85" -> "0x000029f0" [color="#13a10e"];
        "0x00002a85" -> "0x00002a8e" [color="#c50f1f"];
        "0x00002a8e" -> "0x00002a60" [color="#13a10e"];
        "0x00002a8e" -> "0x00002aa9" [color="#c50f1f"];
        "0x00002aa9" -> "0x00002a85" [color="#3a96dd"];
        "0x00002aaf" -> "0x000028f2" [color="#3a96dd"];
        "0x00002ad7" -> "0x000028f2" [color="#3a96dd"];
        "0x00002aff" -> "0x000028f2" [color="#3a96dd"];
        "0x00002b27" -> "0x000028f2" [color="#3a96dd"];
        "0x00002b4f" -> "0x000028f2" [color="#3a96dd"];
        "0x00002b77" -> "0x000028f2" [color="#3a96dd"];
        "0x00002b9f" -> "0x000028f2" [color="#3a96dd"];
        "0x00002bc7" -> "0x00002c47" [color="#3a96dd"];
        "0x00002be0" -> "0x000029d8" [color="#13a10e"];
        "0x00002be0" -> "0x00002be8" [color="#c50f1f"];
        "0x00002be8" -> "0x00002c00" [color="#3a96dd"];
        "0x00002c00" -> "0x00002fea" [color="#13a10e"];
        "0x00002c00" -> "0x00002c37" [color="#c50f1f"];
        "0x00002c37" -> "0x00002fc6" [color="#13a10e"];
        "0x00002c37" -> "0x00002c40" [color="#c50f1f"];
        "0x00002c40" -> "0x00002c47" [color="#3a96dd"];
        "0x00002c47" -> "0x00002be0" [color="#13a10e"];
        "0x00002c47" -> "0x00002c4b" [color="#c50f1f"];
        "0x00002c4b" -> "0x00002c7d" [color="#13a10e"];
        "0x00002c4b" -> "0x00002c50" [color="#c50f1f"];
        "0x00002c50" -> "0x00002be8" [color="#13a10e"];
        "0x00002c50" -> "0x00002c55" [color="#c50f1f"];
        "0x00002c55" -> "0x00002c7d" [color="#13a10e"];
        "0x00002c55" -> "0x00002c5d" [color="#c50f1f"];
        "0x00002c5d" -> "0x00002c00" [color="#3a96dd"];
        "0x00002c71" -> "0x00002c4b" [color="#3a96dd"];
        "0x00002c7d" -> "0x00002f3a" [color="#13a10e"];
        "0x00002c7d" -> "0x00002c8e" [color="#c50f1f"];
        "0x00002c8e" -> "0x000030f4" [color="#13a10e"];
        "0x00002c8e" -> "0x00002ca2" [color="#c50f1f"];
        "0x00002cb6" -> "0x00002cc7" [color="#3a96dd"];
        "0x00002cc7" -> "0x00002973" [color="#3a96dd"];
        "0x00002cd3" -> "0x00002d06" [color="#3a96dd"];
        "0x00002d06" -> "0x00002d19" [color="#3a96dd"];
        "0x00002d10" -> "0x00002d8a" [color="#13a10e"];
        "0x00002d10" -> "0x00002d19" [color="#c50f1f"];
        "0x00002d19" -> "0x00002d10" [color="#13a10e"];
        "0x00002d19" -> "0x00002d3e" [color="#c50f1f"];
        "0x00002d3e" -> "0x00002d8a" [color="#13a10e"];
        "0x00002d3e" -> "0x00002d43" [color="#c50f1f"];
        "0x00002d43" -> "0x00002d56" [color="#13a10e"];
        "0x00002d43" -> "0x00002d4d" [color="#c50f1f"];
        "0x00002d4d" -> "0x00002f7b" [color="#13a10e"];
        "0x00002d4d" -> "0x00002d56" [color="#c50f1f"];
        "0x00002d56" -> "0x00002c7d" [color="#13a10e"];
        "0x00002d56" -> "0x00002d5e" [color="#c50f1f"];
        "0x00002d5e" -> "0x00002d8a" [color="#3a96dd"];
        "0x00002d8a" -> "0x00002edf" [color="#13a10e"];
        "0x00002d8a" -> "0x00002dca" [color="#c50f1f"];
        "0x00002dca" -> "0x00002e7f" [color="#13a10e"];
        "0x00002dca" -> "0x00002dd9" [color="#c50f1f"];
        "0x00002dd9" -> "0x00002e21" [color="#3a96dd"];
        "0x00002e00" -> "0x00002e9d" [color="#13a10e"];
        "0x00002e00" -> "0x00002e0e" [color="#c50f1f"];
        "0x00002e0e" -> "0x00002e19" [color="#3a96dd"];
        "0x00002e19" -> "0x00002e6a" [color="#13a10e"];
        "0x00002e19" -> "0x00002e21" [color="#c50f1f"];
        "0x00002e21" -> "0x00002e00" [color="#13a10e"];
        "0x00002e21" -> "0x00002e39" [color="#c50f1f"];
        "0x00002e39" -> "0x00003086" [color="#13a10e"];
        "0x00002e39" -> "0x00002e5f" [color="#c50f1f"];
        "0x00002e5f" -> "0x00002e21" [color="#13a10e"];
        "0x00002e5f" -> "0x00002e6a" [color="#c50f1f"];
        "0x00002e6a" -> "0x00002e7f" [color="#3a96dd"];
        "0x00002e7f" -> "0x00002d43" [color="#13a10e"];
        "0x00002e7f" -> "0x00002e8b" [color="#c50f1f"];
        "0x00002e8b" -> "0x00002d06" [color="#13a10e"];
        "0x00002e8b" -> "0x00002e98" [color="#c50f1f"];
        "0x00002e98" -> "0x00002d43" [color="#3a96dd"];
        "0x00002e9d" -> "0x00002e19" [color="#13a10e"];
        "0x00002e9d" -> "0x00002eb3" [color="#c50f1f"];
        "0x00002eb3" -> "0x00002edf" [color="#3a96dd"];
        "0x00002edf" -> "0x00002e7f" [color="#13a10e"];
        "0x00002edf" -> "0x00002f0e" [color="#c50f1f"];
        "0x00002f0e" -> "0x00002f3a" [color="#3a96dd"];
        "0x00002f3a" -> "0x00002f9d" [color="#13a10e"];
        "0x00002f3a" -> "0x00002f57" [color="#c50f1f"];
        "0x00002f57" -> "0x00002f7b" [color="#3a96dd"];
        "0x00002f7b" -> "0x000030b2" [color="#13a10e"];
        "0x00002f7b" -> "0x00002f89" [color="#c50f1f"];
        "0x00002f89" -> "0x00002f94" [color="#3a96dd"];
        "0x00002f94" -> "0x00002d56" [color="#3a96dd"];
        "0x00002f9d" -> "0x00002fc6" [color="#3a96dd"];
        "0x00002fc6" -> "0x00002fea" [color="#3a96dd"];
        "0x00002fea" -> "0x00003016" [color="#3a96dd"];
        "0x00003016" -> "0x00003042" [color="#3a96dd"];
        "0x00003042" -> "0x00003049" [color="#3a96dd"];
        "0x00003049" -> "0x00003086" [color="#3a96dd"];
        "0x00003086" -> "0x000030b2" [color="#3a96dd"];
        "0x000030b2" -> "0x00002f94" [color="#13a10e"];
        "0x000030b2" -> "0x000030c8" [color="#c50f1f"];
        "0x000030c8" -> "0x000030f4" [color="#3a96dd"];
        "0x000030f9" -> "0x00002837" [color="#3a96dd"];
        "0x0000311f" -> "0x0000315a" [color="#3a96dd"];
        "0x0000315a" -> "0x00003190" [color="#3a96dd"];
}
