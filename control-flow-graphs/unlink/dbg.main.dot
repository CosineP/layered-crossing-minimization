digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000025e0" [URL="dbg.main/0x000025e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2778\l384: int dbg.main (int argc, char **argv);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000025e0      endbr64                                                ; int main(int argc,char ** argv);\l0x000025e4      push r13\l0x000025e6      push r12\l0x000025e8      lea r12, [0x00007085]                                  ; \"coreutils\"\l0x000025ef      push rbp\l0x000025f0      mov ebp, edi                                           ; argc\l0x000025f2      push rbx\l0x000025f3      mov rbx, rsi                                           ; argv\l0x000025f6      sub rsp, 8\l0x000025fa      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000025fd      call dbg.set_program_name\l0x00002602      lea rsi, [0x00007741]                                  ; const char *locale\l0x00002609      mov edi, 6                                             ; int category\l0x0000260e      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002613      lea rsi, str._usr_local_share_locale                   ; 0x70ae ; \"/usr/local/share/locale\" ; char *dirname\l0x0000261a      mov rdi, r12                                           ; char *domainname\l0x0000261d      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002622      mov rdi, r12                                           ; char *domainname\l0x00002625      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x0000262a      lea rdi, [dbg.close_stdout]                            ; 0x2bb0 ; func function\l0x00002631      call sym.atexit                                        ; int atexit(func function)\l0x00002636      mov r9d, 1                                             ; func rtld_fini\l0x0000263c      mov rsi, rbx                                           ; int argc\l0x0000263f      mov edi, ebp                                           ; func main\l0x00002641      sub rsp, 8\l0x00002645      lea rax, str.Michael_Stone                             ; 0x70c6 ; \"Michael Stone\"\l0x0000264c      mov r8, qword [obj.Version]                            ; [0xa010:8]=0x72a3 ; func fini\l0x00002653      lea rcx, str.GNU_coreutils                             ; 0x7081 ; \"GNU coreutils\" ; func init\l0x0000265a      push 0\l0x0000265c      lea rdx, str.unlink                                    ; 0x7004 ; \"unlink\" ; int64_t arg5\l0x00002663      push rax\l0x00002664      lea rax, [dbg.usage]                                   ; 0x2850\l0x0000266b      push rax                                               ; 0x2850\l                                                                       ; dbg.usage\l0x0000266c      xor eax, eax\l0x0000266e      call dbg.parse_gnu_standard_options_only\l0x00002673      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xa090:4]=0\l0x00002679      add rsp, 0x20\l0x0000267d      cmp eax, ebp\l0x0000267f      jge 0x26a9\l"]
	"0x00002681" [URL="dbg.main/0x00002681", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002681      movsxd rdx, eax\l0x00002684      add eax, 1\l0x00002687      cmp eax, ebp\l0x00002689      jl 0x271b\l"]
	"0x0000268f" [URL="dbg.main/0x0000268f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000268f      mov rdi, qword [rbx + rdx*8]                           ; const char *path\l0x00002693      call sym.imp.unlink                                    ; int unlink(const char *path)\l0x00002698      test eax, eax\l0x0000269a      jne 0x26d4\l"]
	"0x0000269c" [URL="dbg.main/0x0000269c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000269c      add rsp, 8\l0x000026a0      xor eax, eax\l0x000026a2      pop rbx\l0x000026a3      pop rbp\l0x000026a4      pop r12\l0x000026a6      pop r13\l0x000026a8      ret\l"]
	"0x000026a9" [URL="dbg.main/0x000026a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x267f\l0x000026a9      mov edx, 5\l0x000026ae      lea rsi, str.missing_operand                           ; 0x70d4 ; \"missing operand\"\l0x000026b5      xor edi, edi\l0x000026b7      call sym.imp.dcgettext\l0x000026bc      xor edi, edi                                           ; int status\l0x000026be      xor esi, esi                                           ; int errname\l0x000026c0      mov rdx, rax                                           ; char *format\l0x000026c3      xor eax, eax\l0x000026c5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000026ca      mov edi, 1                                             ; int64_t arg1\l0x000026cf      call dbg.usage\l"]
	"0x000026d4" [URL="dbg.main/0x000026d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x269a\l0x000026d4      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xa090:4]=0\l0x000026db      mov edi, 4                                             ; int64_t arg1\l0x000026e0      mov rsi, qword [rbx + rax*8]                           ; int64_t arg2\l0x000026e4      call sym.quotearg_style\l0x000026e9      mov edx, 5\l0x000026ee      lea rsi, str.cannot_unlink__s                          ; 0x70f5 ; \"cannot unlink %s\"\l0x000026f5      xor edi, edi\l0x000026f7      mov r13, rax\l0x000026fa      call sym.imp.dcgettext\l0x000026ff      mov r12, rax\l0x00002702      call sym.imp.__errno_location\l0x00002707      mov rcx, r13\l0x0000270a      mov rdx, r12                                           ; char *format\l0x0000270d      mov edi, 1                                             ; int status\l0x00002712      mov esi, dword [rax]                                   ; int errname\l0x00002714      xor eax, eax\l0x00002716      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000271b" [URL="dbg.main/0x0000271b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2689\l0x0000271b      mov rdi, qword [rbx + rdx*8 + 8]                       ; int64_t arg1\l0x00002720      call dbg.quote\l0x00002725      mov edx, 5\l0x0000272a      lea rsi, str.extra_operand__s                          ; 0x70e4 ; \"extra operand %s\"\l0x00002731      xor edi, edi\l0x00002733      mov r12, rax\l0x00002736      call sym.imp.dcgettext\l0x0000273b      xor edi, edi                                           ; int status\l0x0000273d      mov rcx, r12\l0x00002740      xor esi, esi                                           ; int errname\l0x00002742      mov rdx, rax                                           ; char *format\l; DATA XREF from dbg.version_etc_arn @ 0x52d4\l0x00002745      xor eax, eax\l0x00002747      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000274c      mov edi, 1                                             ; int64_t arg1\l0x00002751      call dbg.usage\l0x00002756      nop word cs:[rax + rax]\l"]
        "0x000025e0" -> "0x000026a9" [color="#13a10e"];
        "0x000025e0" -> "0x00002681" [color="#c50f1f"];
        "0x00002681" -> "0x0000271b" [color="#13a10e"];
        "0x00002681" -> "0x0000268f" [color="#c50f1f"];
        "0x0000268f" -> "0x000026d4" [color="#13a10e"];
        "0x0000268f" -> "0x0000269c" [color="#c50f1f"];
        "0x000026a9" -> "0x000026d4" [color="#3a96dd"];
        "0x000026d4" -> "0x0000271b" [color="#3a96dd"];
}
