digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002a20" [URL="dbg.main/0x00002a20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x46d8\l7262: int dbg.main (int argc, char **argv);\l; var uintmax_t n_start @ rbp-0xf8\l; var sigaction act @ rbp-0xf0\l; var char[21] buffer @ rbp-0x50\l; var size_t var_8h @ rsp+0x18\l; var size_t var_10h @ rsp+0x20\l; var size_t *ptr @ rsp+0x28\l; var size_t var_20h @ rsp+0x30\l; var size_t size @ rsp+0x38\l; var size_t var_30h @ rsp+0x40\l; var char *errname @ rsp+0x48\l; var char *var_40h @ rsp+0x50\l; var size_t s1 @ rsp+0x58\l; var uint32_t var_50h @ rsp+0x60\l; var size_t *n @ rsp+0x68\l; var signed int64_t var_60h @ rsp+0x70\l; var uint32_t var_6fh @ rsp+0x7f\l; var int64_t var_78h @ rsp+0x88\l; var struct sigaction *oldact @ rsp+0x90\l; var int64_t var_120h @ rsp+0x130\l; var int64_t var_138h @ rsp+0x148\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002a20      endbr64                                                ; int main(int argc,char ** argv);\l0x00002a24      push r15\l0x00002a26      lea r15, [0x0000b080]\l0x00002a2d      push r14\l0x00002a2f      lea r14, str.0123456789C:a:b:del:n:t:ux                ; 0xa212 ; \"0123456789C:a:b:del:n:t:ux\"\l0x00002a36      push r13\l0x00002a38      push r12\l0x00002a3a      lea r12, [0x0000a1b3]                                  ; \"coreutils\"\l0x00002a41      push rbp\l0x00002a42      mov ebp, edi                                           ; argc\l0x00002a44      push rbx\l0x00002a45      mov rbx, rsi                                           ; argv\l0x00002a48      sub rsp, 0x148\l0x00002a4f      mov rax, qword fs:[0x28]\l0x00002a58      mov qword [var_138h], rax\l0x00002a60      xor eax, eax\l0x00002a62      call sym.imp.getpagesize\l0x00002a67      mov rdi, qword [rbx]                                   ; int64_t arg1\l0x00002a6a      cdqe\l0x00002a6c      mov qword [var_30h], rax\l0x00002a71      call dbg.set_program_name\l0x00002a76      lea rsi, [0x0000b6c1]                                  ; const char *locale\l0x00002a7d      mov edi, 6                                             ; int category\l0x00002a82      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002a87      lea rsi, str._usr_local_share_locale                   ; 0xa1f8 ; \"/usr/local/share/locale\" ; char *dirname\l0x00002a8e      mov rdi, r12                                           ; char *domainname\l0x00002a91      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002a96      mov rdi, r12                                           ; char *domainname\l0x00002a99      lea r12, obj.longopts                                  ; 0xe8e0 ; \"U\\xa2\"\l0x00002aa0      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002aa5      lea rdi, [dbg.close_stdout]                            ; 0x5c70 ; func function\l0x00002aac      call sym.atexit                                        ; int atexit(func function)\l0x00002ab1      lea rax, [0x0000a210]                                  ; \"-\"\l0x00002ab8      mov qword [var_8h], 0\l0x00002ac1      mov qword [obj.infile], rax                            ; [0xf390:8]=0x27002800000001\l0x00002ac8      lea rax, [0x0000a3ba]                                  ; \"x\"\l0x00002acf      mov qword [obj.outbase], rax                           ; [0xf3c0:8]=8\l0x00002ad6      mov qword [var_10h], 0\l0x00002adf      mov dword [ptr], 0\l0x00002ae7      mov qword [size], 0\l0x00002af0      mov dword [rsp], 0\l0x00002af7      nop word [rax + rax]\l"]
	"0x00002b00" [URL="dbg.main/0x00002b00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002b99  CODE 0x00002bd1  CODE 0x00002c28  \l; XREFS: CODE 0x00002c81  CODE 0x00002cc4  CODE 0x00002cd7  \l; XREFS: CODE 0x00002ce3  CODE 0x00002cef  CODE 0x00002d13  \l; XREFS: CODE 0x00002d57  CODE 0x00002dae  CODE 0x00002dff  \l; XREFS: CODE 0x00002ebd  CODE 0x00002f03  CODE 0x00002f57  \l; XREFS: CODE 0x00002f63  CODE 0x0000324b  CODE 0x00003299  \l0x00002b00      mov r13d, dword [obj.optind]                           ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xf270:4]=2\l0x00002b07      mov rcx, r12\l0x00002b0a      mov rdx, r14\l0x00002b0d      mov rsi, rbx\l0x00002b10      mov eax, 1\l0x00002b15      mov edi, ebp\l0x00002b17      test r13d, r13d\l0x00002b1a      cmove r13d, eax\l0x00002b1e      xor r8d, r8d\l0x00002b21      call sym.imp.getopt_long\l0x00002b26      mov r8d, eax\l0x00002b29      cmp eax, 0xffffffff\l0x00002b2c      je 0x3001\l"]
	"0x00002b32" [URL="dbg.main/0x00002b32", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b32      cmp eax, 0x83\l0x00002b37      jg case.0x2b5b.58\l"]
	"0x00002b3d" [URL="dbg.main/0x00002b3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b3d      cmp eax, 0x2f\l0x00002b40      jle 0x2f70\l"]
	"0x00002b46" [URL="dbg.main/0x00002b46", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b46      lea eax, [rax - 0x30]\l0x00002b49      cmp eax, 0x53\l0x00002b4c      ja case.0x2b5b.58\l"]
	"0x00002b52" [URL="dbg.main/0x00002b52", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b52      mov edx, eax\l0x00002b54      movsxd rdx, dword [r15 + rdx*4]\l0x00002b58      add rdx, r15\l;-- switch\l0x00002b5b      jmp rdx                                                ; switch table (84 cases) at 0xb080\l"]
	"0x00002b60" [URL="dbg.main/0x00002b60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 48...57:                                                      ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002b60      mov edx, dword [rsp]\l0x00002b63      test edx, edx\l0x00002b65      je 0x2b86\l"]
	"0x00002b67" [URL="dbg.main/0x00002b67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b67      cmp dword [rsp], 4\l0x00002b6b      jne 0x357b\l"]
	"0x00002b71" [URL="dbg.main/0x00002b71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b71      mov ecx, dword [ptr]\l0x00002b75      test ecx, ecx\l0x00002b77      je 0x3265\l"]
	"0x00002b7d" [URL="dbg.main/0x00002b7d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b7d      cmp ecx, r13d\l0x00002b80      je 0x3265\l"]
	"0x00002b86" [URL="dbg.main/0x00002b86", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b65\l0x00002b86      cdqe\l0x00002b88      mov dword [ptr], r13d\l0x00002b8d      mov qword [var_8h], rax\l0x00002b92      mov dword [rsp], 4\l0x00002b99      jmp 0x2b00\l"]
	"0x00002ba0" [URL="dbg.main/0x00002ba0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 100:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002ba0      cmp r8d, 0x64\l0x00002ba4      lea rsi, str.0123456789                                ; 0xa1dc ; \"0123456789\"\l0x00002bab      lea rax, str.0123456789abcdef                          ; 0xa1e7 ; \"0123456789abcdef\"\l0x00002bb2      mov r13, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002bb9      cmovne rsi, rax\l0x00002bbd      mov dword [var_40h], r8d\l0x00002bc2      mov qword [obj.suffix_alphabet], rsi                   ; [0xf020:8]=0xa1e7 str.0123456789abcdef\l0x00002bc9      mov qword [errname], rsi\l0x00002bce      test r13, r13\l0x00002bd1      je 0x2b00\l"]
	"0x00002bd7" [URL="dbg.main/0x00002bd7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bd7      mov rdi, r13                                           ; const char *s\l0x00002bda      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x00002bdf      mov rsi, qword [errname]                               ; const char *s2\l0x00002be4      mov rdi, r13                                           ; const char *s1\l0x00002be7      mov qword [s1], rax\l0x00002bec      call sym.imp.strspn                                    ; size_t strspn(const char *s1, const char *s2)\l0x00002bf1      cmp qword [s1], rax\l0x00002bf6      mov r8d, dword [var_40h]\l0x00002bfb      je 0x2c1a\l"]
	"0x00002bfd" [URL="dbg.main/0x00002bfd", fillcolor="white",color="#767676", fontname="Courier",label="0x00002bfd      jmp 0x4301\l"]
	"0x00002c08" [URL="dbg.main/0x00002c08", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c1f\l0x00002c08      cmp byte [r13 + 1], 0\l0x00002c0d      je 0x2c21\l"]
	"0x00002c0f" [URL="dbg.main/0x00002c0f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c0f      add r13, 1\l0x00002c13      mov qword [obj.optarg], r13                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l"]
	"0x00002c1a" [URL="dbg.main/0x00002c1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bfb\l0x00002c1a      cmp byte [r13], 0x30\l0x00002c1f      je 0x2c08\l"]
	"0x00002c21" [URL="dbg.main/0x00002c21", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c0d\l0x00002c21      mov qword [obj.numeric_suffix_start], r13              ; [0xf3a0:8]=1\l0x00002c28      jmp 0x2b00\l"]
	"0x00002c2d" [URL="dbg.main/0x00002c2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 98:                                                           ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002c2d      mov r8d, dword [rsp]\l0x00002c31      test r8d, r8d\l0x00002c34      jne 0x357b\l"]
	"0x00002c3a" [URL="dbg.main/0x00002c3a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c3a      mov edx, 5\l0x00002c3f      lea rsi, str.invalid_number_of_bytes                   ; 0xa243 ; \"invalid number of bytes\"\l0x00002c46      xor edi, edi\l0x00002c48      call sym.imp.dcgettext\l0x00002c4d      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002c54      xor r9d, r9d\l0x00002c57      lea rcx, str.bEGKkMmPTYZ0                              ; global_multipliers\l                                                                       ; 0xb238 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002c5e      mov r8, rax                                            ; int64_t arg6\l0x00002c61      mov esi, 1                                             ; int64_t arg3\l0x00002c66      movabs rdx, 0x7fffffffffffffff                         ; 9223372036854775807 ; int64_t arg4\l0x00002c70      call dbg.xdectoumax\l0x00002c75      mov dword [rsp], 1\l0x00002c7c      mov qword [var_8h], rax\l0x00002c81      jmp 0x2b00\l"]
	"0x00002c86" [URL="dbg.main/0x00002c86", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 130:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002c86      mov edx, 5\l0x00002c8b      lea rsi, str.invalid_IO_block_size                     ; 0xa2db ; \"invalid IO block size\"\l0x00002c92      xor edi, edi\l; DATA XREF from dbg.emit_bug_reporting_address @ 0x8a65\l0x00002c94      call sym.imp.dcgettext\l0x00002c99      mov rdx, qword [var_30h]\l0x00002c9e      xor r9d, r9d\l0x00002ca1      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002ca8      mov r8, rax                                            ; int64_t arg6\l0x00002cab      lea rcx, str.bEGKkMmPTYZ0                              ; global_multipliers\l                                                                       ; 0xb238 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002cb2      mov esi, 1                                             ; int64_t arg3\l0x00002cb7      not rdx                                                ; int64_t arg4\l0x00002cba      call dbg.xdectoumax\l0x00002cbf      mov qword [size], rax\l0x00002cc4      jmp 0x2b00\l"]
	"0x00002cc9" [URL="dbg.main/0x00002cc9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 129:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002cc9      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002cd0      mov qword [obj.filter_command], rax                    ; [0xf500:8]=1\l0x00002cd7      jmp 0x2b00\l"]
	"0x00002cdc" [URL="dbg.main/0x00002cdc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002cdc      mov byte [obj.verbose], 1                              ; [0xf2e2:1]=1\l0x00002ce3      jmp 0x2b00\l"]
	"0x00002ce8" [URL="dbg.main/0x00002ce8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 117:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002ce8      mov byte [obj.unbuffered], 1                           ; [0xf2e0:1]=1\l0x00002cef      jmp 0x2b00\l"]
	"0x00002cf4" [URL="dbg.main/0x00002cf4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 131:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002cf4      mov r13, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002cfb      mov rdi, r13                                           ; int64_t arg1\l0x00002cfe      call dbg.last_component\l0x00002d03      cmp r13, rax\l0x00002d06      jne 0x42a4\l"]
	"0x00002d0c" [URL="dbg.main/0x00002d0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d0c      mov qword [obj.additional_suffix], r13                 ; [0xf398:8]=1\l0x00002d13      jmp 0x2b00\l"]
	"0x00002d18" [URL="dbg.main/0x00002d18", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 97:                                                           ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002d18      mov edx, 5\l0x00002d1d      lea rsi, str.invalid_suffix_length                     ; 0xa22d ; \"invalid suffix length\"\l0x00002d24      xor edi, edi\l0x00002d26      call sym.imp.dcgettext\l0x00002d2b      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002d32      xor r9d, r9d\l0x00002d35      xor esi, esi                                           ; int64_t arg3\l0x00002d37      mov r8, rax                                            ; int64_t arg6\l0x00002d3a      lea rcx, [0x0000b6c1]                                  ; int64_t arg5\l0x00002d41      movabs rdx, 0x1fffffffffffffff                         ; 2305843009213693951 ; int64_t arg4\l0x00002d4b      call dbg.xdectoumax\l0x00002d50      mov qword [obj.suffix_length], rax                     ; [0xf3a8:8]=256\l0x00002d57      jmp 0x2b00\l"]
	"0x00002d5c" [URL="dbg.main/0x00002d5c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 67:                                                           ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002d5c      mov esi, dword [rsp]\l0x00002d5f      test esi, esi\l0x00002d61      jne 0x357b\l"]
	"0x00002d67" [URL="dbg.main/0x00002d67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d67      mov edx, 5\l0x00002d6c      lea rsi, str.invalid_number_of_bytes                   ; 0xa243 ; \"invalid number of bytes\"\l0x00002d73      xor edi, edi\l0x00002d75      call sym.imp.dcgettext\l0x00002d7a      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002d81      xor r9d, r9d\l0x00002d84      lea rcx, str.bEGKkMmPTYZ0                              ; global_multipliers\l                                                                       ; 0xb238 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002d8b      mov r8, rax                                            ; int64_t arg6\l0x00002d8e      mov esi, 1                                             ; int64_t arg3\l0x00002d93      movabs rdx, 0x7fffffffffffffff                         ; 9223372036854775807 ; int64_t arg4\l0x00002d9d      call dbg.xdectoumax\l0x00002da2      mov dword [rsp], 2\l0x00002da9      mov qword [var_8h], rax\l0x00002dae      jmp 0x2b00\l"]
	"0x00002db3" [URL="dbg.main/0x00002db3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 116:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002db3      mov r13, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002dba      movsx eax, byte [r13]\l0x00002dbf      test al, al\l0x00002dc1      je 0x42dd\l"]
	"0x00002dc7" [URL="dbg.main/0x00002dc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dc7      cmp byte [r13 + 1], 0\l0x00002dcc      je 0x2de7\l"]
	"0x00002dce" [URL="dbg.main/0x00002dce", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dce      lea rsi, [0x0000a2bb]                                  ; \"\\0\" ; const char *s2\l0x00002dd5      mov rdi, r13                                           ; const char *s1\l0x00002dd8      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002ddd      test eax, eax\l0x00002ddf      jne 0x460e\l"]
	"0x00002de5" [URL="dbg.main/0x00002de5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002de5      xor eax, eax\l"]
	"0x00002de7" [URL="dbg.main/0x00002de7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dcc\l0x00002de7      mov edx, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\"\l0x00002ded      test edx, edx\l0x00002def      js 0x2df9\l"]
	"0x00002df1" [URL="dbg.main/0x00002df1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002df1      cmp edx, eax\l0x00002df3      jne 0x4640\l"]
	"0x00002df9" [URL="dbg.main/0x00002df9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2def\l0x00002df9      mov dword [obj.eolchar], eax                           ; [0xf010:4]=10 ; \"\\n\"\l0x00002dff      jmp 0x2b00\l"]
	"0x00002e04" [URL="dbg.main/0x00002e04", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 110:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002e04      mov ecx, dword [rsp]\l0x00002e07      test ecx, ecx\l0x00002e09      jne 0x357b\l"]
	"0x00002e0f" [URL="dbg.main/0x00002e0f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e0f      call sym.imp.__ctype_b_loc\l0x00002e14      mov rcx, qword [rax]\l0x00002e17      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002e1e      jmp 0x2e27\l"]
	"0x00002e20" [URL="dbg.main/0x00002e20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e38\l0x00002e20      mov qword [obj.optarg], rax                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l"]
	"0x00002e27" [URL="dbg.main/0x00002e27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e1e\l0x00002e27      mov r13, rax\l0x00002e2a      add rax, 1\l0x00002e2e      movzx edx, byte [r13]\l0x00002e33      test byte [rcx + rdx*2 + 1], 0x20\l0x00002e38      jne 0x2e20\l"]
	"0x00002e3a" [URL="dbg.main/0x00002e3a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e3a      cmp byte [r13], 0x72\l0x00002e3f      jne 0x2fc7\l"]
	"0x00002e45" [URL="dbg.main/0x00002e45", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e45      cmp byte [r13 + 1], 0x2f\l0x00002e4a      jne 0x2fc7\l"]
	"0x00002e50" [URL="dbg.main/0x00002e50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e50      add r13, 2\l0x00002e54      mov dword [rsp], 7\l0x00002e5b      mov qword [obj.optarg], r13                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l"]
	"0x00002e62" [URL="dbg.main/0x00002e62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2fe4, 0x2ffc\l0x00002e62      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; const char *s\l0x00002e69      mov esi, 0x2f                                          ; '/' ; int c\l0x00002e6e      call sym.imp.strchr                                    ; char *strchr(const char *s, int c)\l0x00002e73      mov edx, 5\l0x00002e78      lea rsi, str.invalid_number_of_chunks                  ; 0xa276 ; \"invalid number of chunks\"\l0x00002e7f      xor edi, edi\l0x00002e81      mov r13, rax\l0x00002e84      test rax, rax\l0x00002e87      je 0x321f\l"]
	"0x00002e8d" [URL="dbg.main/0x00002e8d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e8d      call sym.imp.dcgettext\l0x00002e92      xor r9d, r9d\l0x00002e95      or rdx, 0xffffffffffffffff                             ; int64_t arg4\l0x00002e99      lea rdi, [r13 + 1]                                     ; int64_t arg2\l0x00002e9d      mov r8, rax                                            ; int64_t arg6\l0x00002ea0      lea rcx, [0x0000b6c1]                                  ; int64_t arg5\l0x00002ea7      mov esi, 1                                             ; int64_t arg3\l0x00002eac      call dbg.xdectoumax\l0x00002eb1      cmp r13, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002eb8      mov qword [var_8h], rax\l0x00002ebd      je 0x2b00\l"]
	"0x00002ec3" [URL="dbg.main/0x00002ec3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ec3      mov byte [r13], 0\l0x00002ec8      mov edx, 5\l0x00002ecd      lea rsi, str.invalid_chunk_number                      ; 0xa28f ; \"invalid chunk number\"\l0x00002ed4      xor edi, edi\l0x00002ed6      call sym.imp.dcgettext\l0x00002edb      mov rdx, qword [var_8h]                                ; int64_t arg4\l0x00002ee0      xor r9d, r9d\l0x00002ee3      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002eea      mov r8, rax                                            ; int64_t arg6\l0x00002eed      lea rcx, [0x0000b6c1]                                  ; int64_t arg5\l0x00002ef4      mov esi, 1                                             ; int64_t arg3\l0x00002ef9      call dbg.xdectoumax\l0x00002efe      mov qword [var_10h], rax\l0x00002f03      jmp 0x2b00\l"]
	"0x00002f08" [URL="dbg.main/0x00002f08", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 108:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002f08      mov edi, dword [rsp]\l0x00002f0b      test edi, edi\l0x00002f0d      jne 0x357b\l"]
	"0x00002f13" [URL="dbg.main/0x00002f13", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f13      mov edx, 5\l0x00002f18      lea rsi, str.invalid_number_of_lines                   ; 0xa25b ; \"invalid number of lines\"\l0x00002f1f      xor edi, edi\l0x00002f21      call sym.imp.dcgettext\l0x00002f26      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x00002f2d      xor r9d, r9d\l0x00002f30      lea rcx, [0x0000b6c1]                                  ; int64_t arg5\l0x00002f37      mov r8, rax                                            ; int64_t arg6\l0x00002f3a      mov rdx, 0xffffffffffffffff                            ; int64_t arg4\l0x00002f41      mov esi, 1                                             ; int64_t arg3\l0x00002f46      call dbg.xdectoumax\l0x00002f4b      mov dword [rsp], 3\l0x00002f52      mov qword [var_8h], rax\l0x00002f57      jmp 0x2b00\l"]
	"0x00002f5c" [URL="dbg.main/0x00002f5c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 101:                                                          ; from 0x00002b5b\l; CODE XREF from dbg.main @ 0x2b5b\l0x00002f5c      mov byte [obj.elide_empty_files], 1                    ; [0xf2e1:1]=1\l0x00002f63      jmp 0x2b00\l"]
	"0x00002f70" [URL="dbg.main/0x00002f70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b40\l0x00002f70      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002f75      jne 0x2fb5\l"]
	"0x00002f77" [URL="dbg.main/0x00002f77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f77      sub rsp, 8\l0x00002f7b      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xf268:8]=0 ; func main\l0x00002f82      xor eax, eax\l0x00002f84      mov rcx, qword [obj.Version]                           ; [0xf028:8]=0xb245 ; \"E\\xb2\" ; func init\l0x00002f8b      push 0\l0x00002f8d      lea r9, str.Richard_M._Stallman                        ; 0xa2f1 ; \"Richard M. Stallman\" ; int64_t arg_c0h\l0x00002f94      lea r8, str.Torbjorn_Granlund                          ; 0xa305 ; \"Torbjorn Granlund\" ; int64_t arg6\l0x00002f9b      lea rdx, str.GNU_coreutils                             ; 0xa1af ; \"GNU coreutils\" ; int64_t arg3\l0x00002fa2      lea rsi, [global_program]                              ; 0xa133 ; \"split\" ; int64_t arg2\l0x00002fa9      call dbg.version_etc\l0x00002fae      xor edi, edi                                           ; int status\l0x00002fb0      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002fb5" [URL="dbg.main/0x00002fb5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f75\l0x00002fb5      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002fba      jne case.0x2b5b.58\l"]
	"0x00002fc0" [URL="dbg.main/0x00002fc0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fc0      xor edi, edi                                           ; int64_t arg1\l0x00002fc2      call dbg.usage\l"]
	"0x00002fc7" [URL="dbg.main/0x00002fc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e3f, 0x2e4a\l0x00002fc7      mov edx, 2                                             ; size_t n\l0x00002fcc      lea rsi, [0x0000a273]                                  ; \"l/\" ; const char *s2\l0x00002fd3      mov rdi, r13                                           ; const char *s1\l0x00002fd6      call sym.imp.strncmp                                   ; int strncmp(const char *s1, const char *s2, size_t n)\l0x00002fdb      mov dword [rsp], 5\l0x00002fe2      test eax, eax\l0x00002fe4      jne 0x2e62\l"]
	"0x00002fea" [URL="dbg.main/0x00002fea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fea      add r13, 2\l0x00002fee      mov dword [rsp], 6\l0x00002ff5      mov qword [obj.optarg], r13                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4\l0x00002ffc      jmp 0x2e62\l"]
	"0x00003001" [URL="dbg.main/0x00003001", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b2c\l0x00003001      cmp qword [var_10h], 0\l0x00003007      je 0x3017\l"]
	"0x00003009" [URL="dbg.main/0x00003009", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003009      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x00003011      jne 0x45fd\l"]
	"0x00003017" [URL="dbg.main/0x00003017", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3007\l0x00003017      cmp dword [rsp], 0\l0x0000301b      je 0x3250\l"]
	"0x00003021" [URL="dbg.main/0x00003021", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003021      cmp qword [var_8h], 0\l0x00003027      je 0x448e\l"]
	"0x0000302d" [URL="dbg.main/0x0000302d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3260\l0x0000302d      cmp dword [obj.eolchar], 0                             ; [0xf010:4]=10 ; \"\\n\"\l0x00003034      jns 0x3040\l"]
	"0x00003036" [URL="dbg.main/0x00003036", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003036      mov dword [obj.eolchar], 0xa                           ; [0xf010:4]=10 ; \"\\n\"\l"]
	"0x00003040" [URL="dbg.main/0x00003040", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3034\l0x00003040      mov eax, dword [rsp]\l0x00003043      mov rdi, qword [obj.numeric_suffix_start]              ; [0xf3a0:8]=1\l0x0000304a      lea r12d, [rax - 5]\l0x0000304e      test rdi, rdi\l0x00003051      je 0x33d8\l"]
	"0x00003057" [URL="dbg.main/0x00003057", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003057      mov byte [obj.suffix_auto], 0                          ; [0xf018:1]=0\l0x0000305e      cmp r12d, 2\l0x00003062      jbe 0x3454\l"]
	"0x00003068" [URL="dbg.main/0x00003068", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x33e5\l0x00003068      mov r14, qword [obj.suffix_length]                     ; [0xf3a8:8]=256\l0x0000306f      test r14, r14\l0x00003072      je 0x33c0\l"]
	"0x00003078" [URL="dbg.main/0x00003078", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3427\l0x00003078      mov byte [obj.suffix_auto], 0                          ; [0xf018:1]=0\l"]
	"0x0000307f" [URL="dbg.main/0x0000307f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x33d3\l0x0000307f      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xf270:4]=2\l0x00003085      cmp eax, ebp\l0x00003087      jge 0x30c9\l"]
	"0x00003089" [URL="dbg.main/0x00003089", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003089      movsxd rcx, eax\l0x0000308c      lea edx, [rax + 1]\l0x0000308f      lea rsi, [rcx*8]\l0x00003097      mov rcx, qword [rbx + rcx*8]\l0x0000309b      mov dword [obj.optind], edx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xf270:4]=2\l0x000030a1      mov qword [obj.infile], rcx                            ; [0xf390:8]=0x27002800000001\l0x000030a8      cmp edx, ebp\l0x000030aa      jge 0x30c9\l"]
	"0x000030ac" [URL="dbg.main/0x000030ac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030ac      mov rdx, qword [rbx + rsi + 8]\l0x000030b1      add eax, 2\l0x000030b4      mov dword [obj.optind], eax                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xf270:4]=2\l0x000030ba      mov qword [obj.outbase], rdx                           ; [0xf3c0:8]=8\l0x000030c1      cmp eax, ebp\l0x000030c3      jl 0x4470\l"]
	"0x000030c9" [URL="dbg.main/0x000030c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3087, 0x30aa\l0x000030c9      mov rdi, qword [obj.numeric_suffix_start]              ; [0xf3a0:8]=1\l0x000030d0      test rdi, rdi\l0x000030d3      je 0x30f3\l"]
	"0x000030d5" [URL="dbg.main/0x000030d5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030d5      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x000030da      cmp rax, qword [obj.suffix_length]                     ; [0xf3a8:8]=256\l0x000030e1      mov edx, 5\l0x000030e6      lea rsi, str.numerical_suffix_start_value_is_too_large_for_the_suffix_length ; 0xaff0 ; \"numerical suffix start value is too large for the suffix length\"\l0x000030ed      ja 0x3587\l"]
	"0x000030f3" [URL="dbg.main/0x000030f3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30d3\l0x000030f3      mov rbp, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001\l0x000030fa      lea rsi, [0x0000a210]                                  ; \"-\" ; const char *s2\l0x00003101      mov rdi, rbp                                           ; const char *s1\l0x00003104      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00003109      test eax, eax\l0x0000310b      je 0x3123\l"]
	"0x0000310d" [URL="dbg.main/0x0000310d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000310d      xor ecx, ecx                                           ; int64_t arg4\l0x0000310f      xor edx, edx                                           ; int64_t arg3\l0x00003111      xor edi, edi                                           ; int64_t arg1\l0x00003113      mov rsi, rbp                                           ; int64_t arg2\l0x00003116      call dbg.fd_reopen\l0x0000311b      test eax, eax\l0x0000311d      js 0x4557\l"]
	"0x00003123" [URL="dbg.main/0x00003123", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x310b\l0x00003123      xor edi, edi                                           ; int fildes\l0x00003125      lea rsi, obj.in_stat_buf                               ; 0xf300 ; void *buf\l0x0000312c      call sym.imp.fstat                                     ; int fstat(int fildes, void *buf)\l0x00003131      test eax, eax\l0x00003133      jne 0x440a\l"]
	"0x00003139" [URL="dbg.main/0x00003139", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003139      cmp qword [size], 0\l0x0000313f      jne 0x316a\l"]
	"0x00003141" [URL="dbg.main/0x00003141", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003141      mov rcx, qword [0x0000f338]                            ; [0xf338:8]=0\l0x00003148      movabs rax, 0x1ffffffffffe0000\l; DATA XREF from dbg.version_etc_arn @ 0x869f\l0x00003152      lea rdx, [rcx - 0x20000]\l0x00003159      cmp rdx, rax\l0x0000315c      mov eax, 0x20000\l0x00003161      cmovbe rax, rcx\l0x00003165      mov qword [size], rax\l"]
	"0x0000316a" [URL="dbg.main/0x0000316a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x313f\l0x0000316a      mov rbx, qword [var_30h]\l0x0000316f      mov rdi, qword [size]\l0x00003174      or r15, 0xffffffffffffffff\l0x00003178      movabs r13, 0x7fffffffffffffff                         ; 9223372036854775807\l0x00003182      add rdi, rbx                                           ; size_t size\l0x00003185      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x0000318a      xor edx, edx\l0x0000318c      lea rcx, [rbx + rax - 1]\l0x00003191      mov rax, rcx\l0x00003194      div rbx\l0x00003197      sub rcx, rdx\l0x0000319a      mov qword [s1], rcx\l0x0000319f      cmp r12d, 1\l0x000031a3      jbe 0x34a6\l"]
	"0x000031a9" [URL="dbg.main/0x000031a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3529\l0x000031a9      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x000031b1      je 0x31ff\l"]
	"0x000031b3" [URL="dbg.main/0x000031b3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000031b3      lea rbp, obj.newblocked                                ; 0xf3e0\l0x000031ba      mov rdi, rbp\l0x000031bd      call sym.imp.sigemptyset\l0x000031c2      xor esi, esi                                           ; const struct sigaction *act\l; DATA XREF from dbg.main @ 0x2aa5\l0x000031c4      mov edi, 0xd                                           ; int signum\l0x000031c9      lea rdx, [oldact]                                      ; struct sigaction *oldact\l0x000031d1      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x000031d6      cmp qword [oldact], 1\l0x000031df      je 0x31ee\l"]
	"0x000031e1" [URL="dbg.main/0x000031e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000031e1      mov esi, 0xd\l0x000031e6      mov rdi, rbp\l0x000031e9      call sym.imp.sigaddset\l"]
	"0x000031ee" [URL="dbg.main/0x000031ee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31df\l0x000031ee      lea rdx, obj.oldblocked                                ; 0xf460\l0x000031f5      mov rsi, rbp\l0x000031f8      xor edi, edi\l0x000031fa      call sym.imp.sigprocmask\l"]
	"0x000031ff" [URL="dbg.main/0x000031ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31b1\l0x000031ff      mov eax, dword [rsp]\l0x00003202      sub eax, 2\l0x00003205      cmp eax, 5\l0x00003208      ja case.default.0x321c\l"]
	"0x0000320e" [URL="dbg.main/0x0000320e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000320e      lea rdx, [0x0000b1d0]\l0x00003215      movsxd rax, dword [rdx + rax*4]\l0x00003219      add rax, rdx\l;-- switch\l0x0000321c      jmp rax                                                ; switch table (6 cases) at 0xb1d0\l"]
	"0x0000321f" [URL="dbg.main/0x0000321f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e87\l0x0000321f      call sym.imp.dcgettext\l0x00003224      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xf280:8]=4 ; int64_t arg2\l0x0000322b      xor r9d, r9d\l0x0000322e      or rdx, 0xffffffffffffffff                             ; int64_t arg4\l0x00003232      mov r8, rax                                            ; int64_t arg6\l0x00003235      lea rcx, [0x0000b6c1]                                  ; int64_t arg5\l0x0000323c      mov esi, 1                                             ; int64_t arg3\l0x00003241      call dbg.xdectoumax\l0x00003246      mov qword [var_8h], rax\l0x0000324b      jmp 0x2b00\l"]
	"0x00003250" [URL="dbg.main/0x00003250", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x301b\l0x00003250      mov qword [var_8h], 0x3e8                              ; [0x3e8:8]=0x1c8bf239f54162e4\l0x00003259      mov dword [rsp], 3\l0x00003260      jmp 0x302d\l"]
	"0x00003265" [URL="dbg.main/0x00003265", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2b77, 0x2b80\l0x00003265      movabs rdx, 0x1999999999999999\l0x0000326f      mov rcx, qword [var_8h]\l0x00003274      cmp rcx, rdx\l0x00003277      ja 0x45b9\l"]
	"0x0000327d" [URL="dbg.main/0x0000327d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000327d      imul rdx, rcx, 0xa\l0x00003281      cdqe\l0x00003283      add rax, rdx\l0x00003286      cmp rax, rcx\l0x00003289      jb 0x45b9\l"]
	"0x0000328f" [URL="dbg.main/0x0000328f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000328f      mov qword [var_8h], rax\l0x00003294      mov dword [ptr], r13d\l0x00003299      jmp 0x2b00\l"]
	"0x0000329e" [URL="dbg.main/0x0000329e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 3...4:                                                        ; from 0x0000321c\l; CODE XREF from dbg.main @ 0x321c\l0x0000329e      mov ebp, 1\l0x000032a3      xor r15d, r15d\l0x000032a6      mov r13, qword [var_8h]\l0x000032ab      mov byte [rsp], bpl\l0x000032af      mov r14, r15\l0x000032b2      nop word [rax + rax]\l"]
	"0x000032b8" [URL="dbg.main/0x000032b8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3366\l0x000032b8      mov rdx, qword [size]                                  ; int64_t arg3\l0x000032bd      mov rsi, qword [s1]                                    ; int64_t arg2\l0x000032c2      xor edi, edi                                           ; int64_t arg1\l0x000032c4      call dbg.safe_read\l0x000032c9      mov qword [var_8h], rax\l0x000032ce      cmp rax, 0xffffffffffffffff\l0x000032d2      je 0x43d7\l"]
	"0x000032d8" [URL="dbg.main/0x000032d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000032d8      mov r15, qword [s1]\l0x000032dd      mov rbx, qword [var_8h]\l0x000032e2      mov ebp, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\"\l0x000032e8      add rbx, r15\l0x000032eb      mov r12, r15\l0x000032ee      mov byte [rbx], bpl\l0x000032f1      nop dword [rax]\l"]
	"0x000032f8" [URL="dbg.main/0x000032f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3312\l0x000032f8      mov esi, ebp\l0x000032fa      mov rdi, r15\l0x000032fd      call sym.imp.rawmemchr\l0x00003302      cmp rbx, rax\l0x00003305      je 0x3345\l"]
	"0x00003307" [URL="dbg.main/0x00003307", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3343\l0x00003307      add r14, 1\l0x0000330b      lea r15, [rax + 1]\l0x0000330f      cmp r13, r14\l0x00003312      ja 0x32f8\l"]
	"0x00003314" [URL="dbg.main/0x00003314", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003314      movzx edi, byte [rsp]                                  ; int64_t arg2\l0x00003318      mov rdx, r15\l0x0000331b      mov rsi, r12                                           ; int64_t arg3\l0x0000331e      xor r14d, r14d\l0x00003321      sub rdx, r12\l0x00003324      mov r12, r15\l0x00003327      call dbg.cwrite\l0x0000332c      mov ebp, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\"\l0x00003332      mov rdi, r15\l0x00003335      mov byte [rsp], 1\l0x00003339      mov esi, ebp\l0x0000333b      call sym.imp.rawmemchr\l0x00003340      cmp rbx, rax\l0x00003343      jne 0x3307\l"]
	"0x00003345" [URL="dbg.main/0x00003345", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3305\l0x00003345      cmp rbx, r12\l0x00003348      je 0x3360\l"]
	"0x0000334a" [URL="dbg.main/0x0000334a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000334a      movzx edi, byte [rsp]                                  ; int64_t arg2\l0x0000334e      sub rbx, r12\l0x00003351      mov rsi, r12                                           ; int64_t arg3\l; DATA XREF from dbg.version_etc_arn @ 0x856d\l0x00003354      mov rdx, rbx\l0x00003357      call dbg.cwrite\l0x0000335c      mov byte [rsp], 0\l"]
	"0x00003360" [URL="dbg.main/0x00003360", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3348\l0x00003360      cmp qword [var_8h], 0\l0x00003366      jne 0x32b8\l"]
	"0x0000336c" [URL="dbg.main/0x0000336c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00003747  CODE 0x0000378a  CODE 0x000037bd  \l; XREFS: CODE 0x00003de5  CODE 0x00003dfd  CODE 0x00003e3a  \l; XREFS: CODE 0x00003e83  CODE 0x00004040  CODE 0x000040da  \l; XREFS: CODE 0x00004281  CODE 0x0000429f  \l0x0000336c      xor edi, edi                                           ; int fildes\l0x0000336e      call sym.imp.close                                     ; int close(int fildes)\l0x00003373      test eax, eax\l0x00003375      jne 0x43a4\l"]
	"0x0000337b" [URL="dbg.main/0x0000337b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000337b      mov rcx, qword [obj.outfile]                           ; [0xf3b8:8]=2 ; int64_t arg4\l0x00003382      mov edx, dword [obj.filter_pid]                        ; [0xf4f8:4]=0xa018 str._bin_sh ; int64_t arg3\l0x00003388      xor edi, edi                                           ; int64_t arg1\l0x0000338a      mov esi, dword [obj.output_desc]                       ; [0xf014:4]=0 ; int64_t arg2\l0x00003390      call dbg.closeout\l0x00003395      mov rax, qword [var_138h]\l0x0000339d      sub rax, qword fs:[0x28]\l0x000033a6      jne 0x439f\l"]
	"0x000033ac" [URL="dbg.main/0x000033ac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000033ac      add rsp, 0x148\l0x000033b3      xor eax, eax\l0x000033b5      pop rbx\l0x000033b6      pop rbp\l0x000033b7      pop r12\l0x000033b9      pop r13\l0x000033bb      pop r14\l0x000033bd      pop r15\l0x000033bf      ret\l"]
	"0x000033c0" [URL="dbg.main/0x000033c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3072, 0x3422\l0x000033c0      mov eax, 2\l0x000033c5      cmp r14, rax\l0x000033c8      cmovb r14, rax\l0x000033cc      mov qword [obj.suffix_length], r14                     ; [0xf3a8:8]=256\l0x000033d3      jmp 0x307f\l"]
	"0x000033d8" [URL="dbg.main/0x000033d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3051\l0x000033d8      mov rax, qword [var_8h]\l0x000033dd      lea r13, [rax - 1]\l0x000033e1      cmp r12d, 2\l0x000033e5      ja 0x3068\l"]
	"0x000033eb" [URL="dbg.main/0x000033eb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3477, 0x3490, 0x3498, 0x34a1\l0x000033eb      mov rdi, qword [obj.suffix_alphabet]                   ; [0xf020:8]=0xa1e7 str.0123456789abcdef ; const char *s\l0x000033f2      xor r14d, r14d\l0x000033f5      call sym.imp.strlen                                    ; size_t strlen(const char *s)\l0x000033fa      mov rcx, rax\l0x000033fd      mov rax, r13\l"]
	"0x00003400" [URL="dbg.main/0x00003400", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x340f\l0x00003400      mov rsi, rax\l0x00003403      xor edx, edx\l0x00003405      add r14, 1\l0x00003409      div rcx\l0x0000340c      cmp rcx, rsi\l0x0000340f      jbe 0x3400\l"]
	"0x00003411" [URL="dbg.main/0x00003411", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003411      mov rax, qword [obj.suffix_length]                     ; [0xf3a8:8]=256\l0x00003418      mov byte [obj.suffix_auto], 0                          ; [0xf018:1]=0\l0x0000341f      test rax, rax\l0x00003422      je 0x33c0\l"]
	"0x00003424" [URL="dbg.main/0x00003424", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003424      cmp r14, rax\l0x00003427      jbe 0x3078\l"]
	"0x0000342d" [URL="dbg.main/0x0000342d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000342d      mov edx, 5\l0x00003432      lea rsi, str.the_suffix_length_needs_to_be_at_least__lu ; 0xafc0 ; \"the suffix length needs to be at least %lu\"\l0x00003439      xor edi, edi\l0x0000343b      call sym.imp.dcgettext\l0x00003440      mov rcx, r14\l0x00003443      xor esi, esi                                           ; int errname\l0x00003445      mov edi, 1                                             ; int status\l0x0000344a      mov rdx, rax                                           ; char *format\l0x0000344d      xor eax, eax\l0x0000344f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003454" [URL="dbg.main/0x00003454", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3062\l0x00003454      mov rax, qword [var_8h]\l0x00003459      xor esi, esi                                           ; int64_t arg2\l0x0000345b      lea rcx, [var_78h]                                     ; int64_t arg4\l0x00003460      lea r8, [0x0000b6c1]                                   ; int64_t arg5\l0x00003467      mov edx, 0xa                                           ; uint32_t arg3\l0x0000346c      lea r13, [rax - 1]\l0x00003470      call dbg.xstrtoumax\l0x00003475      test eax, eax\l0x00003477      jne 0x33eb\l"]
	"0x0000347d" [URL="dbg.main/0x0000347d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000347d      mov rax, qword [var_78h]\l0x00003482      mov rcx, qword [var_8h]\l0x00003487      cmp rcx, rax\l0x0000348a      seta dl\l0x0000348d      add rcx, rax\l0x00003490      jb 0x33eb\l"]
	"0x00003496" [URL="dbg.main/0x00003496", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003496      test dl, dl\l0x00003498      je 0x33eb\l"]
	"0x0000349e" [URL="dbg.main/0x0000349e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000349e      add r13, rax\l0x000034a1      jmp 0x33eb\l"]
	"0x000034a6" [URL="dbg.main/0x000034a6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31a3\l0x000034a6      mov edx, 1\l0x000034ab      xor esi, esi\l0x000034ad      xor edi, edi\l0x000034af      xor r12d, r12d\l0x000034b2      call sym.imp.lseek\l0x000034b7      mov rbx, rax\l0x000034ba      test rax, rax\l0x000034bd      js 0x4531\l"]
	"0x000034c3" [URL="dbg.main/0x000034c3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000034c3      mov rbp, qword [size]\l0x000034c8      mov r13, qword [s1]\l0x000034cd      jmp 0x34e8\l"]
	"0x000034cf" [URL="dbg.main/0x000034cf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34fd\l; DATA XREF from dbg.version_etc_arn @ 0x8492\l0x000034cf      cmp rax, 0xffffffffffffffff\l0x000034d3      je 0x3f8b\l"]
	"0x000034d9" [URL="dbg.main/0x000034d9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000034d9      add rax, r12\l0x000034dc      mov r12, rax\l0x000034df      cmp rbp, rax\l0x000034e2      jbe 0x3f09\l"]
	"0x000034e8" [URL="dbg.main/0x000034e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34cd\l0x000034e8      mov rdx, rbp\l0x000034eb      xor edi, edi                                           ; int64_t arg1\l0x000034ed      lea rsi, [r13 + r12]                                   ; int64_t arg2\l0x000034f2      sub rdx, r12                                           ; int64_t arg3\l0x000034f5      call dbg.safe_read\l0x000034fa      test rax, rax\l0x000034fd      jne 0x34cf\l"]
	"0x000034ff" [URL="dbg.main/0x000034ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3f7a\l0x000034ff      test r12, r12\l0x00003502      js 0x3f8b\l"]
	"0x00003508" [URL="dbg.main/0x00003508", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003508      mov rax, qword [size]\l0x0000350d      cmp r12, rax\l0x00003510      mov r15, rax\l0x00003513      mov rax, qword [var_8h]\l0x00003518      cmovbe r15, r12\l0x0000351c      cmp rax, r12\l0x0000351f      cmovae r12, rax\l0x00003523      mov r13, r12\l0x00003526      test rax, rax\l0x00003529      jns 0x31a9\l"]
	"0x0000352f" [URL="dbg.main/0x0000352f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000352f      lea rsi, [var_120h]                                    ; int64_t arg2\l0x00003537      mov rdi, rax                                           ; int64_t arg1\l0x0000353a      call dbg.umaxtostr\l0x0000353f      mov rdi, rax                                           ; int64_t arg1\l0x00003542      call dbg.quote\l0x00003547      mov edx, 5\l0x0000354c      lea rsi, str.invalid_number_of_chunks                  ; 0xa276 ; \"invalid number of chunks\"\l0x00003553      xor edi, edi\l0x00003555      mov rbx, rax\l0x00003558      call sym.imp.dcgettext\l0x0000355d      mov r8, rbx\l0x00003560      mov esi, 0x4b                                          ; 'K' ; int errname\l; DATA XREF from dbg.version_etc_arn @ 0x8434\l0x00003565      lea rdx, str._s:__s                                    ; 0xa317 ; \"%s: %s\" ; char *format\l0x0000356c      mov rcx, rax\l0x0000356f      mov edi, 1                                             ; int status\l0x00003574      xor eax, eax\l0x00003576      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000357b" [URL="dbg.main/0x0000357b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2b6b, 0x2c34, 0x2d61, 0x2e09, 0x2f0d\l0x0000357b      mov edx, 5\l0x00003580      lea rsi, str.cannot_split_in_more_than_one_way         ; 0xaeb0 ; \"cannot split in more than one way\"\l"]
	"0x00003587" [URL="dbg.main/0x00003587", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x30ed, 0x4609\l0x00003587      xor edi, edi\l0x00003589      call sym.imp.dcgettext\l0x0000358e      xor esi, esi                                           ; int errname\l0x00003590      xor edi, edi                                           ; int status\l0x00003592      mov rdx, rax                                           ; char *format\l0x00003595      xor eax, eax\l0x00003597      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000359c" [URL="dbg.main/0x0000359c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 58...66:                                                      ; from 0x00002b5b\l;-- case 68:                                                           ; from 0x00002b5b\l;-- case 69...96:                                                      ; from 0x00002b5b\l;-- case 99:                                                           ; from 0x00002b5b\l;-- case 102...107:                                                    ; from 0x00002b5b\l;-- case 109:                                                          ; from 0x00002b5b\l;-- case 111...115:                                                    ; from 0x00002b5b\l;-- case 118:                                                          ; from 0x00002b5b\l;-- case 119:                                                          ; from 0x00002b5b\l;-- default:                                                           ; from 0x2b5b\l; CODE XREFS from dbg.main @ 0x2b37, 0x2b4c, 0x2b5b, 0x2fba\l0x0000359c      mov edi, 1                                             ; int64_t arg1\l0x000035a1      call dbg.usage\l"]
	"0x000035a6" [URL="dbg.main/0x000035a6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 6:                                                            ; from 0x0000321c\l; CODE XREF from dbg.main @ 0x321c\l0x000035a6      mov rax, qword [var_8h]\l0x000035ab      mov rcx, qword [var_10h]\l0x000035b0      cmp rax, rcx\l0x000035b3      jb 0x4664\l"]
	"0x000035b9" [URL="dbg.main/0x000035b9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035b9      cmp rax, r13\l0x000035bc      ja 0x4664\l"]
	"0x000035c2" [URL="dbg.main/0x000035c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035c2      mov rax, r13\l0x000035c5      xor edx, edx\l0x000035c7      div qword [var_8h]\l0x000035cc      mov rbp, rax\l0x000035cf      mov rax, qword [var_10h]\l0x000035d4      cmp rax, 1\l0x000035d8      jbe 0x40df\l"]
	"0x000035de" [URL="dbg.main/0x000035de", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035de      lea r14, [rax - 1]\l0x000035e2      mov rbx, rbp\l0x000035e5      imul rbx, r14\l0x000035e9      sub rbx, 1\l0x000035ed      mov r12, rbx\l0x000035f0      cmp r15, rbx\l0x000035f3      jbe 0x419b\l"]
	"0x000035f9" [URL="dbg.main/0x000035f9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035f9      mov rdi, qword [s1]                                    ; void *s1\l0x000035fe      sub r15, rbx\l0x00003601      mov rdx, r15                                           ; size_t n\l0x00003604      lea rsi, [rdi + rbx]                                   ; const void *s2\l0x00003608      call sym.imp.memmove                                   ; void *memmove(void *s1, const void *s2, size_t n)\l0x0000360d      mov qword [rsp], rbx\l"]
	"0x00003611" [URL="dbg.main/0x00003611", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x40f1, 0x41b8\l0x00003611      mov byte [var_6fh], 0\l0x00003616      mov r9, rbp\l0x00003619      mov rbx, qword [var_10h]\l0x0000361e      mov ecx, 1\l0x00003623      mov qword [var_60h], r13\l0x00003628      mov rbp, qword [var_8h]\l"]
	"0x0000362d" [URL="dbg.main/0x0000362d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x425b\l0x0000362d      mov rsi, qword [rsp]\l0x00003631      cmp qword [var_60h], rsi\l0x00003636      jle 0x4270\l"]
	"0x0000363c" [URL="dbg.main/0x0000363c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000363c      cmp r15, 0xffffffffffffffff\l0x00003640      je 0x41f1\l"]
	"0x00003646" [URL="dbg.main/0x00003646", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x421c\l0x00003646      test r15, r15\l0x00003649      je 0x4270\l"]
	"0x0000364f" [URL="dbg.main/0x0000364f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000364f      mov rax, qword [var_60h]\l0x00003654      sub rax, qword [rsp]\l0x00003658      mov byte [var_6fh], 0\l0x0000365d      cmp rax, r15\l0x00003660      mov r13, qword [s1]\l0x00003665      cmovbe r15, rax\l0x00003669      mov rax, r13\l0x0000366c      add rax, r15\l0x0000366f      mov qword [n], r15\l0x00003674      mov r15, r9\l0x00003677      mov qword [var_50h], rax\l"]
	"0x0000367c" [URL="dbg.main/0x0000367c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3d8e\l0x0000367c      or rax, 0xffffffffffffffff\l0x00003680      cmp qword [var_50h], r13\l0x00003685      je 0x4255\l"]
	"0x0000368b" [URL="dbg.main/0x0000368b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000368b      mov edx, 0\l0x00003690      mov rax, r12\l0x00003693      sub rax, qword [rsp]\l0x00003697      mov byte [ptr], cl\l0x0000369b      cmovs rax, rdx\l0x0000369f      mov rcx, qword [n]\l0x000036a4      mov esi, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\" ; int c\l0x000036aa      cmp rax, rcx\l0x000036ad      cmova rax, rcx\l0x000036b1      sub rcx, rax\l0x000036b4      lea rdi, [r13 + rax]                                   ; void *s\l0x000036b9      mov rdx, rcx                                           ; size_t n\l0x000036bc      call sym.imp.memchr                                    ; void *memchr(void *s, int c, size_t n)\l0x000036c1      movzx ecx, byte [ptr]\l0x000036c6      test rax, rax\l0x000036c9      je 0x3e02\l"]
	"0x000036cf" [URL="dbg.main/0x000036cf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000036cf      add rax, 1\l0x000036d3      mov r10d, 1\l0x000036d9      mov qword [ptr], rax\l"]
	"0x000036de" [URL="dbg.main/0x000036de", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3e0f\l0x000036de      mov rax, qword [ptr]\l0x000036e3      sub rax, r13\l0x000036e6      mov qword [var_20h], rax\l0x000036eb      cmp r14, rbx\l0x000036ee      je 0x3eb0\l"]
	"0x000036f4" [URL="dbg.main/0x000036f4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000036f4      test rbx, rbx\l0x000036f7      je 0x3e14\l"]
	"0x000036fd" [URL="dbg.main/0x000036fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3e2f, 0x3ed0\l0x000036fd      mov r13, qword [rsp]\l0x00003701      add r13, qword [var_20h]\l0x00003706      cmp r12, r13\l0x00003709      mov qword [rsp], r13\l0x0000370d      setl cl\l0x00003710      or cl, r10b\l0x00003713      je 0x3d7f\l"]
	"0x00003719" [URL="dbg.main/0x00003719", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003719      mov rcx, qword [ptr]\l0x0000371e      mov edx, r10d\l0x00003721      cmp qword [var_50h], rcx\l0x00003726      sete al\l0x00003729      xor edx, 1\l0x0000372c      and al, dl\l0x0000372e      jne 0x4260\l"]
	"0x00003734" [URL="dbg.main/0x00003734", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003734      add r14, 1\l0x00003738      test rbx, rbx\l0x0000373b      setne r11b\l0x0000373f      cmp r14, rbx\l0x00003742      jbe 0x374d\l"]
	"0x00003744" [URL="dbg.main/0x00003744", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003744      test r11b, r11b\l0x00003747      jne 0x336c\l"]
	"0x0000374d" [URL="dbg.main/0x0000374d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3742\l0x0000374d      mov rax, qword [var_60h]\l0x00003752      lea rcx, [rax - 1]\l0x00003756      nop word cs:[rax + rax]\l"]
	"0x00003760" [URL="dbg.main/0x00003760", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3783, 0x3788, 0x3dc5\l0x00003760      add r12, r15\l0x00003763      cmp rbp, r14\l0x00003766      cmove r12, rcx\l0x0000376a      cmp r13, r12\l0x0000376d      jle 0x3d7c\l"]
	"0x00003773" [URL="dbg.main/0x00003773", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003773      test rbx, rbx\l0x00003776      je 0x3d93\l"]
	"0x0000377c" [URL="dbg.main/0x0000377c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000377c      add r14, 1\l0x00003780      cmp r14, rbx\l0x00003783      jbe 0x3760\l"]
	"0x00003785" [URL="dbg.main/0x00003785", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003785      test r11b, r11b\l0x00003788      je 0x3760\l"]
	"0x0000378a" [URL="dbg.main/0x0000378a", fillcolor="white",color="#767676", fontname="Courier",label="0x0000378a      jmp 0x336c\l"]
	"0x0000378f" [URL="dbg.main/0x0000378f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 5:                                                            ; from 0x0000321c\l; CODE XREF from dbg.main @ 0x321c\l0x0000378f      cmp qword [var_10h], 0\l0x00003795      jne 0x3fd0\l"]
	"0x0000379b" [URL="dbg.main/0x0000379b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000379b      mov r8, qword [var_8h]                                 ; int64_t arg5\l0x000037a0      mov rax, r13\l0x000037a3      xor edx, edx\l0x000037a5      mov rsi, qword [s1]                                    ; int64_t arg2\l0x000037aa      mov rcx, r15                                           ; int64_t arg4\l0x000037ad      div r8\l0x000037b0      mov rdx, qword [size]                                  ; int64_t arg3\l0x000037b5      mov rdi, rax                                           ; int64_t arg1\l0x000037b8      call dbg.bytes_split\l0x000037bd      jmp 0x336c\l"]
	"0x000037c2" [URL="dbg.main/0x000037c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 2:                                                            ; from 0x0000321c\l; CODE XREF from dbg.main @ 0x321c\l0x000037c2      mov byte [var_10h], 0\l0x000037c7      xor r12d, r12d\l0x000037ca      xor r15d, r15d\l0x000037cd      xor ebp, ebp\l0x000037cf      mov qword [ptr], 0\l0x000037d8      nop dword [rax + rax]\l"]
	"0x000037e0" [URL="dbg.main/0x000037e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x387e, 0x3c7e\l0x000037e0      mov rdx, qword [size]                                  ; int64_t arg3\l0x000037e5      mov rsi, qword [s1]                                    ; int64_t arg2\l0x000037ea      xor edi, edi                                           ; int64_t arg1\l0x000037ec      call dbg.safe_read\l0x000037f1      mov rbx, rax\l0x000037f4      cmp rax, 0xffffffffffffffff\l0x000037f8      je 0x443d\l"]
	"0x000037fe" [URL="dbg.main/0x000037fe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000037fe      test rax, rax\l0x00003801      je 0x3dea\l"]
	"0x00003807" [URL="dbg.main/0x00003807", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003807      mov r14, qword [s1]\l0x0000380c      jmp 0x3884\l"]
	"0x00003810" [URL="dbg.main/0x00003810", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x389f\l0x00003810      lea rax, [r14 + r13 - 1]\l0x00003815      mov rdx, r13\l0x00003818      mov rdi, r14\l0x0000381b      mov qword [rsp], rax\l0x0000381f      call sym.imp.memrchr\l0x00003824      mov r8, rax\l0x00003827      test r15, r15\l0x0000382a      je 0x38c7\l"]
	"0x00003830" [URL="dbg.main/0x00003830", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x38c1\l0x00003830      test rbp, rbp\l0x00003833      sete dil\l0x00003837      test r8, r8\l0x0000383a      jne 0x3be0\l"]
	"0x00003840" [URL="dbg.main/0x00003840", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003840      test dil, dil\l0x00003843      jne 0x3be0\l"]
	"0x00003849" [URL="dbg.main/0x00003849", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3c43\l0x00003849      cmp byte [var_10h], 0\l0x0000384e      jne 0x436c\l"]
	"0x00003854" [URL="dbg.main/0x00003854", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003854      xor edi, edi\l0x00003856      test rbp, rbp\l0x00003859      sete dil\l0x0000385d      cmp qword [rsp], 0\l0x00003862      je 0x3c70\l"]
	"0x00003868" [URL="dbg.main/0x00003868", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003868      mov rsi, r14                                           ; int64_t arg3\l0x0000386b      mov rdx, r13\l0x0000386e      sub rbx, r13\l0x00003871      add r14, r13\l0x00003874      call dbg.cwrite\l0x00003879      xor ebp, ebp\l"]
	"0x0000387b" [URL="dbg.main/0x0000387b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3971, 0x439a\l0x0000387b      test rbx, rbx\l0x0000387e      je 0x37e0\l"]
	"0x00003884" [URL="dbg.main/0x00003884", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x380c\l0x00003884      mov r13, qword [var_8h]\l0x00003889      lea rax, [rbp + r15]\l0x0000388e      mov esi, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\"\l0x00003894      mov qword [var_20h], rax\l0x00003899      sub r13, rax\l0x0000389c      cmp r13, rbx\l0x0000389f      jbe 0x3810\l"]
	"0x000038a5" [URL="dbg.main/0x000038a5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000038a5      mov rdx, rbx\l0x000038a8      mov rdi, r14\l0x000038ab      xor r13d, r13d\l0x000038ae      call sym.imp.memrchr\l0x000038b3      mov qword [rsp], 0\l0x000038bb      mov r8, rax\l0x000038be      test r15, r15\l0x000038c1      jne 0x3830\l"]
	"0x000038c7" [URL="dbg.main/0x000038c7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x382a, 0x3c0b\l0x000038c7      test r8, r8\l0x000038ca      je 0x3c40\l"]
	"0x000038d0" [URL="dbg.main/0x000038d0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3c30\l0x000038d0      sub r8, r14\l0x000038d3      xor edi, edi                                           ; int64_t arg2\l0x000038d5      test rbp, rbp\l0x000038d8      mov rsi, r14                                           ; int64_t arg3\l0x000038db      lea r15, [r8 + 1]\l0x000038df      sete dil\l0x000038e3      mov rdx, r15\l0x000038e6      add rbp, r15\l0x000038e9      sub rbx, r15\l0x000038ec      add r14, r15\l0x000038ef      call dbg.cwrite\l0x000038f4      cmp qword [rsp], 0\l0x000038f9      je 0x3c50\l"]
	"0x000038ff" [URL="dbg.main/0x000038ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000038ff      sub r13, r15\l0x00003902      setne byte [var_10h]\l0x00003907      je 0x454a\l"]
	"0x0000390d" [URL="dbg.main/0x0000390d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000390d      xor r15d, r15d\l"]
	"0x00003910" [URL="dbg.main/0x00003910", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3c64, 0x4376\l0x00003910      mov rax, r12\l0x00003913      sub rax, r15\l0x00003916      cmp rax, r13\l0x00003919      jae 0x3938\l"]
	"0x0000391b" [URL="dbg.main/0x0000391b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000391b      add r12, qword [size]\l0x00003920      jb 0x426b\l"]
	"0x00003926" [URL="dbg.main/0x00003926", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003926      mov rdi, qword [ptr]                                   ; int64_t arg1\l0x0000392b      mov rsi, r12                                           ; int64_t arg2\l0x0000392e      call sym.xrealloc\l0x00003933      mov qword [ptr], rax\l"]
	"0x00003938" [URL="dbg.main/0x00003938", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3919\l0x00003938      mov rax, qword [ptr]\l0x0000393d      mov rsi, r14                                           ; const void *s2\l0x00003940      mov rdx, r13                                           ; size_t n\l0x00003943      sub rbx, r13\l0x00003946      add r14, r13\l0x00003949      lea rdi, [rax + r15]                                   ; void *s1\l0x0000394d      add r15, r13\l0x00003950      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l"]
	"0x00003955" [URL="dbg.main/0x00003955", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4381, 0x4390, 0x4552\l0x00003955      movzx ecx, byte [var_10h]\l0x0000395a      xor eax, eax\l0x0000395c      cmp qword [rsp], 0\l0x00003961      cmovne ecx, eax\l0x00003964      mov eax, 0\l0x00003969      cmovne rbp, rax\l0x0000396d      mov byte [var_10h], cl\l0x00003971      jmp 0x387b\l"]
	"0x00003976" [URL="dbg.main/0x00003976", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 7:                                                            ; from 0x0000321c\l; CODE XREF from dbg.main @ 0x321c\l0x00003976      cmp qword [var_10h], 0\l0x0000397c      je 0x40f6\l"]
	"0x00003982" [URL="dbg.main/0x00003982", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x414a\l0x00003982      mov qword [rsp], 0\l0x0000398a      mov r12d, 1\l0x00003990      mov byte [var_30h], 0\l0x00003995      mov byte [ptr], 0\l0x0000399a      mov byte [var_50h], 0\l"]
	"0x0000399f" [URL="dbg.main/0x0000399f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x39d1, 0x39fd\l0x0000399f      mov rdx, qword [size]                                  ; int64_t arg3\l0x000039a4      mov rsi, qword [s1]                                    ; int64_t arg2\l0x000039a9      xor edi, edi                                           ; int64_t arg1\l0x000039ab      call dbg.safe_read\l0x000039b0      cmp rax, 0xffffffffffffffff\l0x000039b4      je 0x44fe\l"]
	"0x000039ba" [URL="dbg.main/0x000039ba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000039ba      test rax, rax\l0x000039bd      je 0x3e34\l"]
	"0x000039c3" [URL="dbg.main/0x000039c3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000039c3      mov r15, qword [s1]\l0x000039c8      lea rbp, [r15 + rax]\l0x000039cc      cmp r15, rbp\l0x000039cf      jne 0x3a02\l"]
	"0x000039d1" [URL="dbg.main/0x000039d1", fillcolor="white",color="#767676", fontname="Courier",label="0x000039d1      jmp 0x399f\l"]
	"0x000039d8" [URL="dbg.main/0x000039d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3a3a\l0x000039d8      cmp r12, rax\l0x000039db      je 0x3b30\l"]
	"0x000039e1" [URL="dbg.main/0x000039e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3b58, 0x3d43\l0x000039e1      test r14b, r14b\l0x000039e4      je 0x39fa\l"]
	"0x000039e6" [URL="dbg.main/0x000039e6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000039e6      lea rax, [r12 + 1]\l0x000039eb      cmp qword [var_8h], r12\l0x000039f0      mov r12d, 1\l0x000039f6      cmovne r12, rax\l"]
	"0x000039fa" [URL="dbg.main/0x000039fa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x39e4, 0x3ad8, 0x3aec, 0x3b13\l0x000039fa      cmp rbp, rbx\l0x000039fd      je 0x399f\l"]
	"0x000039ff" [URL="dbg.main/0x000039ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000039ff      mov r15, rbx\l"]
	"0x00003a02" [URL="dbg.main/0x00003a02", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x39cf\l0x00003a02      mov r13, rbp\l0x00003a05      mov esi, dword [obj.eolchar]                           ; [0xf010:4]=10 ; \"\\n\" ; int c\l0x00003a0b      mov rdi, r15                                           ; void *s\l0x00003a0e      sub r13, r15\l0x00003a11      mov rdx, r13                                           ; size_t n\l0x00003a14      call sym.imp.memchr                                    ; void *memchr(void *s, int c, size_t n)\l0x00003a19      test rax, rax\l0x00003a1c      je 0x3b20\l"]
	"0x00003a22" [URL="dbg.main/0x00003a22", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003a22      lea rbx, [rax + 1]\l0x00003a26      mov r14d, 1\l0x00003a2c      mov r13, rbx\l0x00003a2f      sub r13, r15\l"]
	"0x00003a32" [URL="dbg.main/0x00003a32", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3b26\l0x00003a32      mov rax, qword [var_10h]\l0x00003a37      test rax, rax\l0x00003a3a      jne 0x39d8\l"]
	"0x00003a3c" [URL="dbg.main/0x00003a3c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003a3c      mov rdx, qword [var_8h]                                ; int64_t arg3\l0x00003a41      mov rsi, qword [rsp]                                   ; int64_t arg2\l0x00003a45      mov rdi, qword [var_20h]                               ; int64_t arg1\l0x00003a4a      call dbg.ofile_open\l0x00003a4f      or byte [var_30h], al\l0x00003a53      call sym.imp.__errno_location\l0x00003a58      mov r8, qword [rsp]\l0x00003a5c      mov qword [errname], rax\l0x00003a61      shl r8, 5\l0x00003a65      add r8, qword [var_20h]\l0x00003a6a      cmp byte [obj.unbuffered], 0                           ; [0xf2e0:1]=1\l0x00003a71      jne 0x3cc0\l"]
	"0x00003a77" [URL="dbg.main/0x00003a77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003a77      mov rcx, qword [r8 + 0x10]\l0x00003a7b      mov edx, 1\l0x00003a80      mov rsi, r13\l0x00003a83      mov rdi, r15\l0x00003a86      mov qword [var_40h], r8\l0x00003a8b      call sym.imp.fwrite_unlocked\l0x00003a90      mov r8, qword [var_40h]\l0x00003a95      cmp rax, 1\l0x00003a99      mov rax, qword [errname]\l0x00003a9e      jne 0x3ba0\l"]
	"0x00003aa4" [URL="dbg.main/0x00003aa4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3ce1\l0x00003aa4      cmp dword [rax], 0x20\l0x00003aa7      mov ecx, 1\l0x00003aac      sete al\l0x00003aaf      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x00003ab7      setne dl\l0x00003aba      and eax, edx\l0x00003abc      test al, al\l0x00003abe      movzx eax, byte [ptr]\l0x00003ac3      cmove eax, ecx\l0x00003ac6      mov byte [ptr], al\l"]
	"0x00003aca" [URL="dbg.main/0x00003aca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3bad, 0x3cf4\l0x00003aca      cmp byte [var_30h], 0\l0x00003acf      jne 0x3c88\l"]
	"0x00003ad5" [URL="dbg.main/0x00003ad5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3cb3\l0x00003ad5      test r14b, r14b\l0x00003ad8      je 0x39fa\l"]
	"0x00003ade" [URL="dbg.main/0x00003ade", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003ade      add qword [rsp], 1\l0x00003ae3      mov rax, qword [rsp]\l0x00003ae7      cmp qword [var_8h], rax\l0x00003aec      jne 0x39fa\l"]
	"0x00003af2" [URL="dbg.main/0x00003af2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003af2      cmp byte [ptr], 0\l0x00003af7      je 0x3ea9\l"]
	"0x00003afd" [URL="dbg.main/0x00003afd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003afd      movzx eax, byte [ptr]\l0x00003b02      mov qword [rsp], 0\l0x00003b0a      mov byte [ptr], 0\l0x00003b0f      mov byte [var_50h], al\l0x00003b13      jmp 0x39fa\l"]
	"0x00003b20" [URL="dbg.main/0x00003b20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3a1c\l0x00003b20      mov rbx, rbp\l0x00003b23      xor r14d, r14d\l0x00003b26      jmp 0x3a32\l"]
	"0x00003b30" [URL="dbg.main/0x00003b30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x39db\l0x00003b30      cmp byte [obj.unbuffered], 0                           ; [0xf2e0:1]=1\l0x00003b37      jne 0x3d30\l"]
	"0x00003b3d" [URL="dbg.main/0x00003b3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003b3d      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xf268:8]=0\l0x00003b44      mov edx, 1\l0x00003b49      mov rsi, r13\l0x00003b4c      mov rdi, r15\l0x00003b4f      call sym.imp.fwrite_unlocked\l0x00003b54      cmp rax, 1\l0x00003b58      je 0x39e1\l"]
	"0x00003b5e" [URL="dbg.main/0x00003b5e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003b5e      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xf268:8]=0\l0x00003b65      call sym.imp.clearerr_unlocked\l0x00003b6a      mov edx, 5\l0x00003b6f      lea rsi, str.write_error                               ; 0xa368 ; \"write error\"\l0x00003b76      xor edi, edi\l0x00003b78      call sym.imp.dcgettext\l0x00003b7d      mov r12, rax\l0x00003b80      call sym.imp.__errno_location\l0x00003b85      mov rcx, r12\l0x00003b88      mov edi, 1                                             ; int status\l0x00003b8d      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00003b94      mov esi, dword [rax]                                   ; int errname\l0x00003b96      xor eax, eax\l0x00003b98      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003b9d      nop dword [rax]\l"]
	"0x00003ba0" [URL="dbg.main/0x00003ba0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3a9e\l0x00003ba0      cmp dword [rax], 0x20\l0x00003ba3      jne 0x3bb3\l"]
	"0x00003ba5" [URL="dbg.main/0x00003ba5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003ba5      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x00003bad      jne 0x3aca\l"]
	"0x00003bb3" [URL="dbg.main/0x00003bb3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3ba3\l0x00003bb3      mov rdx, qword [r8]                                    ; int64_t arg3\l0x00003bb6      mov esi, 3                                             ; int64_t arg2\l0x00003bbb      xor edi, edi                                           ; int64_t arg1\l0x00003bbd      call sym.quotearg_n_style_colon\l0x00003bc2      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00003bc9      mov edi, 1                                             ; int status\l0x00003bce      mov rcx, rax\l0x00003bd1      mov rax, qword [errname]\l0x00003bd6      mov esi, dword [rax]                                   ; int errname\l0x00003bd8      xor eax, eax\l0x00003bda      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003bdf      nop\l"]
	"0x00003be0" [URL="dbg.main/0x00003be0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x383a, 0x3843\l0x00003be0      mov rsi, qword [ptr]                                   ; int64_t arg3\l0x00003be5      movzx edi, dil                                         ; int64_t arg2\l0x00003be9      mov rdx, r15\l0x00003bec      mov qword [var_30h], r8\l0x00003bf1      call dbg.cwrite\l0x00003bf6      mov rax, qword [size]\l0x00003bfb      mov rbp, qword [var_20h]\l0x00003c00      mov r8, qword [var_30h]\l0x00003c05      cmp rax, r15\l0x00003c08      mov r12, rax\l0x00003c0b      jae 0x38c7\l"]
	"0x00003c11" [URL="dbg.main/0x00003c11", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003c11      mov rdi, qword [ptr]                                   ; int64_t arg1\l0x00003c16      mov rsi, rax                                           ; int64_t arg2\l0x00003c19      mov qword [var_20h], r8\l0x00003c1e      call sym.xrealloc\l0x00003c23      mov r8, qword [var_20h]\l0x00003c28      mov qword [ptr], rax\l0x00003c2d      test r8, r8\l0x00003c30      jne 0x38d0\l"]
	"0x00003c36" [URL="dbg.main/0x00003c36", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003c36      nop word cs:[rax + rax]\l"]
	"0x00003c40" [URL="dbg.main/0x00003c40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x38ca\l0x00003c40      xor r15d, r15d\l0x00003c43      jmp 0x3849\l"]
	"0x00003c50" [URL="dbg.main/0x00003c50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x38f9\l0x00003c50      xor r15d, r15d\l0x00003c53      test rbx, rbx\l0x00003c56      setne byte [var_10h]\l0x00003c5b      je 0x4395\l"]
	"0x00003c61" [URL="dbg.main/0x00003c61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x438a\l0x00003c61      mov r13, rbx\l0x00003c64      jmp 0x3910\l"]
	"0x00003c70" [URL="dbg.main/0x00003c70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3862\l0x00003c70      mov rdx, rbx\l0x00003c73      mov rsi, r14                                           ; int64_t arg3\l0x00003c76      add rbp, rbx\l0x00003c79      call dbg.cwrite\l0x00003c7e      jmp 0x37e0\l"]
	"0x00003c88" [URL="dbg.main/0x00003c88", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3acf\l0x00003c88      mov rdi, qword [r8 + 0x10]                             ; int64_t arg1\l0x00003c8c      mov qword [var_40h], r8\l0x00003c91      call dbg.rpl_fclose\l0x00003c96      mov r8, qword [var_40h]\l0x00003c9b      test eax, eax\l0x00003c9d      jne 0x44d2\l"]
	"0x00003ca3" [URL="dbg.main/0x00003ca3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003ca3      mov qword [r8 + 0x10], 0\l0x00003cab      mov dword [r8 + 8], 0xfffffffe                         ; [0xfffffffe:4]=255 ; 4294967294\l0x00003cb3      jmp 0x3ad5\l"]
	"0x00003cc0" [URL="dbg.main/0x00003cc0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3a71\l0x00003cc0      mov edi, dword [r8 + 8]                                ; int64_t arg1\l0x00003cc4      mov rdx, r13                                           ; int64_t arg3\l0x00003cc7      mov rsi, r15                                           ; int64_t arg2\l0x00003cca      mov qword [var_40h], r8\l0x00003ccf      call dbg.full_write\l0x00003cd4      mov r8, qword [var_40h]\l0x00003cd9      cmp r13, rax\l0x00003cdc      mov rax, qword [errname]\l0x00003ce1      je 0x3aa4\l"]
	"0x00003ce7" [URL="dbg.main/0x00003ce7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003ce7      cmp dword [rax], 0x20\l0x00003cea      jne 0x3cfa\l"]
	"0x00003cec" [URL="dbg.main/0x00003cec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003cec      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x00003cf4      jne 0x3aca\l"]
	"0x00003cfa" [URL="dbg.main/0x00003cfa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3cea\l0x00003cfa      mov rdx, qword [r8]                                    ; int64_t arg3\l0x00003cfd      mov esi, 3                                             ; int64_t arg2\l0x00003d02      xor edi, edi                                           ; int64_t arg1\l0x00003d04      call sym.quotearg_n_style_colon\l0x00003d09      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00003d10      mov edi, 1                                             ; int status\l0x00003d15      mov rcx, rax\l0x00003d18      mov rax, qword [errname]\l0x00003d1d      mov esi, dword [rax]                                   ; int errname\l0x00003d1f      xor eax, eax\l0x00003d21      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003d26      nop word cs:[rax + rax]\l"]
	"0x00003d30" [URL="dbg.main/0x00003d30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3b37\l0x00003d30      mov rdx, r13                                           ; int64_t arg3\l0x00003d33      mov rsi, r15                                           ; int64_t arg2\l0x00003d36      mov edi, 1                                             ; int64_t arg1\l0x00003d3b      call dbg.full_write\l0x00003d40      cmp r13, rax\l0x00003d43      je 0x39e1\l"]
	"0x00003d49" [URL="dbg.main/0x00003d49", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003d49      mov edx, 5\l0x00003d4e      lea rsi, str.write_error                               ; 0xa368 ; \"write error\"\l0x00003d55      xor edi, edi\l0x00003d57      call sym.imp.dcgettext\l0x00003d5c      mov r12, rax\l0x00003d5f      call sym.imp.__errno_location\l0x00003d64      mov rcx, r12\l0x00003d67      mov edi, 1                                             ; int status\l0x00003d6c      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00003d73      mov esi, dword [rax]                                   ; int errname\l0x00003d75      xor eax, eax\l0x00003d77      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003d7c" [URL="dbg.main/0x00003d7c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x376d\l0x00003d7c      mov ecx, r10d\l"]
	"0x00003d7f" [URL="dbg.main/0x00003d7f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3713, 0x4266\l0x00003d7f      mov rsi, qword [var_20h]\l0x00003d84      mov r13, qword [ptr]\l0x00003d89      sub qword [n], rsi\l0x00003d8e      jmp 0x367c\l"]
	"0x00003d93" [URL="dbg.main/0x00003d93", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3776\l0x00003d93      xor edx, edx\l0x00003d95      xor esi, esi                                           ; int64_t arg3\l0x00003d97      mov edi, 1                                             ; int64_t arg2\l0x00003d9c      mov qword [var_40h], rcx\l0x00003da1      mov byte [errname], r11b\l0x00003da6      add r14, 1\l0x00003daa      mov byte [var_30h], r10b\l0x00003daf      call dbg.cwrite\l0x00003db4      movzx r10d, byte [var_30h]\l0x00003dba      movzx r11d, byte [errname]\l0x00003dc0      mov rcx, qword [var_40h]\l0x00003dc5      jmp 0x3760\l"]
	"0x00003dca" [URL="dbg.main/0x00003dca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- default:                                                           ; from 0x321c\l; CODE XREFS from dbg.main @ 0x3208, 0x321c\l0x00003dca      mov rdx, qword [size]                                  ; int64_t arg3\l0x00003dcf      mov rsi, qword [s1]                                    ; int64_t arg2\l0x00003dd4      xor r8d, r8d                                           ; int64_t arg5\l0x00003dd7      or rcx, 0xffffffffffffffff                             ; int64_t arg4\l0x00003ddb      mov rdi, qword [var_8h]                                ; int64_t arg1\l0x00003de0      call dbg.bytes_split\l0x00003de5      jmp 0x336c\l"]
	"0x00003dea" [URL="dbg.main/0x00003dea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3801\l0x00003dea      test r15, r15\l0x00003ded      jne 0x4180\l"]
	"0x00003df3" [URL="dbg.main/0x00003df3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4196\l0x00003df3      mov rdi, qword [ptr]                                   ; void *ptr\l0x00003df8      call sym.imp.free                                      ; void free(void *ptr)\l0x00003dfd      jmp 0x336c\l"]
	"0x00003e02" [URL="dbg.main/0x00003e02", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36c9\l0x00003e02      mov rax, qword [var_50h]\l0x00003e07      xor r10d, r10d\l0x00003e0a      mov qword [ptr], rax\l0x00003e0f      jmp 0x36de\l"]
	"0x00003e14" [URL="dbg.main/0x00003e14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36f7\l0x00003e14      mov rdx, qword [var_20h]\l0x00003e19      movzx edi, cl                                          ; int64_t arg2\l0x00003e1c      mov rsi, r13                                           ; int64_t arg3\l0x00003e1f      mov byte [var_30h], r10b\l0x00003e24      call dbg.cwrite\l0x00003e29      movzx r10d, byte [var_30h]\l0x00003e2f      jmp 0x36fd\l"]
	"0x00003e34" [URL="dbg.main/0x00003e34", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x39bd\l0x00003e34      cmp qword [var_10h], 0\l0x00003e3a      jne 0x336c\l"]
	"0x00003e40" [URL="dbg.main/0x00003e40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003e40      cmp byte [var_50h], 0\l0x00003e45      jne 0x3ea9\l"]
	"0x00003e47" [URL="dbg.main/0x00003e47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003e47      movsxd rbx, dword [rsp]\l"]
	"0x00003e4b" [URL="dbg.main/0x00003e4b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3eae\l0x00003e4b      mov rbp, qword [var_20h]\l0x00003e50      mov r13, qword [var_8h]\l0x00003e55      xor r12d, r12d\l0x00003e58      jmp 0x3e89\l"]
	"0x00003e5a" [URL="dbg.main/0x00003e5a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3e8c, 0x3e95, 0x3ea7\l0x00003e5a      mov esi, dword [var_8h]\l0x00003e5d      test esi, esi\l0x00003e5f      js 0x3e71\l"]
	"0x00003e61" [URL="dbg.main/0x00003e61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003e61      mov edx, dword [ptr]                                   ; int64_t arg3\l0x00003e64      mov rdi, qword [var_10h]                               ; int64_t arg1\l0x00003e68      mov rcx, qword [rbp]                                   ; int64_t arg4\l0x00003e6c      call dbg.closeout\l"]
	"0x00003e71" [URL="dbg.main/0x00003e71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3e5f\l0x00003e71      add r12, 1\l0x00003e75      mov dword [var_8h], 0xfffffffe                         ; 4294967294\l0x00003e7c      add rbp, 0x20                                          ; \"@\"\l0x00003e80      cmp r13, r12\l0x00003e83      je 0x336c\l"]
	"0x00003e89" [URL="dbg.main/0x00003e89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3e58\l0x00003e89      cmp rbx, r12\l0x00003e8c      ja 0x3e5a\l"]
	"0x00003e8e" [URL="dbg.main/0x00003e8e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003e8e      cmp byte [obj.elide_empty_files], 0                    ; [0xf2e1:1]=1\l0x00003e95      jne 0x3e5a\l"]
	"0x00003e97" [URL="dbg.main/0x00003e97", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003e97      mov rdi, qword [var_20h]                               ; int64_t arg1\l0x00003e9c      mov rdx, r13                                           ; int64_t arg3\l0x00003e9f      mov rsi, r12                                           ; int64_t arg2\l0x00003ea2      call dbg.ofile_open\l0x00003ea7      jmp 0x3e5a\l"]
	"0x00003ea9" [URL="dbg.main/0x00003ea9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3af7, 0x3e45\l0x00003ea9      movsxd rbx, dword [var_8h]\l0x00003eae      jmp 0x3e4b\l"]
	"0x00003eb0" [URL="dbg.main/0x00003eb0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36ee\l0x00003eb0      mov rdx, rax                                           ; int64_t arg3\l0x00003eb3      mov rsi, r13                                           ; int64_t arg2\l0x00003eb6      mov edi, 1                                             ; int64_t arg1\l0x00003ebb      mov byte [var_30h], r10b\l0x00003ec0      call dbg.full_write\l0x00003ec5      cmp qword [var_20h], rax\l0x00003eca      movzx r10d, byte [var_30h]\l0x00003ed0      je 0x36fd\l"]
	"0x00003ed6" [URL="dbg.main/0x00003ed6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003ed6      mov edx, 5\l0x00003edb      lea rsi, str.write_error                               ; 0xa368 ; \"write error\"\l0x00003ee2      xor edi, edi\l0x00003ee4      call sym.imp.dcgettext\l0x00003ee9      mov r12, rax\l0x00003eec      call sym.imp.__errno_location\l0x00003ef1      mov rcx, r12\l0x00003ef4      mov edi, 1                                             ; int status\l0x00003ef9      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00003f00      mov esi, dword [rax]                                   ; int errname\l0x00003f02      xor eax, eax\l0x00003f04      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003f09" [URL="dbg.main/0x00003f09", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34e2\l0x00003f09      mov r13, qword [0x0000f330]                            ; [0xf330:8]=0\l0x00003f10      mov rbp, rax\l0x00003f13      test r13, r13\l0x00003f16      je 0x3f80\l"]
	"0x00003f18" [URL="dbg.main/0x00003f18", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f18      mov eax, dword [0x0000f318]                            ; [0xf318:4]=0\l0x00003f1e      add r12, rbx\l0x00003f21      and eax, 0xd000\l0x00003f26      cmp eax, 0x8000\l0x00003f2b      jne 0x3f32\l"]
	"0x00003f2d" [URL="dbg.main/0x00003f2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f2d      cmp r13, r12\l0x00003f30      jge 0x3f65\l"]
	"0x00003f32" [URL="dbg.main/0x00003f32", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3f2b\l0x00003f32      mov edx, 2\l0x00003f37      xor esi, esi\l0x00003f39      xor edi, edi\l0x00003f3b      call sym.imp.lseek\l0x00003f40      mov r13, rax\l0x00003f43      test rax, rax\l0x00003f46      js 0x3f8b\l"]
	"0x00003f48" [URL="dbg.main/0x00003f48", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f48      cmp r12, rax\l0x00003f4b      je 0x3f65\l"]
	"0x00003f4d" [URL="dbg.main/0x00003f4d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f4d      xor edx, edx\l0x00003f4f      xor edi, edi\l0x00003f51      mov rsi, r12\l0x00003f54      call sym.imp.lseek\l0x00003f59      test rax, rax\l0x00003f5c      js 0x3f8b\l"]
	"0x00003f5e" [URL="dbg.main/0x00003f5e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003f5e      cmp r13, r12\l0x00003f61      cmovl r13, r12\l"]
	"0x00003f65" [URL="dbg.main/0x00003f65", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3f30, 0x3f4b\l0x00003f65      movabs rax, 0x7fffffffffffffff                         ; 9223372036854775807\l0x00003f6f      sub r13, r12\l0x00003f72      lea r12, [rbp + r13]\l0x00003f77      cmp r12, rax\l0x00003f7a      jne 0x34ff\l"]
	"0x00003f80" [URL="dbg.main/0x00003f80", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3f16\l0x00003f80      call sym.imp.__errno_location\l0x00003f85      mov dword [rax], 0x4b                                  ; 'K'\l                                                                       ; [0x4b:4]=0\l"]
	"0x00003f8b" [URL="dbg.main/0x00003f8b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x000034d3  CODE 0x00003502  CODE 0x00003f46  \l; XREFS: CODE 0x00003f5c  CODE 0x00004539  CODE 0x00004545  \l0x00003f8b      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00003f92      mov esi, 3                                             ; int64_t arg2\l0x00003f97      xor edi, edi                                           ; int64_t arg1\l0x00003f99      call sym.quotearg_n_style_colon\l0x00003f9e      mov edx, 5\l0x00003fa3      lea rsi, str._s:_cannot_determine_file_size            ; 0xb030 ; \"%s: cannot determine file size\"\l0x00003faa      xor edi, edi\l0x00003fac      mov r13, rax\l0x00003faf      call sym.imp.dcgettext\l0x00003fb4      mov r12, rax\l0x00003fb7      call sym.imp.__errno_location\l0x00003fbc      mov rcx, r13\l0x00003fbf      mov rdx, r12                                           ; char *format\l0x00003fc2      mov edi, 1                                             ; int status\l0x00003fc7      mov esi, dword [rax]                                   ; int errname\l0x00003fc9      xor eax, eax\l0x00003fcb      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003fd0" [URL="dbg.main/0x00003fd0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3795\l0x00003fd0      mov rax, qword [var_8h]\l0x00003fd5      mov rcx, qword [var_10h]\l0x00003fda      cmp rax, rcx\l0x00003fdd      jb 0x459a\l"]
	"0x00003fe3" [URL="dbg.main/0x00003fe3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003fe3      cmp rax, r13\l0x00003fe6      ja 0x459a\l"]
	"0x00003fec" [URL="dbg.main/0x00003fec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003fec      mov rsi, qword [var_8h]\l0x00003ff1      mov rax, r13\l0x00003ff4      xor edx, edx\l0x00003ff6      mov rcx, qword [var_10h]\l0x00003ffb      div rsi\l0x00003ffe      lea rdx, [rcx - 1]\l0x00004002      imul rdx, rax\l0x00004006      mov rbx, rdx\l0x00004009      cmp rsi, rcx\l0x0000400c      je 0x4015\l"]
	"0x0000400e" [URL="dbg.main/0x0000400e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000400e      imul rcx, rax\l0x00004012      mov r13, rcx\l"]
	"0x00004015" [URL="dbg.main/0x00004015", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x400c\l0x00004015      cmp r15, rdx\l0x00004018      jbe 0x414f\l"]
	"0x0000401e" [URL="dbg.main/0x0000401e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000401e      mov r14, qword [s1]\l0x00004023      sub r15, rdx\l0x00004026      lea rsi, [r14 + rdx]                                   ; const void *s2\l0x0000402a      mov rdi, r14                                           ; void *s1\l0x0000402d      mov rdx, r15                                           ; size_t n\l0x00004030      call sym.imp.memmove                                   ; void *memmove(void *s1, const void *s2, size_t n)\l0x00004035      mov rax, r15\l0x00004038      mov r15, qword [size]\l"]
	"0x0000403d" [URL="dbg.main/0x0000403d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x40b8, 0x417b\l0x0000403d      cmp r13, rbx\l0x00004040      jle 0x336c\l"]
	"0x00004046" [URL="dbg.main/0x00004046", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004046      cmp rax, 0xffffffffffffffff\l0x0000404a      je 0x40ba\l"]
	"0x0000404c" [URL="dbg.main/0x0000404c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x40d4\l0x0000404c      mov r12, r13\l0x0000404f      mov rsi, r14                                           ; int64_t arg2\l0x00004052      mov edi, 1                                             ; int64_t arg1\l0x00004057      sub r12, rbx\l0x0000405a      cmp r12, rax\l0x0000405d      cmova r12, rax\l0x00004061      mov rdx, r12                                           ; int64_t arg3\l0x00004064      call dbg.full_write\l0x00004069      cmp r12, rax\l0x0000406c      je 0x40b1\l"]
	"0x0000406e" [URL="dbg.main/0x0000406e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000406e      call sym.imp.__errno_location\l0x00004073      cmp qword [obj.filter_command], 0                      ; [0xf500:8]=1\l0x0000407b      je 0x4082\l"]
	"0x0000407d" [URL="dbg.main/0x0000407d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000407d      cmp dword [rax], 0x20\l0x00004080      je 0x40b1\l"]
	"0x00004082" [URL="dbg.main/0x00004082", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x407b\l0x00004082      mov rbp, rax\l0x00004085      lea rdx, [0x0000a210]                                  ; \"-\" ; int64_t arg3\l0x0000408c      mov esi, 3                                             ; int64_t arg2\l0x00004091      xor edi, edi                                           ; int64_t arg1\l0x00004093      call sym.quotearg_n_style_colon\l0x00004098      mov esi, dword [rbp]                                   ; int errname\l0x0000409b      mov edi, 1                                             ; int status\l0x000040a0      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x000040a7      mov rcx, rax\l0x000040aa      xor eax, eax\l0x000040ac      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000040b1" [URL="dbg.main/0x000040b1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x406c, 0x4080\l0x000040b1      add rbx, r12\l0x000040b4      or rax, 0xffffffffffffffff\l0x000040b8      jmp 0x403d\l"]
	"0x000040ba" [URL="dbg.main/0x000040ba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x404a\l0x000040ba      xor edi, edi                                           ; int64_t arg1\l0x000040bc      mov rdx, r15                                           ; int64_t arg3\l0x000040bf      mov rsi, r14                                           ; int64_t arg2\l0x000040c2      call dbg.safe_read\l0x000040c7      cmp rax, 0xffffffffffffffff\l0x000040cb      je 0x4683\l"]
	"0x000040d1" [URL="dbg.main/0x000040d1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000040d1      test rax, rax\l0x000040d4      jne 0x404c\l"]
	"0x000040da" [URL="dbg.main/0x000040da", fillcolor="white",color="#767676", fontname="Courier",label="0x000040da      jmp 0x336c\l"]
	"0x000040df" [URL="dbg.main/0x000040df", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x35d8\l0x000040df      mov qword [rsp], 0\l0x000040e7      lea r12, [rbp - 1]\l0x000040eb      mov r14d, 1\l0x000040f1      jmp 0x3611\l"]
	"0x000040f6" [URL="dbg.main/0x000040f6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x397c\l0x000040f6      mov r12, qword [var_8h]\l0x000040fb      mov esi, 0x20                                          ; \"@\" ; int64_t arg2\l0x00004100      xor ebp, ebp\l0x00004102      mov rdi, r12                                           ; int64_t arg1\l0x00004105      call dbg.xnmalloc\l0x0000410a      mov qword [var_20h], rax\l0x0000410f      mov rbx, rax\l"]
	"0x00004112" [URL="dbg.main/0x00004112", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4148\l0x00004112      call dbg.next_file_name\l0x00004117      mov rdi, qword [obj.outfile]                           ; [0xf3b8:8]=2 ; int64_t arg1\l0x0000411e      add rbp, 1\l0x00004122      add rbx, 0x20                                          ; \"@\"\l0x00004126      call dbg.xstrdup\l0x0000412b      mov dword [rbx - 0x18], 0xffffffff                     ; [0xffffffff:4]=0 ; -1\l0x00004132      mov qword [rbx - 0x20], rax\l0x00004136      mov qword [rbx - 0x10], 0\l0x0000413e      mov dword [rbx - 8], 0\l0x00004145      cmp r12, rbp\l0x00004148      jne 0x4112\l"]
	"0x0000414a" [URL="dbg.main/0x0000414a", fillcolor="white",color="#767676", fontname="Courier",label="0x0000414a      jmp 0x3982\l"]
	"0x0000414f" [URL="dbg.main/0x0000414f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4018\l0x0000414f      mov rsi, rdx\l0x00004152      xor edi, edi\l0x00004154      mov edx, 1\l0x00004159      sub rsi, r15\l0x0000415c      or r15, 0xffffffffffffffff\l0x00004160      call sym.imp.lseek\l0x00004165      test rax, rax\l0x00004168      js 0x4339\l"]
	"0x0000416e" [URL="dbg.main/0x0000416e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000416e      mov rax, r15\l0x00004171      mov r14, qword [s1]\l0x00004176      mov r15, qword [size]\l0x0000417b      jmp 0x403d\l"]
	"0x00004180" [URL="dbg.main/0x00004180", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3ded\l0x00004180      xor edi, edi                                           ; int64_t arg2\l0x00004182      mov rsi, qword [ptr]                                   ; int64_t arg3\l0x00004187      test rbp, rbp\l0x0000418a      mov rdx, r15\l0x0000418d      sete dil\l0x00004191      call dbg.cwrite\l0x00004196      jmp 0x3df3\l"]
	"0x0000419b" [URL="dbg.main/0x0000419b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x35f3\l0x0000419b      mov rsi, rbx\l0x0000419e      mov edx, 1\l0x000041a3      xor edi, edi\l0x000041a5      sub rsi, r15\l0x000041a8      or r15, 0xffffffffffffffff\l0x000041ac      call sym.imp.lseek\l0x000041b1      mov qword [rsp], rbx\l0x000041b5      test rax, rax\l0x000041b8      jns 0x3611\l"]
	"0x000041be" [URL="dbg.main/0x000041be", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000041be      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x000041c5      mov esi, 3                                             ; int64_t arg2\l0x000041ca      xor edi, edi                                           ; int64_t arg1\l0x000041cc      call sym.quotearg_n_style_colon\l0x000041d1      mov r12, rax\l0x000041d4      call sym.imp.__errno_location\l0x000041d9      mov rcx, r12\l0x000041dc      mov edi, 1                                             ; int status\l0x000041e1      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x000041e8      mov esi, dword [rax]                                   ; int errname\l0x000041ea      xor eax, eax\l0x000041ec      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000041f1" [URL="dbg.main/0x000041f1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3640\l0x000041f1      mov rdx, qword [size]                                  ; int64_t arg3\l0x000041f6      mov rsi, qword [s1]                                    ; int64_t arg2\l0x000041fb      xor edi, edi                                           ; int64_t arg1\l0x000041fd      mov byte [ptr], cl\l0x00004201      mov qword [var_20h], r9\l0x00004206      call dbg.safe_read\l0x0000420b      movzx ecx, byte [ptr]\l0x00004210      mov r9, qword [var_20h]\l0x00004215      cmp rax, 0xffffffffffffffff\l0x00004219      mov r15, rax\l0x0000421c      jne 0x3646\l"]
	"0x00004222" [URL="dbg.main/0x00004222", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004222      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00004229      mov esi, 3                                             ; int64_t arg2\l0x0000422e      xor edi, edi                                           ; int64_t arg1\l0x00004230      call sym.quotearg_n_style_colon\l0x00004235      mov r12, rax\l0x00004238      call sym.imp.__errno_location\l0x0000423d      mov rcx, r12\l0x00004240      mov edi, 1                                             ; int status\l0x00004245      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x0000424c      mov esi, dword [rax]                                   ; int errname\l0x0000424e      xor eax, eax\l0x00004250      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004255" [URL="dbg.main/0x00004255", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3685\l0x00004255      mov r9, r15\l0x00004258      mov r15, rax\l0x0000425b      jmp 0x362d\l"]
	"0x00004260" [URL="dbg.main/0x00004260", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x372e\l0x00004260      mov byte [var_6fh], al\l0x00004264      xor ecx, ecx\l0x00004266      jmp 0x3d7f\l"]
	"0x0000426b" [URL="dbg.main/0x0000426b", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3920\l0x0000426b      call dbg.xalloc_die\l"]
	"0x00004270" [URL="dbg.main/0x00004270", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3636, 0x3649\l0x00004270      cmp byte [var_6fh], 1\l0x00004275      sbb r14, 0xffffffffffffffff\l0x00004279      cmp qword [var_10h], 0\l0x0000427f      je 0x4298\l"]
	"0x00004281" [URL="dbg.main/0x00004281", fillcolor="white",color="#767676", fontname="Courier",label="0x00004281      jmp 0x336c\l"]
	"0x00004286" [URL="dbg.main/0x00004286", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x429d\l0x00004286      xor edx, edx\l0x00004288      xor esi, esi                                           ; int64_t arg3\l0x0000428a      mov edi, 1                                             ; int64_t arg2\l0x0000428f      add r14, 1\l0x00004293      call dbg.cwrite\l"]
	"0x00004298" [URL="dbg.main/0x00004298", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x427f\l0x00004298      cmp qword [var_8h], r14\l0x0000429d      jae 0x4286\l"]
	"0x0000429f" [URL="dbg.main/0x0000429f", fillcolor="white",color="#767676", fontname="Courier",label="0x0000429f      jmp 0x336c\l"]
	"0x000042a4" [URL="dbg.main/0x000042a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d06\l0x000042a4      mov rdi, r13                                           ; int64_t arg1\l0x000042a7      call dbg.quote\l0x000042ac      mov edx, 5\l0x000042b1      lea rsi, str.invalid_suffix__s__contains_directory_separator ; 0xae80 ; \"invalid suffix %s, contains directory separator\"\l0x000042b8      mov r12, rax\l"]
	"0x000042bb" [URL="dbg.main/0x000042bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x4324, 0x4489\l0x000042bb      xor edi, edi\l0x000042bd      call sym.imp.dcgettext\l0x000042c2      mov rdx, rax\l"]
	"0x000042c5" [URL="dbg.main/0x000042c5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4337\l0x000042c5      xor edi, edi                                           ; int status\l0x000042c7      mov rcx, r12\l0x000042ca      xor esi, esi                                           ; int errname\l0x000042cc      xor eax, eax\l0x000042ce      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000042d3      mov edi, 1                                             ; int64_t arg1\l0x000042d8      call dbg.usage\l"]
	"0x000042dd" [URL="dbg.main/0x000042dd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dc1\l0x000042dd      mov edx, 5\l0x000042e2      lea rsi, str.empty_record_separator                    ; 0xa2a4 ; \"empty record separator\"\l0x000042e9      xor edi, edi\l0x000042eb      call sym.imp.dcgettext\l0x000042f0      xor esi, esi                                           ; int errname\l0x000042f2      mov edi, 1                                             ; int status\l0x000042f7      mov rdx, rax                                           ; char *format\l0x000042fa      xor eax, eax\l0x000042fc      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004301" [URL="dbg.main/0x00004301", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bfd\l0x00004301      mov rdi, r13                                           ; int64_t arg1\l0x00004304      mov dword [rsp], r8d\l0x00004308      call dbg.quote\l0x0000430d      mov r8d, dword [rsp]\l0x00004311      mov edx, 5\l0x00004316      lea rsi, str._s:_invalid_start_value_for_hexadecimal_suffix ; 0xaf58 ; \"%s: invalid start value for hexadecimal suffix\"\l0x0000431d      mov r12, rax\l0x00004320      cmp r8d, 0x64\l0x00004324      jne 0x42bb\l"]
	"0x00004326" [URL="dbg.main/0x00004326", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004326      lea rsi, str._s:_invalid_start_value_for_numerical_suffix ; 0xaf28 ; \"%s: invalid start value for numerical suffix\"\l0x0000432d      xor edi, edi\l0x0000432f      call sym.imp.dcgettext\l0x00004334      mov rdx, rax\l0x00004337      jmp 0x42c5\l"]
	"0x00004339" [URL="dbg.main/0x00004339", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4168\l0x00004339      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00004340      mov esi, 3                                             ; int64_t arg2\l0x00004345      xor edi, edi                                           ; int64_t arg1\l0x00004347      call sym.quotearg_n_style_colon\l0x0000434c      mov r12, rax\l0x0000434f      call sym.imp.__errno_location\l0x00004354      mov rcx, r12\l0x00004357      mov edi, 1                                             ; int status\l0x0000435c      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00004363      mov esi, dword [rax]                                   ; int errname\l0x00004365      xor eax, eax\l0x00004367      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000436c" [URL="dbg.main/0x0000436c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x384e\l0x0000436c      cmp qword [rsp], 0\l0x00004371      je 0x4387\l"]
	"0x00004373" [URL="dbg.main/0x00004373", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00004373      test r13, r13\l0x00004376      jne 0x3910\l"]
	"0x0000437c" [URL="dbg.main/0x0000437c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000437c      cmp qword [rsp], 0\l0x00004381      jne 0x3955\l"]
	"0x00004387" [URL="dbg.main/0x00004387", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x4371\l0x00004387      test rbx, rbx\l0x0000438a      jne 0x3c61\l"]
	"0x00004390" [URL="dbg.main/0x00004390", fillcolor="white",color="#767676", fontname="Courier",label="0x00004390      jmp 0x3955\l"]
	"0x00004395" [URL="dbg.main/0x00004395", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3c5b\l0x00004395      mov byte [var_10h], 1\l0x0000439a      jmp 0x387b\l"]
	"0x0000439f" [URL="dbg.main/0x0000439f", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x33a6\l0x0000439f      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x000043a4" [URL="dbg.main/0x000043a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3375\l0x000043a4      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x000043ab      mov esi, 3                                             ; int64_t arg2\l0x000043b0      xor edi, edi                                           ; int64_t arg1\l0x000043b2      call sym.quotearg_n_style_colon\l0x000043b7      mov r12, rax\l0x000043ba      call sym.imp.__errno_location\l0x000043bf      mov rcx, r12\l0x000043c2      mov edi, 1                                             ; int status\l0x000043c7      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x000043ce      mov esi, dword [rax]                                   ; int errname\l0x000043d0      xor eax, eax\l0x000043d2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000043d7" [URL="dbg.main/0x000043d7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x32d2\l0x000043d7      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x000043de      mov esi, 3                                             ; int64_t arg2\l0x000043e3      xor edi, edi                                           ; int64_t arg1\l0x000043e5      call sym.quotearg_n_style_colon\l0x000043ea      mov r12, rax\l0x000043ed      call sym.imp.__errno_location\l0x000043f2      mov rcx, r12\l0x000043f5      mov edi, 1                                             ; int status\l0x000043fa      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00004401      mov esi, dword [rax]                                   ; int errname\l0x00004403      xor eax, eax\l0x00004405      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000440a" [URL="dbg.main/0x0000440a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3133\l0x0000440a      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00004411      mov esi, 3                                             ; int64_t arg2\l0x00004416      xor edi, edi                                           ; int64_t arg1\l0x00004418      call sym.quotearg_n_style_colon\l0x0000441d      mov r12, rax\l0x00004420      call sym.imp.__errno_location\l0x00004425      mov rcx, r12\l0x00004428      mov edi, 1                                             ; int status\l0x0000442d      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00004434      mov esi, dword [rax]                                   ; int errname\l0x00004436      xor eax, eax\l0x00004438      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000443d" [URL="dbg.main/0x0000443d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x37f8\l0x0000443d      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00004444      mov esi, 3                                             ; int64_t arg2\l0x00004449      xor edi, edi                                           ; int64_t arg1\l0x0000444b      call sym.quotearg_n_style_colon\l0x00004450      mov r12, rax\l0x00004453      call sym.imp.__errno_location\l0x00004458      mov rcx, r12\l0x0000445b      mov edi, 1                                             ; int status\l0x00004460      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00004467      mov esi, dword [rax]                                   ; int errname\l0x00004469      xor eax, eax\l0x0000446b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004470" [URL="dbg.main/0x00004470", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30c3\l0x00004470      mov rdi, qword [rbx + rsi + 0x10]                      ; int64_t arg1\l0x00004475      call dbg.quote\l0x0000447a      mov edx, 5\l0x0000447f      lea rsi, str.extra_operand__s                          ; 0xa31e ; \"extra operand %s\"\l0x00004486      mov r12, rax\l0x00004489      jmp 0x42bb\l"]
	"0x0000448e" [URL="dbg.main/0x0000448e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3027\l0x0000448e      lea rdi, [0x0000b247]                                  ; \"0\" ; int64_t arg1\l0x00004495      call dbg.quote\l0x0000449a      mov edx, 5\l0x0000449f      lea rsi, str.invalid_number_of_lines                   ; 0xa25b ; \"invalid number of lines\"\l0x000044a6      xor edi, edi\l0x000044a8      mov rbx, rax\l0x000044ab      call sym.imp.dcgettext\l0x000044b0      xor edi, edi                                           ; int status\l0x000044b2      mov r8, rbx\l0x000044b5      xor esi, esi                                           ; int errname\l0x000044b7      mov rcx, rax\l0x000044ba      lea rdx, str._s:__s                                    ; 0xa317 ; \"%s: %s\" ; char *format\l0x000044c1      xor eax, eax\l0x000044c3      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000044c8      mov edi, 1                                             ; int64_t arg1\l0x000044cd      call dbg.usage\l"]
	"0x000044d2" [URL="dbg.main/0x000044d2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3c9d\l0x000044d2      mov rdx, qword [r8]                                    ; int64_t arg3\l0x000044d5      mov esi, 3                                             ; int64_t arg2\l0x000044da      xor edi, edi                                           ; int64_t arg1\l0x000044dc      call sym.quotearg_n_style_colon\l0x000044e1      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x000044e8      mov edi, 1                                             ; int status\l0x000044ed      mov rcx, rax\l0x000044f0      mov rax, qword [errname]\l0x000044f5      mov esi, dword [rax]                                   ; int errname\l0x000044f7      xor eax, eax\l0x000044f9      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000044fe" [URL="dbg.main/0x000044fe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x39b4\l0x000044fe      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x00004505      mov esi, 3                                             ; int64_t arg2\l0x0000450a      xor edi, edi                                           ; int64_t arg1\l0x0000450c      call sym.quotearg_n_style_colon\l0x00004511      mov r12, rax\l0x00004514      call sym.imp.__errno_location\l0x00004519      mov rcx, r12\l0x0000451c      mov edi, 1                                             ; int status\l0x00004521      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x00004528      mov esi, dword [rax]                                   ; int errname\l0x0000452a      xor eax, eax\l0x0000452c      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004531" [URL="dbg.main/0x00004531", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34bd\l0x00004531      call sym.imp.__errno_location\l0x00004536      cmp dword [rax], 0x1d\l0x00004539      jne 0x3f8b\l"]
	"0x0000453f" [URL="dbg.main/0x0000453f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000453f      mov dword [rax], 0\l0x00004545      jmp 0x3f8b\l"]
	"0x0000454a" [URL="dbg.main/0x0000454a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3907\l0x0000454a      mov byte [var_10h], 1\l0x0000454f      xor r15d, r15d\l0x00004552      jmp 0x3955\l"]
	"0x00004557" [URL="dbg.main/0x00004557", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x311d\l0x00004557      mov rsi, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg2\l0x0000455e      mov edi, 4                                             ; int64_t arg1\l0x00004563      call sym.quotearg_style\l0x00004568      mov edx, 5\l0x0000456d      lea rsi, str.cannot_open__s_for_reading                ; 0xa32f ; \"cannot open %s for reading\"\l0x00004574      xor edi, edi\l0x00004576      mov r13, rax\l0x00004579      call sym.imp.dcgettext\l0x0000457e      mov r12, rax\l0x00004581      call sym.imp.__errno_location\l0x00004586      mov rcx, r13\l0x00004589      mov rdx, r12                                           ; char *format\l0x0000458c      mov edi, 1                                             ; int status\l0x00004591      mov esi, dword [rax]                                   ; int errname\l0x00004593      xor eax, eax\l0x00004595      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000459a" [URL="dbg.main/0x0000459a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3fdd, 0x3fe6\l0x0000459a      lea rcx, obj.__PRETTY_FUNCTION__.1                     ; 0xb210 ; \"bytes_chunk_extract\" ; const char *function\l0x000045a1      mov edx, 0x3e3                                         ; unsigned int line\l0x000045a6      lea rsi, str.src_split.c                               ; 0xa004 ; \"src/split.c\" ; const char *file\l0x000045ad      lea rdi, str.k__n__k___n__n___file_size                ; 0xb050 ; \"k && n && k <= n && n <= file_size\" ; const char *assertion\l0x000045b4      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x000045b9" [URL="dbg.main/0x000045b9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3277, 0x3289\l0x000045b9      mov rdi, qword [var_8h]                                ; int64_t arg1\l0x000045be      lea rsi, [var_120h]                                    ; int64_t arg2\l0x000045c6      mov dword [rsp], r8d\l0x000045ca      call dbg.umaxtostr\l0x000045cf      mov edx, 5\l0x000045d4      lea rsi, str.line_count_option___s_c..._is_too_large   ; 0xaf00 ; \"line count option -%s%c... is too large\"\l0x000045db      xor edi, edi\l0x000045dd      mov r12, rax\l0x000045e0      call sym.imp.dcgettext\l0x000045e5      mov r8d, dword [rsp]\l0x000045e9      mov rcx, r12\l0x000045ec      xor esi, esi                                           ; int errname\l0x000045ee      mov rdx, rax                                           ; char *format\l0x000045f1      mov edi, 1                                             ; int status\l0x000045f6      xor eax, eax\l0x000045f8      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000045fd" [URL="dbg.main/0x000045fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3011\l0x000045fd      mov edx, 5\l0x00004602      lea rsi, str.__filter_does_not_process_a_chunk_extracted_to_stdout ; 0xaf88 ; \"--filter does not process a chunk extracted to stdout\"\l0x00004609      jmp 0x3587\l"]
	"0x0000460e" [URL="dbg.main/0x0000460e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ddf\l0x0000460e      mov rdi, r13                                           ; int64_t arg1\l0x00004611      call dbg.quote\l0x00004616      mov edx, 5\l0x0000461b      lea rsi, str.multi_character_separator__s              ; 0xa2be ; \"multi-character separator %s\"\l0x00004622      xor edi, edi\l0x00004624      mov r12, rax\l0x00004627      call sym.imp.dcgettext\l0x0000462c      mov rcx, r12\l0x0000462f      xor esi, esi                                           ; int errname\l0x00004631      mov edi, 1                                             ; int status\l0x00004636      mov rdx, rax                                           ; char *format\l0x00004639      xor eax, eax\l0x0000463b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004640" [URL="dbg.main/0x00004640", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2df3\l0x00004640      mov edx, 5\l0x00004645      lea rsi, str.multiple_separator_characters_specified   ; 0xaed8 ; \"multiple separator characters specified\"\l0x0000464c      xor edi, edi\l0x0000464e      call sym.imp.dcgettext\l0x00004653      xor esi, esi                                           ; int errname\l0x00004655      mov edi, 1                                             ; int status\l0x0000465a      mov rdx, rax                                           ; char *format\l0x0000465d      xor eax, eax\l0x0000465f      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00004664" [URL="dbg.main/0x00004664", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x35b3, 0x35bc\l0x00004664      lea rcx, obj.__PRETTY_FUNCTION__.0                     ; 0xb1f0 ; \"lines_chunk_split\" ; const char *function\l0x0000466b      mov edx, 0x362                                         ; unsigned int line\l0x00004670      lea rsi, str.src_split.c                               ; 0xa004 ; \"src/split.c\" ; const char *file\l0x00004677      lea rdi, str.n__k___n__n___file_size                   ; 0xa34a ; \"n && k <= n && n <= file_size\" ; const char *assertion\l0x0000467e      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x00004683" [URL="dbg.main/0x00004683", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x40cb\l0x00004683      mov rdx, qword [obj.infile]                            ; [0xf390:8]=0x27002800000001 ; int64_t arg3\l0x0000468a      mov esi, 3                                             ; int64_t arg2\l0x0000468f      xor edi, edi                                           ; int64_t arg1\l0x00004691      call sym.quotearg_n_style_colon\l0x00004696      mov r12, rax\l0x00004699      call sym.imp.__errno_location\l0x0000469e      mov rcx, r12\l; DATA XREF from dbg.close_stdout @ 0x5cc0\l0x000046a1      mov edi, 1                                             ; int status\l0x000046a6      lea rdx, [0x0000a31b]                                  ; \"%s\" ; char *format\l0x000046ad      mov esi, dword [rax]                                   ; int errname\l0x000046af      xor eax, eax\l0x000046b1      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000046b6      nop word cs:[rax + rax]\l"]
        "0x00002a20" -> "0x00002b00" [color="#3a96dd"];
        "0x00002b00" -> "0x00003001" [color="#13a10e"];
        "0x00002b00" -> "0x00002b32" [color="#c50f1f"];
        "0x00002b32" -> "0x0000359c" [color="#13a10e"];
        "0x00002b32" -> "0x00002b3d" [color="#c50f1f"];
        "0x00002b3d" -> "0x00002f70" [color="#13a10e"];
        "0x00002b3d" -> "0x00002b46" [color="#c50f1f"];
        "0x00002b46" -> "0x0000359c" [color="#13a10e"];
        "0x00002b46" -> "0x00002b52" [color="#c50f1f"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x00002b60" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002d5c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002d18" [color="#3a96dd"];
        "0x00002b52" -> "0x00002c2d" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002ba0" [color="#3a96dd"];
        "0x00002b52" -> "0x00002f5c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002f08" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002e04" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002db3" [color="#3a96dd"];
        "0x00002b52" -> "0x00002ce8" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002ba0" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x0000359c" [color="#3a96dd"];
        "0x00002b52" -> "0x00002cdc" [color="#3a96dd"];
        "0x00002b52" -> "0x00002cc9" [color="#3a96dd"];
        "0x00002b52" -> "0x00002c86" [color="#3a96dd"];
        "0x00002b52" -> "0x00002cf4" [color="#3a96dd"];
        "0x00002b60" -> "0x00002b86" [color="#13a10e"];
        "0x00002b60" -> "0x00002b67" [color="#c50f1f"];
        "0x00002b67" -> "0x0000357b" [color="#13a10e"];
        "0x00002b67" -> "0x00002b71" [color="#c50f1f"];
        "0x00002b71" -> "0x00003265" [color="#13a10e"];
        "0x00002b71" -> "0x00002b7d" [color="#c50f1f"];
        "0x00002b7d" -> "0x00003265" [color="#13a10e"];
        "0x00002b7d" -> "0x00002b86" [color="#c50f1f"];
        "0x00002b86" -> "0x00002b00" [color="#3a96dd"];
        "0x00002ba0" -> "0x00002b00" [color="#13a10e"];
        "0x00002ba0" -> "0x00002bd7" [color="#c50f1f"];
        "0x00002bd7" -> "0x00002c1a" [color="#13a10e"];
        "0x00002bd7" -> "0x00002bfd" [color="#c50f1f"];
        "0x00002bfd" -> "0x00004301" [color="#3a96dd"];
        "0x00002c08" -> "0x00002c21" [color="#13a10e"];
        "0x00002c08" -> "0x00002c0f" [color="#c50f1f"];
        "0x00002c0f" -> "0x00002c1a" [color="#3a96dd"];
        "0x00002c1a" -> "0x00002c08" [color="#13a10e"];
        "0x00002c1a" -> "0x00002c21" [color="#c50f1f"];
        "0x00002c21" -> "0x00002b00" [color="#3a96dd"];
        "0x00002c2d" -> "0x0000357b" [color="#13a10e"];
        "0x00002c2d" -> "0x00002c3a" [color="#c50f1f"];
        "0x00002c3a" -> "0x00002b00" [color="#3a96dd"];
        "0x00002c86" -> "0x00002b00" [color="#3a96dd"];
        "0x00002cc9" -> "0x00002b00" [color="#3a96dd"];
        "0x00002cdc" -> "0x00002b00" [color="#3a96dd"];
        "0x00002ce8" -> "0x00002b00" [color="#3a96dd"];
        "0x00002cf4" -> "0x000042a4" [color="#13a10e"];
        "0x00002cf4" -> "0x00002d0c" [color="#c50f1f"];
        "0x00002d0c" -> "0x00002b00" [color="#3a96dd"];
        "0x00002d18" -> "0x00002b00" [color="#3a96dd"];
        "0x00002d5c" -> "0x0000357b" [color="#13a10e"];
        "0x00002d5c" -> "0x00002d67" [color="#c50f1f"];
        "0x00002d67" -> "0x00002b00" [color="#3a96dd"];
        "0x00002db3" -> "0x000042dd" [color="#13a10e"];
        "0x00002db3" -> "0x00002dc7" [color="#c50f1f"];
        "0x00002dc7" -> "0x00002de7" [color="#13a10e"];
        "0x00002dc7" -> "0x00002dce" [color="#c50f1f"];
        "0x00002dce" -> "0x0000460e" [color="#13a10e"];
        "0x00002dce" -> "0x00002de5" [color="#c50f1f"];
        "0x00002de5" -> "0x00002de7" [color="#3a96dd"];
        "0x00002de7" -> "0x00002df9" [color="#13a10e"];
        "0x00002de7" -> "0x00002df1" [color="#c50f1f"];
        "0x00002df1" -> "0x00004640" [color="#13a10e"];
        "0x00002df1" -> "0x00002df9" [color="#c50f1f"];
        "0x00002df9" -> "0x00002b00" [color="#3a96dd"];
        "0x00002e04" -> "0x0000357b" [color="#13a10e"];
        "0x00002e04" -> "0x00002e0f" [color="#c50f1f"];
        "0x00002e0f" -> "0x00002e27" [color="#3a96dd"];
        "0x00002e20" -> "0x00002e27" [color="#3a96dd"];
        "0x00002e27" -> "0x00002e20" [color="#13a10e"];
        "0x00002e27" -> "0x00002e3a" [color="#c50f1f"];
        "0x00002e3a" -> "0x00002fc7" [color="#13a10e"];
        "0x00002e3a" -> "0x00002e45" [color="#c50f1f"];
        "0x00002e45" -> "0x00002fc7" [color="#13a10e"];
        "0x00002e45" -> "0x00002e50" [color="#c50f1f"];
        "0x00002e50" -> "0x00002e62" [color="#3a96dd"];
        "0x00002e62" -> "0x0000321f" [color="#13a10e"];
        "0x00002e62" -> "0x00002e8d" [color="#c50f1f"];
        "0x00002e8d" -> "0x00002b00" [color="#13a10e"];
        "0x00002e8d" -> "0x00002ec3" [color="#c50f1f"];
        "0x00002ec3" -> "0x00002b00" [color="#3a96dd"];
        "0x00002f08" -> "0x0000357b" [color="#13a10e"];
        "0x00002f08" -> "0x00002f13" [color="#c50f1f"];
        "0x00002f13" -> "0x00002b00" [color="#3a96dd"];
        "0x00002f5c" -> "0x00002b00" [color="#3a96dd"];
        "0x00002f70" -> "0x00002fb5" [color="#13a10e"];
        "0x00002f70" -> "0x00002f77" [color="#c50f1f"];
        "0x00002fb5" -> "0x0000359c" [color="#13a10e"];
        "0x00002fb5" -> "0x00002fc0" [color="#c50f1f"];
        "0x00002fc0" -> "0x00002fc7" [color="#3a96dd"];
        "0x00002fc7" -> "0x00002e62" [color="#13a10e"];
        "0x00002fc7" -> "0x00002fea" [color="#c50f1f"];
        "0x00002fea" -> "0x00002e62" [color="#3a96dd"];
        "0x00003001" -> "0x00003017" [color="#13a10e"];
        "0x00003001" -> "0x00003009" [color="#c50f1f"];
        "0x00003009" -> "0x000045fd" [color="#13a10e"];
        "0x00003009" -> "0x00003017" [color="#c50f1f"];
        "0x00003017" -> "0x00003250" [color="#13a10e"];
        "0x00003017" -> "0x00003021" [color="#c50f1f"];
        "0x00003021" -> "0x0000448e" [color="#13a10e"];
        "0x00003021" -> "0x0000302d" [color="#c50f1f"];
        "0x0000302d" -> "0x00003040" [color="#13a10e"];
        "0x0000302d" -> "0x00003036" [color="#c50f1f"];
        "0x00003036" -> "0x00003040" [color="#3a96dd"];
        "0x00003040" -> "0x000033d8" [color="#13a10e"];
        "0x00003040" -> "0x00003057" [color="#c50f1f"];
        "0x00003057" -> "0x00003454" [color="#13a10e"];
        "0x00003057" -> "0x00003068" [color="#c50f1f"];
        "0x00003068" -> "0x000033c0" [color="#13a10e"];
        "0x00003068" -> "0x00003078" [color="#c50f1f"];
        "0x00003078" -> "0x0000307f" [color="#3a96dd"];
        "0x0000307f" -> "0x000030c9" [color="#13a10e"];
        "0x0000307f" -> "0x00003089" [color="#c50f1f"];
        "0x00003089" -> "0x000030c9" [color="#13a10e"];
        "0x00003089" -> "0x000030ac" [color="#c50f1f"];
        "0x000030ac" -> "0x00004470" [color="#13a10e"];
        "0x000030ac" -> "0x000030c9" [color="#c50f1f"];
        "0x000030c9" -> "0x000030f3" [color="#13a10e"];
        "0x000030c9" -> "0x000030d5" [color="#c50f1f"];
        "0x000030d5" -> "0x00003587" [color="#13a10e"];
        "0x000030d5" -> "0x000030f3" [color="#c50f1f"];
        "0x000030f3" -> "0x00003123" [color="#13a10e"];
        "0x000030f3" -> "0x0000310d" [color="#c50f1f"];
        "0x0000310d" -> "0x00004557" [color="#13a10e"];
        "0x0000310d" -> "0x00003123" [color="#c50f1f"];
        "0x00003123" -> "0x0000440a" [color="#13a10e"];
        "0x00003123" -> "0x00003139" [color="#c50f1f"];
        "0x00003139" -> "0x0000316a" [color="#13a10e"];
        "0x00003139" -> "0x00003141" [color="#c50f1f"];
        "0x00003141" -> "0x0000316a" [color="#3a96dd"];
        "0x0000316a" -> "0x000034a6" [color="#13a10e"];
        "0x0000316a" -> "0x000031a9" [color="#c50f1f"];
        "0x000031a9" -> "0x000031ff" [color="#13a10e"];
        "0x000031a9" -> "0x000031b3" [color="#c50f1f"];
        "0x000031b3" -> "0x000031ee" [color="#13a10e"];
        "0x000031b3" -> "0x000031e1" [color="#c50f1f"];
        "0x000031e1" -> "0x000031ee" [color="#3a96dd"];
        "0x000031ee" -> "0x000031ff" [color="#3a96dd"];
        "0x000031ff" -> "0x00003dca" [color="#13a10e"];
        "0x000031ff" -> "0x0000320e" [color="#c50f1f"];
        "0x0000320e" -> "0x000037c2" [color="#3a96dd"];
        "0x0000320e" -> "0x0000329e" [color="#3a96dd"];
        "0x0000320e" -> "0x0000329e" [color="#3a96dd"];
        "0x0000320e" -> "0x0000378f" [color="#3a96dd"];
        "0x0000320e" -> "0x000035a6" [color="#3a96dd"];
        "0x0000320e" -> "0x00003976" [color="#3a96dd"];
        "0x0000321f" -> "0x00002b00" [color="#3a96dd"];
        "0x00003250" -> "0x0000302d" [color="#3a96dd"];
        "0x00003265" -> "0x000045b9" [color="#13a10e"];
        "0x00003265" -> "0x0000327d" [color="#c50f1f"];
        "0x0000327d" -> "0x000045b9" [color="#13a10e"];
        "0x0000327d" -> "0x0000328f" [color="#c50f1f"];
        "0x0000328f" -> "0x00002b00" [color="#3a96dd"];
        "0x0000329e" -> "0x000032b8" [color="#3a96dd"];
        "0x000032b8" -> "0x000043d7" [color="#13a10e"];
        "0x000032b8" -> "0x000032d8" [color="#c50f1f"];
        "0x000032d8" -> "0x000032f8" [color="#3a96dd"];
        "0x000032f8" -> "0x00003345" [color="#13a10e"];
        "0x000032f8" -> "0x00003307" [color="#c50f1f"];
        "0x00003307" -> "0x000032f8" [color="#13a10e"];
        "0x00003307" -> "0x00003314" [color="#c50f1f"];
        "0x00003314" -> "0x00003307" [color="#13a10e"];
        "0x00003314" -> "0x00003345" [color="#c50f1f"];
        "0x00003345" -> "0x00003360" [color="#13a10e"];
        "0x00003345" -> "0x0000334a" [color="#c50f1f"];
        "0x0000334a" -> "0x00003360" [color="#3a96dd"];
        "0x00003360" -> "0x000032b8" [color="#13a10e"];
        "0x00003360" -> "0x0000336c" [color="#c50f1f"];
        "0x0000336c" -> "0x000043a4" [color="#13a10e"];
        "0x0000336c" -> "0x0000337b" [color="#c50f1f"];
        "0x0000337b" -> "0x0000439f" [color="#13a10e"];
        "0x0000337b" -> "0x000033ac" [color="#c50f1f"];
        "0x000033c0" -> "0x0000307f" [color="#3a96dd"];
        "0x000033d8" -> "0x00003068" [color="#13a10e"];
        "0x000033d8" -> "0x000033eb" [color="#c50f1f"];
        "0x000033eb" -> "0x00003400" [color="#3a96dd"];
        "0x00003400" -> "0x00003400" [color="#13a10e"];
        "0x00003400" -> "0x00003411" [color="#c50f1f"];
        "0x00003411" -> "0x000033c0" [color="#13a10e"];
        "0x00003411" -> "0x00003424" [color="#c50f1f"];
        "0x00003424" -> "0x00003078" [color="#13a10e"];
        "0x00003424" -> "0x0000342d" [color="#c50f1f"];
        "0x0000342d" -> "0x00003454" [color="#3a96dd"];
        "0x00003454" -> "0x000033eb" [color="#13a10e"];
        "0x00003454" -> "0x0000347d" [color="#c50f1f"];
        "0x0000347d" -> "0x000033eb" [color="#13a10e"];
        "0x0000347d" -> "0x00003496" [color="#c50f1f"];
        "0x00003496" -> "0x000033eb" [color="#13a10e"];
        "0x00003496" -> "0x0000349e" [color="#c50f1f"];
        "0x0000349e" -> "0x000033eb" [color="#3a96dd"];
        "0x000034a6" -> "0x00004531" [color="#13a10e"];
        "0x000034a6" -> "0x000034c3" [color="#c50f1f"];
        "0x000034c3" -> "0x000034e8" [color="#3a96dd"];
        "0x000034cf" -> "0x00003f8b" [color="#13a10e"];
        "0x000034cf" -> "0x000034d9" [color="#c50f1f"];
        "0x000034d9" -> "0x00003f09" [color="#13a10e"];
        "0x000034d9" -> "0x000034e8" [color="#c50f1f"];
        "0x000034e8" -> "0x000034cf" [color="#13a10e"];
        "0x000034e8" -> "0x000034ff" [color="#c50f1f"];
        "0x000034ff" -> "0x00003f8b" [color="#13a10e"];
        "0x000034ff" -> "0x00003508" [color="#c50f1f"];
        "0x00003508" -> "0x000031a9" [color="#13a10e"];
        "0x00003508" -> "0x0000352f" [color="#c50f1f"];
        "0x0000352f" -> "0x0000357b" [color="#3a96dd"];
        "0x0000357b" -> "0x00003587" [color="#3a96dd"];
        "0x00003587" -> "0x0000359c" [color="#3a96dd"];
        "0x0000359c" -> "0x000035a6" [color="#3a96dd"];
        "0x000035a6" -> "0x00004664" [color="#13a10e"];
        "0x000035a6" -> "0x000035b9" [color="#c50f1f"];
        "0x000035b9" -> "0x00004664" [color="#13a10e"];
        "0x000035b9" -> "0x000035c2" [color="#c50f1f"];
        "0x000035c2" -> "0x000040df" [color="#13a10e"];
        "0x000035c2" -> "0x000035de" [color="#c50f1f"];
        "0x000035de" -> "0x0000419b" [color="#13a10e"];
        "0x000035de" -> "0x000035f9" [color="#c50f1f"];
        "0x000035f9" -> "0x00003611" [color="#3a96dd"];
        "0x00003611" -> "0x0000362d" [color="#3a96dd"];
        "0x0000362d" -> "0x00004270" [color="#13a10e"];
        "0x0000362d" -> "0x0000363c" [color="#c50f1f"];
        "0x0000363c" -> "0x000041f1" [color="#13a10e"];
        "0x0000363c" -> "0x00003646" [color="#c50f1f"];
        "0x00003646" -> "0x00004270" [color="#13a10e"];
        "0x00003646" -> "0x0000364f" [color="#c50f1f"];
        "0x0000364f" -> "0x0000367c" [color="#3a96dd"];
        "0x0000367c" -> "0x00004255" [color="#13a10e"];
        "0x0000367c" -> "0x0000368b" [color="#c50f1f"];
        "0x0000368b" -> "0x00003e02" [color="#13a10e"];
        "0x0000368b" -> "0x000036cf" [color="#c50f1f"];
        "0x000036cf" -> "0x000036de" [color="#3a96dd"];
        "0x000036de" -> "0x00003eb0" [color="#13a10e"];
        "0x000036de" -> "0x000036f4" [color="#c50f1f"];
        "0x000036f4" -> "0x00003e14" [color="#13a10e"];
        "0x000036f4" -> "0x000036fd" [color="#c50f1f"];
        "0x000036fd" -> "0x00003d7f" [color="#13a10e"];
        "0x000036fd" -> "0x00003719" [color="#c50f1f"];
        "0x00003719" -> "0x00004260" [color="#13a10e"];
        "0x00003719" -> "0x00003734" [color="#c50f1f"];
        "0x00003734" -> "0x0000374d" [color="#13a10e"];
        "0x00003734" -> "0x00003744" [color="#c50f1f"];
        "0x00003744" -> "0x0000336c" [color="#13a10e"];
        "0x00003744" -> "0x0000374d" [color="#c50f1f"];
        "0x0000374d" -> "0x00003760" [color="#3a96dd"];
        "0x00003760" -> "0x00003d7c" [color="#13a10e"];
        "0x00003760" -> "0x00003773" [color="#c50f1f"];
        "0x00003773" -> "0x00003d93" [color="#13a10e"];
        "0x00003773" -> "0x0000377c" [color="#c50f1f"];
        "0x0000377c" -> "0x00003760" [color="#13a10e"];
        "0x0000377c" -> "0x00003785" [color="#c50f1f"];
        "0x00003785" -> "0x00003760" [color="#13a10e"];
        "0x00003785" -> "0x0000378a" [color="#c50f1f"];
        "0x0000378a" -> "0x0000336c" [color="#3a96dd"];
        "0x0000378f" -> "0x00003fd0" [color="#13a10e"];
        "0x0000378f" -> "0x0000379b" [color="#c50f1f"];
        "0x0000379b" -> "0x0000336c" [color="#3a96dd"];
        "0x000037c2" -> "0x000037e0" [color="#3a96dd"];
        "0x000037e0" -> "0x0000443d" [color="#13a10e"];
        "0x000037e0" -> "0x000037fe" [color="#c50f1f"];
        "0x000037fe" -> "0x00003dea" [color="#13a10e"];
        "0x000037fe" -> "0x00003807" [color="#c50f1f"];
        "0x00003807" -> "0x00003884" [color="#3a96dd"];
        "0x00003810" -> "0x000038c7" [color="#13a10e"];
        "0x00003810" -> "0x00003830" [color="#c50f1f"];
        "0x00003830" -> "0x00003be0" [color="#13a10e"];
        "0x00003830" -> "0x00003840" [color="#c50f1f"];
        "0x00003840" -> "0x00003be0" [color="#13a10e"];
        "0x00003840" -> "0x00003849" [color="#c50f1f"];
        "0x00003849" -> "0x0000436c" [color="#13a10e"];
        "0x00003849" -> "0x00003854" [color="#c50f1f"];
        "0x00003854" -> "0x00003c70" [color="#13a10e"];
        "0x00003854" -> "0x00003868" [color="#c50f1f"];
        "0x00003868" -> "0x0000387b" [color="#3a96dd"];
        "0x0000387b" -> "0x000037e0" [color="#13a10e"];
        "0x0000387b" -> "0x00003884" [color="#c50f1f"];
        "0x00003884" -> "0x00003810" [color="#13a10e"];
        "0x00003884" -> "0x000038a5" [color="#c50f1f"];
        "0x000038a5" -> "0x00003830" [color="#13a10e"];
        "0x000038a5" -> "0x000038c7" [color="#c50f1f"];
        "0x000038c7" -> "0x00003c40" [color="#13a10e"];
        "0x000038c7" -> "0x000038d0" [color="#c50f1f"];
        "0x000038d0" -> "0x00003c50" [color="#13a10e"];
        "0x000038d0" -> "0x000038ff" [color="#c50f1f"];
        "0x000038ff" -> "0x0000454a" [color="#13a10e"];
        "0x000038ff" -> "0x0000390d" [color="#c50f1f"];
        "0x0000390d" -> "0x00003910" [color="#3a96dd"];
        "0x00003910" -> "0x00003938" [color="#13a10e"];
        "0x00003910" -> "0x0000391b" [color="#c50f1f"];
        "0x0000391b" -> "0x0000426b" [color="#13a10e"];
        "0x0000391b" -> "0x00003926" [color="#c50f1f"];
        "0x00003926" -> "0x00003938" [color="#3a96dd"];
        "0x00003938" -> "0x00003955" [color="#3a96dd"];
        "0x00003955" -> "0x0000387b" [color="#3a96dd"];
        "0x00003976" -> "0x000040f6" [color="#13a10e"];
        "0x00003976" -> "0x00003982" [color="#c50f1f"];
        "0x00003982" -> "0x0000399f" [color="#3a96dd"];
        "0x0000399f" -> "0x000044fe" [color="#13a10e"];
        "0x0000399f" -> "0x000039ba" [color="#c50f1f"];
        "0x000039ba" -> "0x00003e34" [color="#13a10e"];
        "0x000039ba" -> "0x000039c3" [color="#c50f1f"];
        "0x000039c3" -> "0x00003a02" [color="#13a10e"];
        "0x000039c3" -> "0x000039d1" [color="#c50f1f"];
        "0x000039d1" -> "0x0000399f" [color="#3a96dd"];
        "0x000039d8" -> "0x00003b30" [color="#13a10e"];
        "0x000039d8" -> "0x000039e1" [color="#c50f1f"];
        "0x000039e1" -> "0x000039fa" [color="#13a10e"];
        "0x000039e1" -> "0x000039e6" [color="#c50f1f"];
        "0x000039e6" -> "0x000039fa" [color="#3a96dd"];
        "0x000039fa" -> "0x0000399f" [color="#13a10e"];
        "0x000039fa" -> "0x000039ff" [color="#c50f1f"];
        "0x000039ff" -> "0x00003a02" [color="#3a96dd"];
        "0x00003a02" -> "0x00003b20" [color="#13a10e"];
        "0x00003a02" -> "0x00003a22" [color="#c50f1f"];
        "0x00003a22" -> "0x00003a32" [color="#3a96dd"];
        "0x00003a32" -> "0x000039d8" [color="#13a10e"];
        "0x00003a32" -> "0x00003a3c" [color="#c50f1f"];
        "0x00003a3c" -> "0x00003cc0" [color="#13a10e"];
        "0x00003a3c" -> "0x00003a77" [color="#c50f1f"];
        "0x00003a77" -> "0x00003ba0" [color="#13a10e"];
        "0x00003a77" -> "0x00003aa4" [color="#c50f1f"];
        "0x00003aa4" -> "0x00003aca" [color="#3a96dd"];
        "0x00003aca" -> "0x00003c88" [color="#13a10e"];
        "0x00003aca" -> "0x00003ad5" [color="#c50f1f"];
        "0x00003ad5" -> "0x000039fa" [color="#13a10e"];
        "0x00003ad5" -> "0x00003ade" [color="#c50f1f"];
        "0x00003ade" -> "0x000039fa" [color="#13a10e"];
        "0x00003ade" -> "0x00003af2" [color="#c50f1f"];
        "0x00003af2" -> "0x00003ea9" [color="#13a10e"];
        "0x00003af2" -> "0x00003afd" [color="#c50f1f"];
        "0x00003afd" -> "0x000039fa" [color="#3a96dd"];
        "0x00003b20" -> "0x00003a32" [color="#3a96dd"];
        "0x00003b30" -> "0x00003d30" [color="#13a10e"];
        "0x00003b30" -> "0x00003b3d" [color="#c50f1f"];
        "0x00003b3d" -> "0x000039e1" [color="#13a10e"];
        "0x00003b3d" -> "0x00003b5e" [color="#c50f1f"];
        "0x00003b5e" -> "0x00003ba0" [color="#3a96dd"];
        "0x00003ba0" -> "0x00003bb3" [color="#13a10e"];
        "0x00003ba0" -> "0x00003ba5" [color="#c50f1f"];
        "0x00003ba5" -> "0x00003aca" [color="#13a10e"];
        "0x00003ba5" -> "0x00003bb3" [color="#c50f1f"];
        "0x00003bb3" -> "0x00003be0" [color="#3a96dd"];
        "0x00003be0" -> "0x000038c7" [color="#13a10e"];
        "0x00003be0" -> "0x00003c11" [color="#c50f1f"];
        "0x00003c11" -> "0x000038d0" [color="#13a10e"];
        "0x00003c11" -> "0x00003c36" [color="#c50f1f"];
        "0x00003c36" -> "0x00003c40" [color="#3a96dd"];
        "0x00003c40" -> "0x00003849" [color="#3a96dd"];
        "0x00003c50" -> "0x00004395" [color="#13a10e"];
        "0x00003c50" -> "0x00003c61" [color="#c50f1f"];
        "0x00003c61" -> "0x00003910" [color="#3a96dd"];
        "0x00003c70" -> "0x000037e0" [color="#3a96dd"];
        "0x00003c88" -> "0x000044d2" [color="#13a10e"];
        "0x00003c88" -> "0x00003ca3" [color="#c50f1f"];
        "0x00003ca3" -> "0x00003ad5" [color="#3a96dd"];
        "0x00003cc0" -> "0x00003aa4" [color="#13a10e"];
        "0x00003cc0" -> "0x00003ce7" [color="#c50f1f"];
        "0x00003ce7" -> "0x00003cfa" [color="#13a10e"];
        "0x00003ce7" -> "0x00003cec" [color="#c50f1f"];
        "0x00003cec" -> "0x00003aca" [color="#13a10e"];
        "0x00003cec" -> "0x00003cfa" [color="#c50f1f"];
        "0x00003cfa" -> "0x00003d30" [color="#3a96dd"];
        "0x00003d30" -> "0x000039e1" [color="#13a10e"];
        "0x00003d30" -> "0x00003d49" [color="#c50f1f"];
        "0x00003d49" -> "0x00003d7c" [color="#3a96dd"];
        "0x00003d7c" -> "0x00003d7f" [color="#3a96dd"];
        "0x00003d7f" -> "0x0000367c" [color="#3a96dd"];
        "0x00003d93" -> "0x00003760" [color="#3a96dd"];
        "0x00003dca" -> "0x0000336c" [color="#3a96dd"];
        "0x00003dea" -> "0x00004180" [color="#13a10e"];
        "0x00003dea" -> "0x00003df3" [color="#c50f1f"];
        "0x00003df3" -> "0x0000336c" [color="#3a96dd"];
        "0x00003e02" -> "0x000036de" [color="#3a96dd"];
        "0x00003e14" -> "0x000036fd" [color="#3a96dd"];
        "0x00003e34" -> "0x0000336c" [color="#13a10e"];
        "0x00003e34" -> "0x00003e40" [color="#c50f1f"];
        "0x00003e40" -> "0x00003ea9" [color="#13a10e"];
        "0x00003e40" -> "0x00003e47" [color="#c50f1f"];
        "0x00003e47" -> "0x00003e4b" [color="#3a96dd"];
        "0x00003e4b" -> "0x00003e89" [color="#3a96dd"];
        "0x00003e5a" -> "0x00003e71" [color="#13a10e"];
        "0x00003e5a" -> "0x00003e61" [color="#c50f1f"];
        "0x00003e61" -> "0x00003e71" [color="#3a96dd"];
        "0x00003e71" -> "0x0000336c" [color="#13a10e"];
        "0x00003e71" -> "0x00003e89" [color="#c50f1f"];
        "0x00003e89" -> "0x00003e5a" [color="#13a10e"];
        "0x00003e89" -> "0x00003e8e" [color="#c50f1f"];
        "0x00003e8e" -> "0x00003e5a" [color="#13a10e"];
        "0x00003e8e" -> "0x00003e97" [color="#c50f1f"];
        "0x00003e97" -> "0x00003e5a" [color="#3a96dd"];
        "0x00003ea9" -> "0x00003e4b" [color="#3a96dd"];
        "0x00003eb0" -> "0x000036fd" [color="#13a10e"];
        "0x00003eb0" -> "0x00003ed6" [color="#c50f1f"];
        "0x00003ed6" -> "0x00003f09" [color="#3a96dd"];
        "0x00003f09" -> "0x00003f80" [color="#13a10e"];
        "0x00003f09" -> "0x00003f18" [color="#c50f1f"];
        "0x00003f18" -> "0x00003f32" [color="#13a10e"];
        "0x00003f18" -> "0x00003f2d" [color="#c50f1f"];
        "0x00003f2d" -> "0x00003f65" [color="#13a10e"];
        "0x00003f2d" -> "0x00003f32" [color="#c50f1f"];
        "0x00003f32" -> "0x00003f8b" [color="#13a10e"];
        "0x00003f32" -> "0x00003f48" [color="#c50f1f"];
        "0x00003f48" -> "0x00003f65" [color="#13a10e"];
        "0x00003f48" -> "0x00003f4d" [color="#c50f1f"];
        "0x00003f4d" -> "0x00003f8b" [color="#13a10e"];
        "0x00003f4d" -> "0x00003f5e" [color="#c50f1f"];
        "0x00003f5e" -> "0x00003f65" [color="#3a96dd"];
        "0x00003f65" -> "0x000034ff" [color="#13a10e"];
        "0x00003f65" -> "0x00003f80" [color="#c50f1f"];
        "0x00003f80" -> "0x00003f8b" [color="#3a96dd"];
        "0x00003f8b" -> "0x00003fd0" [color="#3a96dd"];
        "0x00003fd0" -> "0x0000459a" [color="#13a10e"];
        "0x00003fd0" -> "0x00003fe3" [color="#c50f1f"];
        "0x00003fe3" -> "0x0000459a" [color="#13a10e"];
        "0x00003fe3" -> "0x00003fec" [color="#c50f1f"];
        "0x00003fec" -> "0x00004015" [color="#13a10e"];
        "0x00003fec" -> "0x0000400e" [color="#c50f1f"];
        "0x0000400e" -> "0x00004015" [color="#3a96dd"];
        "0x00004015" -> "0x0000414f" [color="#13a10e"];
        "0x00004015" -> "0x0000401e" [color="#c50f1f"];
        "0x0000401e" -> "0x0000403d" [color="#3a96dd"];
        "0x0000403d" -> "0x0000336c" [color="#13a10e"];
        "0x0000403d" -> "0x00004046" [color="#c50f1f"];
        "0x00004046" -> "0x000040ba" [color="#13a10e"];
        "0x00004046" -> "0x0000404c" [color="#c50f1f"];
        "0x0000404c" -> "0x000040b1" [color="#13a10e"];
        "0x0000404c" -> "0x0000406e" [color="#c50f1f"];
        "0x0000406e" -> "0x00004082" [color="#13a10e"];
        "0x0000406e" -> "0x0000407d" [color="#c50f1f"];
        "0x0000407d" -> "0x000040b1" [color="#13a10e"];
        "0x0000407d" -> "0x00004082" [color="#c50f1f"];
        "0x00004082" -> "0x000040b1" [color="#3a96dd"];
        "0x000040b1" -> "0x0000403d" [color="#3a96dd"];
        "0x000040ba" -> "0x00004683" [color="#13a10e"];
        "0x000040ba" -> "0x000040d1" [color="#c50f1f"];
        "0x000040d1" -> "0x0000404c" [color="#13a10e"];
        "0x000040d1" -> "0x000040da" [color="#c50f1f"];
        "0x000040da" -> "0x0000336c" [color="#3a96dd"];
        "0x000040df" -> "0x00003611" [color="#3a96dd"];
        "0x000040f6" -> "0x00004112" [color="#3a96dd"];
        "0x00004112" -> "0x00004112" [color="#13a10e"];
        "0x00004112" -> "0x0000414a" [color="#c50f1f"];
        "0x0000414a" -> "0x00003982" [color="#3a96dd"];
        "0x0000414f" -> "0x00004339" [color="#13a10e"];
        "0x0000414f" -> "0x0000416e" [color="#c50f1f"];
        "0x0000416e" -> "0x0000403d" [color="#3a96dd"];
        "0x00004180" -> "0x00003df3" [color="#3a96dd"];
        "0x0000419b" -> "0x00003611" [color="#13a10e"];
        "0x0000419b" -> "0x000041be" [color="#c50f1f"];
        "0x000041be" -> "0x000041f1" [color="#3a96dd"];
        "0x000041f1" -> "0x00003646" [color="#13a10e"];
        "0x000041f1" -> "0x00004222" [color="#c50f1f"];
        "0x00004222" -> "0x00004255" [color="#3a96dd"];
        "0x00004255" -> "0x0000362d" [color="#3a96dd"];
        "0x00004260" -> "0x00003d7f" [color="#3a96dd"];
        "0x0000426b" -> "0x00004270" [color="#3a96dd"];
        "0x00004270" -> "0x00004298" [color="#13a10e"];
        "0x00004270" -> "0x00004281" [color="#c50f1f"];
        "0x00004281" -> "0x0000336c" [color="#3a96dd"];
        "0x00004286" -> "0x00004298" [color="#3a96dd"];
        "0x00004298" -> "0x00004286" [color="#13a10e"];
        "0x00004298" -> "0x0000429f" [color="#c50f1f"];
        "0x0000429f" -> "0x0000336c" [color="#3a96dd"];
        "0x000042a4" -> "0x000042bb" [color="#3a96dd"];
        "0x000042bb" -> "0x000042c5" [color="#3a96dd"];
        "0x000042c5" -> "0x000042dd" [color="#3a96dd"];
        "0x000042dd" -> "0x00004301" [color="#3a96dd"];
        "0x00004301" -> "0x000042bb" [color="#13a10e"];
        "0x00004301" -> "0x00004326" [color="#c50f1f"];
        "0x00004326" -> "0x000042c5" [color="#3a96dd"];
        "0x00004339" -> "0x0000436c" [color="#3a96dd"];
        "0x0000436c" -> "0x00004387" [color="#13a10e"];
        "0x0000436c" -> "0x00004373" [color="#c50f1f"];
        "0x00004373" -> "0x00003910" [color="#13a10e"];
        "0x00004373" -> "0x0000437c" [color="#c50f1f"];
        "0x0000437c" -> "0x00003955" [color="#13a10e"];
        "0x0000437c" -> "0x00004387" [color="#c50f1f"];
        "0x00004387" -> "0x00003c61" [color="#13a10e"];
        "0x00004387" -> "0x00004390" [color="#c50f1f"];
        "0x00004390" -> "0x00003955" [color="#3a96dd"];
        "0x00004395" -> "0x0000387b" [color="#3a96dd"];
        "0x000043a4" -> "0x000043d7" [color="#3a96dd"];
        "0x000043d7" -> "0x0000440a" [color="#3a96dd"];
        "0x0000440a" -> "0x0000443d" [color="#3a96dd"];
        "0x0000443d" -> "0x00004470" [color="#3a96dd"];
        "0x00004470" -> "0x000042bb" [color="#3a96dd"];
        "0x0000448e" -> "0x000044d2" [color="#3a96dd"];
        "0x000044d2" -> "0x000044fe" [color="#3a96dd"];
        "0x000044fe" -> "0x00004531" [color="#3a96dd"];
        "0x00004531" -> "0x00003f8b" [color="#13a10e"];
        "0x00004531" -> "0x0000453f" [color="#c50f1f"];
        "0x0000453f" -> "0x00003f8b" [color="#3a96dd"];
        "0x0000454a" -> "0x00003955" [color="#3a96dd"];
        "0x00004557" -> "0x0000459a" [color="#3a96dd"];
        "0x000045b9" -> "0x000045fd" [color="#3a96dd"];
        "0x000045fd" -> "0x00003587" [color="#3a96dd"];
        "0x0000460e" -> "0x00004640" [color="#3a96dd"];
        "0x00004640" -> "0x00004664" [color="#3a96dd"];
        "0x00004683" -> "0x000046c0" [color="#3a96dd"];
}
