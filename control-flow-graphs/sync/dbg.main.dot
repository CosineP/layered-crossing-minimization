digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000026a0" [URL="dbg.main/0x000026a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2a68\l928: int dbg.main (int argc, char **argv);\l; var int64_t var_ch @ rsp+0x1c\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000026a0      endbr64                                                ; int main(int argc,char ** argv);\l0x000026a4      push r15\l0x000026a6      lea r15, obj.long_options                              ; 0xab40 ; \"9q\"\l0x000026ad      push r14\l0x000026af      lea r14, [0x00007101]                                  ; \"df\"\l0x000026b6      push r13\l0x000026b8      xor r13d, r13d\l0x000026bb      push r12\l0x000026bd      lea r12, [0x000070a1]                                  ; \"coreutils\"\l0x000026c4      push rbp\l0x000026c5      mov ebp, edi                                           ; argc\l0x000026c7      push rbx\l0x000026c8      mov rbx, rsi                                           ; argv\l0x000026cb      sub rsp, 0x18\l0x000026cf      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000026d2      call dbg.set_program_name\l0x000026d7      lea rsi, [0x00007026]                                  ; const char *locale\l0x000026de      mov edi, 6                                             ; int category\l0x000026e3      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000026e8      lea rsi, str._usr_local_share_locale                   ; 0x70ca ; \"/usr/local/share/locale\" ; char *dirname\l0x000026ef      mov rdi, r12                                           ; char *domainname\l0x000026f2      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000026f7      mov rdi, r12                                           ; char *domainname\l0x000026fa      xor r12d, r12d\l0x000026fd      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002702      lea rdi, [dbg.close_stdout]                            ; 0x2ef0 ; func function\l0x00002709      call sym.atexit                                        ; int atexit(func function)\l"]
	"0x0000270e" [URL="dbg.main/0x0000270e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x278f, 0x27b6\l0x0000270e      xor r8d, r8d\l0x00002711      mov rcx, r15\l0x00002714      mov rdx, r14\l0x00002717      mov rsi, rbx\l0x0000271a      mov edi, ebp\l0x0000271c      call sym.imp.getopt_long\l0x00002721      cmp eax, 0xffffffff\l0x00002724      je 0x27bb\l"]
	"0x0000272a" [URL="dbg.main/0x0000272a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000272a      cmp eax, 0x64\l0x0000272d      je 0x27b0\l"]
	"0x00002733" [URL="dbg.main/0x00002733", fillcolor="white",color="#767676", fontname="Courier",label="0x00002733      jg 0x2780\l"]
	"0x00002735" [URL="dbg.main/0x00002735", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002735      cmp eax, 0xffffff7d                                    ; 4294967165\l0x0000273a      jne 0x2794\l"]
	"0x0000273c" [URL="dbg.main/0x0000273c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000273c      sub rsp, 8\l0x00002740      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xb088:8]=0 ; func main\l0x00002747      xor eax, eax\l0x00002749      mov rcx, qword [obj.Version]                           ; [0xb010:8]=0x742c \"9.0\" ; \",t\" ; func init\l0x00002750      push 0\l0x00002752      lea r9, str.Giuseppe_Scrivano                          ; 0x70e2 ; \"Giuseppe Scrivano\" ; int64_t arg_c0h\l0x00002759      lea r8, str.Jim_Meyering                               ; 0x70f4 ; \"Jim Meyering\" ; int64_t arg6\l0x00002760      lea rdx, str.GNU_coreutils                             ; 0x709d ; \"GNU coreutils\" ; int64_t arg3\l0x00002767      lea rsi, str.sync                                      ; 0x7004 ; \"sync\" ; int64_t arg2\l0x0000276e      call dbg.version_etc\l0x00002773      xor edi, edi                                           ; int status\l0x00002775      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002780" [URL="dbg.main/0x00002780", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2733\l0x00002780      cmp eax, 0x66\l0x00002783      jne 0x2a1f\l"]
	"0x00002789" [URL="dbg.main/0x00002789", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002789      mov r12d, 1\l0x0000278f      jmp 0x270e\l"]
	"0x00002794" [URL="dbg.main/0x00002794", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x273a\l0x00002794      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002799      jne 0x2a1f\l"]
	"0x0000279f" [URL="dbg.main/0x0000279f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000279f      xor edi, edi                                           ; int64_t arg1\l0x000027a1      call dbg.usage\l"]
	"0x000027b0" [URL="dbg.main/0x000027b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x272d\l0x000027b0      mov r13d, 1\l0x000027b6      jmp 0x270e\l"]
	"0x000027bb" [URL="dbg.main/0x000027bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2724\l0x000027bb      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=1\l0x000027c1      test r13b, r13b\l0x000027c4      je 0x27ef\l"]
	"0x000027c6" [URL="dbg.main/0x000027c6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027c6      test r12b, r12b\l0x000027c9      je 0x27ef\l"]
	"0x000027cb" [URL="dbg.main/0x000027cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027cb      mov edx, 5\l0x000027d0      lea rsi, str.cannot_specify_both___data_and___file_system ; 0x73b0 ; \"cannot specify both --data and --file-system\"\l0x000027d7      xor edi, edi\l0x000027d9      call sym.imp.dcgettext\l0x000027de      xor esi, esi                                           ; int errname\l0x000027e0      mov edi, 1                                             ; int status\l0x000027e5      mov rdx, rax                                           ; char *format\l0x000027e8      xor eax, eax\l0x000027ea      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x000027ef" [URL="dbg.main/0x000027ef", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x27c4, 0x27c9\l0x000027ef      cmp eax, ebp\l0x000027f1      setge dl\l0x000027f4      test dl, r13b\l0x000027f7      jne 0x2a29\l"]
	"0x000027fd" [URL="dbg.main/0x000027fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027fd      cmp eax, ebp\l0x000027ff      jge 0x29d6\l"]
	"0x00002805" [URL="dbg.main/0x00002805", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; DATA XREF from dbg.version_etc_arn @ 0x5394\l0x00002805      mov dword [var_ch], 2\l0x0000280d      test r12b, r12b\l0x00002810      je 0x29f8\l"]
	"0x00002816" [URL="dbg.main/0x00002816", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a00\l0x00002816      mov r13d, 1\l0x0000281c      jmp 0x28ab\l"]
	"0x00002821" [URL="dbg.main/0x00002821", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28c5, 0x28e7\l0x00002821      xor eax, eax\l0x00002823      mov esi, 3                                             ; signed int arg2\l0x00002828      mov edi, r15d                                          ; int64_t arg1\l0x0000282b      call dbg.rpl_fcntl\l0x00002830      cmp eax, 0xffffffff\l0x00002833      je 0x292a\l"]
	"0x00002839" [URL="dbg.main/0x00002839", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002839      and ah, 0xf7\l0x0000283c      mov esi, 4                                             ; signed int arg2\l0x00002841      mov edi, r15d                                          ; int64_t arg1\l0x00002844      mov edx, eax                                           ; int64_t arg3\l0x00002846      xor eax, eax\l0x00002848      call dbg.rpl_fcntl\l0x0000284d      test eax, eax\l0x0000284f      js 0x292a\l"]
	"0x00002855" [URL="dbg.main/0x00002855", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002855      mov eax, dword [var_ch]\l0x00002859      cmp eax, 1\l0x0000285c      je 0x2a05\l"]
	"0x00002862" [URL="dbg.main/0x00002862", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002862      cmp eax, 2\l0x00002865      jne 0x2a12\l"]
	"0x0000286b" [URL="dbg.main/0x0000286b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000286b      mov edi, r15d\l0x0000286e      call sym.imp.syncfs\l"]
	"0x00002873" [URL="dbg.main/0x00002873", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a0d, 0x2a1a\l0x00002873      mov r14d, 1\l0x00002879      test eax, eax\l0x0000287b      js 0x29b4\l"]
	"0x00002881" [URL="dbg.main/0x00002881", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x296b\l0x00002881      mov edi, r15d                                          ; int fildes\l0x00002884      call sym.imp.close                                     ; int close(int fildes)\l0x00002889      test eax, eax\l0x0000288b      js 0x2970\l"]
	"0x00002891" [URL="dbg.main/0x00002891", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2925, 0x29af\l0x00002891      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=1\l0x00002897      and r13d, r14d\l0x0000289a      add eax, 1\l0x0000289d      mov dword [obj.optind], eax                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xb090:4]=1\l0x000028a3      cmp eax, ebp\l0x000028a5      jge 0x29e1\l"]
	"0x000028ab" [URL="dbg.main/0x000028ab", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x281c\l0x000028ab      cdqe\l0x000028ad      mov esi, 0x800                                         ; int oflag\l0x000028b2      mov r12, qword [rbx + rax*8]\l0x000028b6      xor eax, eax\l0x000028b8      mov rdi, r12                                           ; const char *path\l0x000028bb      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x000028c0      mov r15d, eax\l0x000028c3      test eax, eax\l0x000028c5      jns 0x2821\l"]
	"0x000028cb" [URL="dbg.main/0x000028cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028cb      call sym.imp.__errno_location\l0x000028d0      mov esi, 0x801                                         ; int oflag\l0x000028d5      mov rdi, r12                                           ; const char *path\l0x000028d8      mov r14d, dword [rax]\l0x000028db      xor eax, eax\l0x000028dd      call sym.imp.open                                      ; int open(const char *path, int oflag)\l0x000028e2      mov r15d, eax\l0x000028e5      test eax, eax\l0x000028e7      jns 0x2821\l"]
	"0x000028ed" [URL="dbg.main/0x000028ed", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028ed      mov rsi, r12                                           ; int64_t arg2\l0x000028f0      mov edi, 4                                             ; int64_t arg1\l0x000028f5      call sym.quotearg_style\l0x000028fa      mov edx, 5\l0x000028ff      lea rsi, str.error_opening__s                          ; 0x7104 ; \"error opening %s\"\l0x00002906      xor edi, edi\l0x00002908      mov r12, rax\l0x0000290b      call sym.imp.dcgettext\l0x00002910      mov esi, r14d                                          ; int errname\l0x00002913      mov rcx, r12\l0x00002916      xor edi, edi                                           ; int status\l0x00002918      mov rdx, rax                                           ; char *format\l0x0000291b      xor eax, eax\l0x0000291d      xor r14d, r14d\l0x00002920      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002925      jmp 0x2891\l"]
	"0x0000292a" [URL="dbg.main/0x0000292a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2833, 0x284f\l0x0000292a      mov rsi, r12                                           ; int64_t arg2\l0x0000292d      mov edi, 4                                             ; int64_t arg1\l0x00002932      call sym.quotearg_style\l0x00002937      mov edx, 5\l0x0000293c      lea rsi, str.couldnt_reset_non_blocking_mode__s        ; 0x7408 ; \"couldn't reset non-blocking mode %s\"\l0x00002943      mov qword [rsp], rax\l"]
	"0x00002947" [URL="dbg.main/0x00002947", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29d1\l0x00002947      xor edi, edi\l0x00002949      call sym.imp.dcgettext\l0x0000294e      mov r14, rax\l0x00002951      call sym.imp.__errno_location\l0x00002956      mov rcx, qword [rsp]\l0x0000295a      mov rdx, r14                                           ; char *format\l0x0000295d      xor edi, edi                                           ; int status\l0x0000295f      mov esi, dword [rax]                                   ; int errname\l0x00002961      xor eax, eax\l0x00002963      xor r14d, r14d\l0x00002966      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000296b      jmp 0x2881\l"]
	"0x00002970" [URL="dbg.main/0x00002970", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x288b\l0x00002970      mov rsi, r12                                           ; int64_t arg2\l0x00002973      mov edi, 4                                             ; int64_t arg1\l0x00002978      call sym.quotearg_style\l0x0000297d      mov edx, 5\l0x00002982      lea rsi, str.failed_to_close__s                        ; 0x7126 ; \"failed to close %s\"\l0x00002989      xor edi, edi\l0x0000298b      mov r14, rax\l0x0000298e      call sym.imp.dcgettext\l0x00002993      mov r12, rax\l0x00002996      call sym.imp.__errno_location\l0x0000299b      mov rcx, r14\l0x0000299e      mov rdx, r12                                           ; char *format\l0x000029a1      xor edi, edi                                           ; int status\l0x000029a3      mov esi, dword [rax]                                   ; int errname\l0x000029a5      xor eax, eax\l0x000029a7      xor r14d, r14d\l0x000029aa      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000029af      jmp 0x2891\l"]
	"0x000029b4" [URL="dbg.main/0x000029b4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x287b\l0x000029b4      mov rsi, r12                                           ; int64_t arg2\l0x000029b7      mov edi, 4                                             ; int64_t arg1\l0x000029bc      call sym.quotearg_style\l0x000029c1      mov edx, 5\l0x000029c6      lea rsi, str.error_syncing__s                          ; 0x7115 ; \"error syncing %s\"\l0x000029cd      mov qword [rsp], rax\l0x000029d1      jmp 0x2947\l"]
	"0x000029d6" [URL="dbg.main/0x000029d6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27ff\l0x000029d6      call sym.imp.sync\l0x000029db      mov r13d, 1\l"]
	"0x000029e1" [URL="dbg.main/0x000029e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28a5\l0x000029e1      add rsp, 0x18\l0x000029e5      xor r13d, 1\l0x000029e9      pop rbx\l0x000029ea      movzx eax, r13b\l0x000029ee      pop rbp\l0x000029ef      pop r12\l0x000029f1      pop r13\l0x000029f3      pop r14\l0x000029f5      pop r15\l0x000029f7      ret\l"]
	"0x000029f8" [URL="dbg.main/0x000029f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2810\l0x000029f8      movzx ecx, r13b\l0x000029fc      mov dword [var_ch], ecx\l0x00002a00      jmp 0x2816\l"]
	"0x00002a05" [URL="dbg.main/0x00002a05", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x285c\l0x00002a05      mov edi, r15d\l0x00002a08      call sym.imp.fdatasync\l0x00002a0d      jmp 0x2873\l"]
	"0x00002a12" [URL="dbg.main/0x00002a12", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2865\l0x00002a12      mov edi, r15d\l0x00002a15      call sym.imp.fsync\l0x00002a1a      jmp 0x2873\l"]
	"0x00002a1f" [URL="dbg.main/0x00002a1f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2783, 0x2799\l0x00002a1f      mov edi, 1                                             ; int64_t arg1\l0x00002a24      call dbg.usage\l"]
	"0x00002a29" [URL="dbg.main/0x00002a29", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27f7\l0x00002a29      mov edx, 5\l0x00002a2e      lea rsi, str.__data_needs_at_least_one_argument        ; 0x73e0 ; \"--data needs at least one argument\"\l0x00002a35      xor edi, edi\l0x00002a37      call sym.imp.dcgettext\l0x00002a3c      xor esi, esi                                           ; int errname\l0x00002a3e      mov edi, 1                                             ; int status\l0x00002a43      mov rdx, rax                                           ; char *format\l0x00002a46      xor eax, eax\l0x00002a48      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002a4d      nop dword [rax]\l"]
        "0x000026a0" -> "0x0000270e" [color="#3a96dd"];
        "0x0000270e" -> "0x000027bb" [color="#13a10e"];
        "0x0000270e" -> "0x0000272a" [color="#c50f1f"];
        "0x0000272a" -> "0x000027b0" [color="#13a10e"];
        "0x0000272a" -> "0x00002733" [color="#c50f1f"];
        "0x00002733" -> "0x00002780" [color="#13a10e"];
        "0x00002733" -> "0x00002735" [color="#c50f1f"];
        "0x00002735" -> "0x00002794" [color="#13a10e"];
        "0x00002735" -> "0x0000273c" [color="#c50f1f"];
        "0x00002780" -> "0x00002a1f" [color="#13a10e"];
        "0x00002780" -> "0x00002789" [color="#c50f1f"];
        "0x00002789" -> "0x0000270e" [color="#3a96dd"];
        "0x00002794" -> "0x00002a1f" [color="#13a10e"];
        "0x00002794" -> "0x0000279f" [color="#c50f1f"];
        "0x000027b0" -> "0x0000270e" [color="#3a96dd"];
        "0x000027bb" -> "0x000027ef" [color="#13a10e"];
        "0x000027bb" -> "0x000027c6" [color="#c50f1f"];
        "0x000027c6" -> "0x000027ef" [color="#13a10e"];
        "0x000027c6" -> "0x000027cb" [color="#c50f1f"];
        "0x000027cb" -> "0x000027ef" [color="#3a96dd"];
        "0x000027ef" -> "0x00002a29" [color="#13a10e"];
        "0x000027ef" -> "0x000027fd" [color="#c50f1f"];
        "0x000027fd" -> "0x000029d6" [color="#13a10e"];
        "0x000027fd" -> "0x00002805" [color="#c50f1f"];
        "0x00002805" -> "0x000029f8" [color="#13a10e"];
        "0x00002805" -> "0x00002816" [color="#c50f1f"];
        "0x00002816" -> "0x000028ab" [color="#3a96dd"];
        "0x00002821" -> "0x0000292a" [color="#13a10e"];
        "0x00002821" -> "0x00002839" [color="#c50f1f"];
        "0x00002839" -> "0x0000292a" [color="#13a10e"];
        "0x00002839" -> "0x00002855" [color="#c50f1f"];
        "0x00002855" -> "0x00002a05" [color="#13a10e"];
        "0x00002855" -> "0x00002862" [color="#c50f1f"];
        "0x00002862" -> "0x00002a12" [color="#13a10e"];
        "0x00002862" -> "0x0000286b" [color="#c50f1f"];
        "0x0000286b" -> "0x00002873" [color="#3a96dd"];
        "0x00002873" -> "0x000029b4" [color="#13a10e"];
        "0x00002873" -> "0x00002881" [color="#c50f1f"];
        "0x00002881" -> "0x00002970" [color="#13a10e"];
        "0x00002881" -> "0x00002891" [color="#c50f1f"];
        "0x00002891" -> "0x000029e1" [color="#13a10e"];
        "0x00002891" -> "0x000028ab" [color="#c50f1f"];
        "0x000028ab" -> "0x00002821" [color="#13a10e"];
        "0x000028ab" -> "0x000028cb" [color="#c50f1f"];
        "0x000028cb" -> "0x00002821" [color="#13a10e"];
        "0x000028cb" -> "0x000028ed" [color="#c50f1f"];
        "0x000028ed" -> "0x00002891" [color="#3a96dd"];
        "0x0000292a" -> "0x00002947" [color="#3a96dd"];
        "0x00002947" -> "0x00002881" [color="#3a96dd"];
        "0x00002970" -> "0x00002891" [color="#3a96dd"];
        "0x000029b4" -> "0x00002947" [color="#3a96dd"];
        "0x000029d6" -> "0x000029e1" [color="#3a96dd"];
        "0x000029f8" -> "0x00002816" [color="#3a96dd"];
        "0x00002a05" -> "0x00002873" [color="#3a96dd"];
        "0x00002a12" -> "0x00002873" [color="#3a96dd"];
        "0x00002a1f" -> "0x00002a29" [color="#3a96dd"];
}
