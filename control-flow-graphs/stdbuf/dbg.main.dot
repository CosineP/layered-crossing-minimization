digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002770" [URL="dbg.main/0x00002770", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2e98\l1793: int dbg.main (int argc, char **argv);\l; var char *var @ rbp-0x108\l; var char *LD_PRELOAD @ rbp-0x100\l; var char *libstdbuf @ rbp-0xf8\l; var char const * const[3] const search_path @ rbp-0xf0\l; var stat sb @ rbp-0xd0\l; var int64_t var_8h @ rsp+0x8\l; var int64_t var_18h @ rsp+0x18\l; var int64_t var_20h @ rsp+0x20\l; var void *ptr @ rsp+0x28\l; var int64_t var_30h @ rsp+0x30\l; var int64_t var_38h @ rsp+0x38\l; var int64_t var_40h @ rsp+0x40\l; var int64_t var_50h @ rsp+0x50\l; var int64_t var_e8h @ rsp+0xe8\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002770      endbr64                                                ; int main(int argc,char ** argv);\l0x00002774      push r15\l0x00002776      lea r15, obj.longopts                                  ; 0xdac0\l0x0000277d      push r14\l0x0000277f      mov r14d, 0x411\l0x00002785      push r13\l0x00002787      lea r13, obj.stdbuf                                    ; 0xe0e0\l0x0000278e      push r12\l0x00002790      lea r12, [0x0000a0a2]                                  ; \"coreutils\"\l0x00002797      push rbp\l0x00002798      mov ebp, edi                                           ; argc\l0x0000279a      push rbx\l0x0000279b      mov rbx, rsi                                           ; argv\l0x0000279e      sub rsp, 0xf8\l0x000027a5      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000027a8      mov rax, qword fs:[0x28]\l0x000027b1      mov qword [var_e8h], rax\l0x000027b9      xor eax, eax\l0x000027bb      call dbg.set_program_name\l0x000027c0      lea rsi, [0x0000ad21]                                  ; const char *locale\l0x000027c7      mov edi, 6                                             ; int category\l0x000027cc      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x000027d1      lea rsi, str._usr_local_share_locale                   ; 0xa0cb ; \"/usr/local/share/locale\" ; char *dirname\l0x000027d8      mov rdi, r12                                           ; char *domainname\l0x000027db      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000027e0      mov rdi, r12                                           ; char *domainname\l0x000027e3      lea r12, str.i:o:e:                                    ; 0xa119 ; \"+i:o:e:\"\l0x000027ea      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000027ef      lea rdi, [dbg.close_stdout]                            ; 0x33b0 ; func function\l0x000027f6      mov dword [obj.exit_failure], 0x7d                     ; '}'\l                                                                       ; [0xe018:4]=125 ; \"}\"\l0x00002800      call sym.atexit                                        ; int atexit(func function)\l"]
	"0x00002805" [URL="dbg.main/0x00002805", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2928, 0x2949\l0x00002805      xor r8d, r8d\l0x00002808      mov rcx, r15\l0x0000280b      mov rdx, r12\l0x0000280e      mov rsi, rbx\l0x00002811      mov edi, ebp\l0x00002813      call sym.imp.getopt_long\l0x00002818      cmp eax, 0xffffffff\l0x0000281b      je 0x2980\l"]
	"0x00002821" [URL="dbg.main/0x00002821", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002821      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002826      je 0x2ca6\l"]
	"0x0000282c" [URL="dbg.main/0x0000282c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000282c      cmp eax, 0xffffff7f                                    ; 4294967167\l0x00002831      jge 0x2870\l"]
	"0x00002833" [URL="dbg.main/0x00002833", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002833      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002838      jne 0x287e\l"]
	"0x0000283a" [URL="dbg.main/0x0000283a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000283a      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xe088:8]=0 ; int64_t arg1\l0x00002841      mov rcx, qword [obj.Version]                           ; [0xe010:8]=0xa891 \"9.0\" ; int64_t arg5\l0x00002848      xor eax, eax\l0x0000284a      xor r9d, r9d                                           ; int64_t arg_c0h\l0x0000284d      lea r8, str.Padraig_Brady                              ; 0xa10b ; \"Padraig Brady\" ; int64_t arg6\l0x00002854      lea rdx, str.GNU_coreutils                             ; 0xa09e ; \"GNU coreutils\" ; int64_t arg3\l0x0000285b      lea rsi, [global_program]                              ; 0xa004 ; \"stdbuf\" ; int64_t arg2\l0x00002862      call dbg.version_etc\l0x00002867      xor edi, edi                                           ; int status\l0x00002869      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002870" [URL="dbg.main/0x00002870", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2831\l0x00002870      lea edx, [rax - 0x65]\l0x00002873      cmp edx, 0xa\l0x00002876      ja 0x287e\l"]
	"0x00002878" [URL="dbg.main/0x00002878", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002878      bt r14, rdx\l0x0000287c      jb 0x2890\l"]
	"0x0000287e" [URL="dbg.main/0x0000287e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2838, 0x2876, 0x297b\l0x0000287e      mov edi, 0x7d                                          ; '}' ; int64_t arg1\l0x00002883      call dbg.usage\l"]
	"0x00002890" [URL="dbg.main/0x00002890", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x287c\l0x00002890      lea rcx, obj.CSWTCH.54                                 ; 0xa860\l0x00002897      movsxd r9, dword [rcx + rdx*4]\l0x0000289b      cmp r9d, 2                                             ; \"\\\"?\"\l0x0000289f      ja 0x2cff\l"]
	"0x000028a5" [URL="dbg.main/0x000028a5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028a5      lea rdx, [r9 + r9*2]\l0x000028a9      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xe0a0:8]=1\l0x000028b0      mov dword [r13 + rdx*8 + 8], eax\l"]
	"0x000028b5" [URL="dbg.main/0x000028b5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2940\l0x000028b5      movzx edx, byte [rdi]\l0x000028b8      cmp dl, 0xd                                            ; \"''''\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\l0x000028bb      jg 0x2930\l"]
	"0x000028bd" [URL="dbg.main/0x000028bd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028bd      cmp dl, 8                                              ; \"\\141\\''''\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\l0x000028c0      jg 0x2935\l"]
	"0x000028c2" [URL="dbg.main/0x000028c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2933\l0x000028c2      lea rdx, [r9 + r9*2]\l0x000028c6      mov qword [r13 + rdx*8 + 0x10], rdi\l0x000028cb      cmp eax, 0x69\l0x000028ce      je 0x2951\l"]
	"0x000028d4" [URL="dbg.main/0x000028d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2954\l0x000028d4      cmp byte [rdi], 0x4c\l0x000028d7      je 0x2945\l"]
	"0x000028d9" [URL="dbg.main/0x000028d9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x294f\l0x000028d9      lea rax, [ptr]\l0x000028de      lea r8, str.EGkKMPTYZ0                                 ; 0xa0f0 ; \"EGkKMPTYZ0\" ; int64_t arg5\l0x000028e5      mov edx, 0xa                                           ; uint32_t arg3\l0x000028ea      xor esi, esi                                           ; int64_t arg2\l0x000028ec      mov rcx, rax                                           ; int64_t arg4\l0x000028ef      mov qword [var_8h], r9\l0x000028f4      call dbg.xstrtoumax\l0x000028f9      mov dword [rsp], eax\l0x000028fc      call sym.imp.__errno_location\l0x00002901      mov edx, dword [rsp]\l0x00002904      mov r8, rax\l0x00002907      test edx, edx\l0x00002909      jne 0x2cad\l"]
	"0x0000290f" [URL="dbg.main/0x0000290f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000290f      mov r9, qword [var_8h]\l0x00002914      mov dword [rax], 0\l0x0000291a      mov rax, qword [ptr]\l0x0000291f      imul r9, r9, 0x18\l0x00002923      mov qword [r13 + r9], rax\l0x00002928      jmp 0x2805\l"]
	"0x00002930" [URL="dbg.main/0x00002930", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28bb\l0x00002930      cmp dl, 0x20                                           ; \"'-+ #I0\"\l0x00002933      jne 0x28c2\l"]
	"0x00002935" [URL="dbg.main/0x00002935", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28c0\l0x00002935      add rdi, 1\l0x00002939      mov qword [obj.optarg], rdi                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xe0a0:8]=1\l0x00002940      jmp 0x28b5\l"]
	"0x00002945" [URL="dbg.main/0x00002945", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28d7\l0x00002945      cmp byte [rdi + 1], 0\l0x00002949      je 0x2805\l"]
	"0x0000294f" [URL="dbg.main/0x0000294f", fillcolor="white",color="#767676", fontname="Courier",label="0x0000294f      jmp 0x28d9\l"]
	"0x00002951" [URL="dbg.main/0x00002951", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28ce\l0x00002951      cmp byte [rdi], 0x4c\l0x00002954      jne 0x28d4\l"]
	"0x0000295a" [URL="dbg.main/0x0000295a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000295a      mov edx, 5\l0x0000295f      lea rsi, str.line_buffering_stdin_is_meaningless       ; 0xa7d0 ; \"line buffering stdin is meaningless\"\l"]
	"0x00002966" [URL="dbg.main/0x00002966", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2d66, 0x2db3\l0x00002966      xor edi, edi\l0x00002968      call sym.imp.dcgettext\l0x0000296d      xor esi, esi                                           ; int errname\l0x0000296f      xor edi, edi                                           ; int status\l0x00002971      mov rdx, rax                                           ; char *format\l0x00002974      xor eax, eax\l0x00002976      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000297b      jmp 0x287e\l"]
	"0x00002980" [URL="dbg.main/0x00002980", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x281b\l0x00002980      movsxd rdx, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xe090:4]=0\l0x00002987      lea r14, obj.stdbuf                                    ; 0xe0e0\l0x0000298e      lea r12, str._STDBUF_                                  ; 0xa131 ; \"_STDBUF_\"\l0x00002995      lea r13, str._s_c_lu                                   ; 0xa141 ; \"%s%c=%lu\"\l0x0000299c      mov rax, rdx\l0x0000299f      lea r15, [rbx + rdx*8]\l0x000029a3      lea rbx, [r14 + 0x48]\l0x000029a7      xor edx, edx\l0x000029a9      cmp ebp, eax\l0x000029ab      jle 0x2d5a\l"]
	"0x000029b1" [URL="dbg.main/0x000029b1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a2c\l0x000029b1      mov rax, qword [r14 + 0x10]\l0x000029b5      test rax, rax\l0x000029b8      je 0x2a25\l"]
	"0x000029ba" [URL="dbg.main/0x000029ba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029ba      mov ecx, dword [r14 + 8]\l0x000029be      cmp byte [rax], 0x4c\l0x000029c1      lea edx, [rcx + 0x80]\l0x000029c7      je 0x2be6\l"]
	"0x000029cd" [URL="dbg.main/0x000029cd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029cd      mov r8, qword [r14]\l0x000029d0      cmp edx, 0x17f\l0x000029d6      ja 0x29f4\l"]
	"0x000029d8" [URL="dbg.main/0x000029d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029d8      mov qword [var_8h], r8\l0x000029dd      mov dword [rsp], ecx\l0x000029e0      call sym.imp.__ctype_toupper_loc\l0x000029e5      movsxd rcx, dword [rsp]\l0x000029e9      mov r8, qword [var_8h]\l0x000029ee      mov rax, qword [rax]\l0x000029f1      mov ecx, dword [rax + rcx*4]\l"]
	"0x000029f4" [URL="dbg.main/0x000029f4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29d6\l0x000029f4      lea rdi, [var_18h]                                     ; int64_t arg1\l0x000029f9      mov rdx, r12                                           ; int64_t arg3\l0x000029fc      mov rsi, r13                                           ; int64_t arg2\l0x000029ff      xor eax, eax\l0x00002a01      call dbg.rpl_asprintf\l"]
	"0x00002a06" [URL="dbg.main/0x00002a06", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c16\l0x00002a06      test eax, eax\l0x00002a08      js 0x2cfa\l"]
	"0x00002a0e" [URL="dbg.main/0x00002a0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a0e      mov rdi, qword [var_18h]\l0x00002a13      call sym.imp.putenv\l0x00002a18      test eax, eax\l0x00002a1a      jne 0x2d6b\l"]
	"0x00002a20" [URL="dbg.main/0x00002a20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a20      mov edx, 1\l"]
	"0x00002a25" [URL="dbg.main/0x00002a25", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29b8\l0x00002a25      add r14, 0x18\l0x00002a29      cmp rbx, r14\l0x00002a2c      jne 0x29b1\l"]
	"0x00002a2e" [URL="dbg.main/0x00002a2e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a2e      test dl, dl\l0x00002a30      je 0x2da7\l"]
	"0x00002a36" [URL="dbg.main/0x00002a36", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a36      mov r12, qword [obj.program_name]                      ; [0xe140:8]=4\l0x00002a3d      mov esi, 0x2f                                          ; '/' ; int c\l0x00002a42      mov rdi, r12                                           ; const char *s\l0x00002a45      call sym.imp.strchr                                    ; char *strchr(const char *s, int c)\l0x00002a4a      test rax, rax\l0x00002a4d      je 0x2c34\l"]
	"0x00002a53" [URL="dbg.main/0x00002a53", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a53      mov rdi, r12\l0x00002a56      call dbg.dir_name\l0x00002a5b      mov qword [obj.program_path], rax                      ; [0xe128:8]=0\l"]
	"0x00002a62" [URL="dbg.main/0x00002a62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2c6b, 0x2c84\l0x00002a62      lea rdi, str.LD_PRELOAD                                ; 0xa177 ; \"LD_PRELOAD\" ; const char *name\l0x00002a69      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x00002a6e      mov rdx, qword [obj.program_path]                      ; [0xe128:8]=0\l0x00002a75      mov qword [var_40h], 0\l0x00002a7e      mov qword [rsp], rax\l0x00002a82      lea rax, str._usr_local_libexec_coreutils              ; 0xa182 ; \"/usr/local/libexec/coreutils\"\l0x00002a89      cmp byte [rdx], 0\l0x00002a8c      mov qword [var_30h], rdx\l0x00002a91      mov qword [var_38h], rax\l0x00002a96      je 0x2c1b\l"]
	"0x00002a9c" [URL="dbg.main/0x00002a9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a9c      lea rax, [ptr]\l0x00002aa1      lea rbx, [var_30h]\l0x00002aa6      mov r12, rax\l0x00002aa9      lea rbp, str.libstdbuf.so                              ; 0xa19f ; \"libstdbuf.so\"\l0x00002ab0      lea r13, [var_50h]\l0x00002ab5      lea r14, str._s__s                                     ; 0xa1ac ; \"%s/%s\"\l0x00002abc      jmp 0x2ae3\l"]
	"0x00002ac0" [URL="dbg.main/0x00002ac0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b0a\l0x00002ac0      mov rdi, qword [ptr]                                   ; void *ptr\l0x00002ac5      add rbx, 8\l0x00002ac9      call sym.imp.free                                      ; void free(void *ptr)\l0x00002ace      mov rdx, qword [rbx]\l0x00002ad1      test rdx, rdx\l0x00002ad4      je 0x2d1e\l"]
	"0x00002ada" [URL="dbg.main/0x00002ada", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ada      cmp byte [rdx], 0\l0x00002add      je 0x2c22\l"]
	"0x00002ae3" [URL="dbg.main/0x00002ae3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2abc\l0x00002ae3      xor eax, eax\l0x00002ae5      mov rcx, rbp\l0x00002ae8      mov rsi, r14                                           ; int64_t arg2\l0x00002aeb      mov rdi, r12                                           ; int64_t arg1\l0x00002aee      call dbg.rpl_asprintf\l0x00002af3      test eax, eax\l0x00002af5      js 0x2cfa\l"]
	"0x00002afb" [URL="dbg.main/0x00002afb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002afb      mov rdi, qword [ptr]\l0x00002b00      mov rsi, r13\l0x00002b03      call sym.imp.stat\l0x00002b08      test eax, eax\l0x00002b0a      jne 0x2ac0\l"]
	"0x00002b0c" [URL="dbg.main/0x00002b0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c2f\l0x00002b0c      mov rcx, qword [rsp]\l0x00002b10      mov r8, qword [ptr]\l0x00002b15      lea rdi, [var_20h]\l0x00002b1a      test rcx, rcx\l0x00002b1d      je 0x2c89\l"]
	"0x00002b23" [URL="dbg.main/0x00002b23", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b23      lea rdx, str.LD_PRELOAD                                ; 0xa177 ; \"LD_PRELOAD\" ; int64_t arg3\l0x00002b2a      lea rsi, str._s_s:_s                                   ; 0xa1c4 ; \"%s=%s:%s\" ; int64_t arg2\l0x00002b31      xor eax, eax\l0x00002b33      call dbg.rpl_asprintf\l"]
	"0x00002b38" [URL="dbg.main/0x00002b38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ca1\l0x00002b38      test eax, eax\l0x00002b3a      js 0x2cfa\l"]
	"0x00002b40" [URL="dbg.main/0x00002b40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b40      mov rdi, qword [ptr]                                   ; void *ptr\l0x00002b45      call sym.imp.free                                      ; void free(void *ptr)\l0x00002b4a      mov rdi, qword [var_20h]\l0x00002b4f      call sym.imp.putenv\l0x00002b54      mov ebp, eax\l0x00002b56      call sym.imp.__errno_location\l0x00002b5b      mov rbx, rax\l0x00002b5e      test ebp, ebp\l0x00002b60      jne 0x2dbd\l"]
	"0x00002b66" [URL="dbg.main/0x00002b66", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b66      mov rdi, qword [obj.program_path]                      ; [0xe128:8]=0 ; void *ptr\l0x00002b6d      xor r12d, r12d\l0x00002b70      call sym.imp.free                                      ; void free(void *ptr)\l0x00002b75      mov rdi, qword [r15]\l0x00002b78      mov rsi, r15\l0x00002b7b      call sym.imp.execvp\l0x00002b80      mov rdi, qword [r15]                                   ; int64_t arg1\l0x00002b83      cmp dword [rbx], 2\l0x00002b86      sete r12b\l0x00002b8a      call dbg.quote\l0x00002b8f      xor edi, edi\l0x00002b91      mov edx, 5\l0x00002b96      add r12d, 0x7e\l0x00002b9a      lea rsi, str.failed_to_run_command__s                  ; 0xa1d3 ; \"failed to run command %s\"\l0x00002ba1      mov r13, rax\l0x00002ba4      call sym.imp.dcgettext\l0x00002ba9      mov esi, dword [rbx]                                   ; int errname\l0x00002bab      xor edi, edi                                           ; int status\l0x00002bad      mov rcx, r13\l0x00002bb0      mov rdx, rax                                           ; char *format\l0x00002bb3      xor eax, eax\l0x00002bb5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002bba      mov rax, qword [var_e8h]\l0x00002bc2      sub rax, qword fs:[0x28]\l0x00002bcb      jne 0x2db8\l"]
	"0x00002bd1" [URL="dbg.main/0x00002bd1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bd1      add rsp, 0xf8\l0x00002bd8      mov eax, r12d\l0x00002bdb      pop rbx\l0x00002bdc      pop rbp\l0x00002bdd      pop r12\l0x00002bdf      pop r13\l0x00002be1      pop r14\l0x00002be3      pop r15\l0x00002be5      ret\l"]
	"0x00002be6" [URL="dbg.main/0x00002be6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c7\l0x00002be6      cmp edx, 0x17f\l0x00002bec      ja 0x2c00\l"]
	"0x00002bee" [URL="dbg.main/0x00002bee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; DATA XREF from dbg.printf_parse @ 0x88ab\l0x00002bee      mov dword [rsp], ecx\l0x00002bf1      call sym.imp.__ctype_toupper_loc\l0x00002bf6      movsxd rcx, dword [rsp]\l0x00002bfa      mov rax, qword [rax]\l0x00002bfd      mov ecx, dword [rax + rcx*4]\l"]
	"0x00002c00" [URL="dbg.main/0x00002c00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bec\l0x00002c00      lea rdi, [var_18h]                                     ; int64_t arg1\l0x00002c05      mov rdx, r12                                           ; int64_t arg3\l0x00002c08      lea rsi, str._s_cL                                     ; 0xa13a ; \"%s%c=L\" ; int64_t arg2\l0x00002c0f      xor eax, eax\l0x00002c11      call dbg.rpl_asprintf\l0x00002c16      jmp 0x2a06\l"]
	"0x00002c1b" [URL="dbg.main/0x00002c1b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a96\l0x00002c1b      lea rbp, str.libstdbuf.so                              ; 0xa19f ; \"libstdbuf.so\"\l"]
	"0x00002c22" [URL="dbg.main/0x00002c22", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2add\l0x00002c22      mov rdi, rbp                                           ; int64_t arg1\l0x00002c25      call dbg.xstrdup\l0x00002c2a      mov qword [ptr], rax\l0x00002c2f      jmp 0x2b0c\l"]
	"0x00002c34" [URL="dbg.main/0x00002c34", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a4d\l0x00002c34      lea rdi, str._proc_self_exe                            ; 0xa14a ; \"/proc/self/exe\"\l0x00002c3b      call dbg.xreadlink\l0x00002c40      mov rbp, rax\l0x00002c43      test rax, rax\l0x00002c46      je 0x2df1\l"]
	"0x00002c4c" [URL="dbg.main/0x00002c4c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c4c      mov rdi, rax\l0x00002c4f      call dbg.dir_name\l0x00002c54      mov qword [obj.program_path], rax                      ; [0xe128:8]=0\l"]
	"0x00002c5b" [URL="dbg.main/0x00002c5b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e03, 0x2e40, 0x2e7b\l0x00002c5b      mov rdi, rbp                                           ; void *ptr\l0x00002c5e      call sym.imp.free                                      ; void free(void *ptr)\l0x00002c63      cmp qword [obj.program_path], 0                        ; [0xe128:8]=0\l0x00002c6b      jne 0x2a62\l"]
	"0x00002c71" [URL="dbg.main/0x00002c71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c71      lea rdi, str._usr_local_lib_coreutils                  ; 0xa15e ; \"/usr/local/lib/coreutils\" ; int64_t arg1\l0x00002c78      call dbg.xstrdup\l0x00002c7d      mov qword [obj.program_path], rax                      ; [0xe128:8]=0\l0x00002c84      jmp 0x2a62\l"]
	"0x00002c89" [URL="dbg.main/0x00002c89", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b1d\l0x00002c89      mov rcx, r8\l0x00002c8c      lea rdx, str.LD_PRELOAD                                ; 0xa177 ; \"LD_PRELOAD\" ; int64_t arg3\l0x00002c93      lea rsi, str._s_s                                      ; 0xa1cd ; \"%s=%s\" ; int64_t arg2\l0x00002c9a      xor eax, eax\l0x00002c9c      call dbg.rpl_asprintf\l0x00002ca1      jmp 0x2b38\l"]
	"0x00002ca6" [URL="dbg.main/0x00002ca6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2826\l0x00002ca6      xor edi, edi                                           ; int64_t arg1\l0x00002ca8      call dbg.usage\l"]
	"0x00002cad" [URL="dbg.main/0x00002cad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2909\l0x00002cad      sub edx, 1\l0x00002cb0      je 0x2d50\l"]
	"0x00002cb6" [URL="dbg.main/0x00002cb6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cb6      mov eax, dword [rax]\l"]
	"0x00002cb8" [URL="dbg.main/0x00002cb8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d55\l0x00002cb8      mov dword [r8], eax\l0x00002cbb      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xe0a0:8]=1 ; int64_t arg1\l0x00002cc2      mov qword [rsp], r8\l0x00002cc6      call dbg.quote\l0x00002ccb      mov edx, 5\l0x00002cd0      lea rsi, str.invalid_mode__s                           ; 0xa0fb ; \"invalid mode %s\"\l0x00002cd7      xor edi, edi\l0x00002cd9      mov r12, rax\l0x00002cdc      call sym.imp.dcgettext\l0x00002ce1      mov r8, qword [rsp]\l0x00002ce5      mov rcx, r12\l0x00002ce8      mov edi, 0x7d                                          ; '}' ; int status\l0x00002ced      mov rdx, rax                                           ; char *format\l0x00002cf0      xor eax, eax\l0x00002cf2      mov esi, dword [r8]                                    ; int errname\l0x00002cf5      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002cfa" [URL="dbg.main/0x00002cfa", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2a08, 0x2af5, 0x2b3a\l0x00002cfa      call dbg.xalloc_die\l"]
	"0x00002cff" [URL="dbg.main/0x00002cff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x289f\l0x00002cff      lea rcx, str.main                                      ; global___PRETTY_FUNCTION__.0\l                                                                       ; 0xa88c ; \"main\" ; const char *function\l0x00002d06      mov edx, 0x150                                         ; unsigned int line\l0x00002d0b      lea rsi, str.src_stdbuf.c                              ; 0xa0e3 ; \"src/stdbuf.c\" ; const char *file\l0x00002d12      lea rdi, str.0___opt_fileno__opt_fileno___ARRAY_CARDINALITY__stdbuf_ ; 0xa790 ; \"0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)\" ; const char *assertion\l0x00002d19      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x00002d1e" [URL="dbg.main/0x00002d1e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad4\l0x00002d1e      mov rdi, rbp                                           ; int64_t arg1\l0x00002d21      call dbg.quote\l0x00002d26      mov edx, 5\l0x00002d2b      lea rsi, str.failed_to_find__s                         ; 0xa1b2 ; \"failed to find %s\"\l0x00002d32      xor edi, edi\l0x00002d34      mov r12, rax\l0x00002d37      call sym.imp.dcgettext\l0x00002d3c      mov rcx, r12\l0x00002d3f      xor esi, esi                                           ; int errname\l0x00002d41      mov edi, 0x7d                                          ; '}' ; int status\l0x00002d46      mov rdx, rax                                           ; char *format\l0x00002d49      xor eax, eax\l0x00002d4b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002d50" [URL="dbg.main/0x00002d50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cb0\l0x00002d50      mov eax, 0x4b                                          ; 'K'\l0x00002d55      jmp 0x2cb8\l"]
	"0x00002d5a" [URL="dbg.main/0x00002d5a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29ab\l0x00002d5a      mov edx, 5\l0x00002d5f      lea rsi, str.missing_operand                           ; 0xa121 ; \"missing operand\"\l0x00002d66      jmp 0x2966\l"]
	"0x00002d6b" [URL="dbg.main/0x00002d6b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a1a\l0x00002d6b      mov rdi, qword [var_18h]                               ; int64_t arg1\l0x00002d70      call dbg.quote\l0x00002d75      mov edx, 5\l0x00002d7a      lea rsi, str.failed_to_update_the_environment_with__s  ; 0xa7f8 ; \"failed to update the environment with %s\"\l0x00002d81      xor edi, edi\l0x00002d83      mov r13, rax\l0x00002d86      call sym.imp.dcgettext\l0x00002d8b      mov r12, rax\l0x00002d8e      call sym.imp.__errno_location\l0x00002d93      mov rcx, r13\l0x00002d96      mov rdx, r12                                           ; char *format\l0x00002d99      mov edi, 0x7d                                          ; '}' ; int status\l0x00002d9e      mov esi, dword [rax]                                   ; int errname\l0x00002da0      xor eax, eax\l0x00002da2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002da7" [URL="dbg.main/0x00002da7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a30\l0x00002da7      mov edx, 5\l0x00002dac      lea rsi, str.you_must_specify_a_buffering_mode_option  ; 0xa828 ; \"you must specify a buffering mode option\"\l0x00002db3      jmp 0x2966\l"]
	"0x00002db8" [URL="dbg.main/0x00002db8", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bcb\l0x00002db8      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x00002dbd" [URL="dbg.main/0x00002dbd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b60\l0x00002dbd      mov rdi, qword [var_20h]                               ; int64_t arg1\l0x00002dc2      call dbg.quote\l0x00002dc7      mov edx, 5\l0x00002dcc      lea rsi, str.failed_to_update_the_environment_with__s  ; 0xa7f8 ; \"failed to update the environment with %s\"\l0x00002dd3      xor edi, edi\l0x00002dd5      mov r12, rax\l0x00002dd8      call sym.imp.dcgettext\l0x00002ddd      mov esi, dword [rbx]                                   ; int errname\l0x00002ddf      mov rcx, r12\l0x00002de2      mov edi, 0x7d                                          ; '}' ; int status\l0x00002de7      mov rdx, rax                                           ; char *format\l0x00002dea      xor eax, eax\l0x00002dec      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002df1" [URL="dbg.main/0x00002df1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c46\l0x00002df1      lea rdi, str.PATH                                      ; 0xa159 ; \"PATH\" ; const char *name\l0x00002df8      call sym.imp.getenv                                    ; char *getenv(const char *name)\l0x00002dfd      mov rbp, rax\l0x00002e00      test rax, rax\l0x00002e03      je 0x2c5b\l"]
	"0x00002e09" [URL="dbg.main/0x00002e09", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e09      mov rdi, rax                                           ; int64_t arg1\l0x00002e0c      lea rbx, [0x0000a11f]                                  ; \":\"\l0x00002e13      call dbg.xstrdup\l0x00002e18      mov rsi, rbx                                           ; const char *s2\l0x00002e1b      mov rdi, rax                                           ; char *s1\l0x00002e1e      mov rbp, rax\l0x00002e21      call sym.imp.strtok                                    ; char *strtok(char *s1, const char *s2)\l; DATA XREF from dbg.printf_fetchargs @ 0x8483\l0x00002e26      mov rdi, rax\l0x00002e29      jmp 0x2e3d\l"]
	"0x00002e2b" [URL="dbg.main/0x00002e2b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e65\l0x00002e2b      call sym.imp.free                                      ; void free(void *ptr)\l0x00002e30      xor edi, edi                                           ; char *s1\l0x00002e32      mov rsi, rbx                                           ; const char *s2\l0x00002e35      call sym.imp.strtok                                    ; char *strtok(char *s1, const char *s2)\l0x00002e3a      mov rdi, rax\l"]
	"0x00002e3d" [URL="dbg.main/0x00002e3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e29\l0x00002e3d      test rdi, rdi\l0x00002e40      je 0x2c5b\l"]
	"0x00002e46" [URL="dbg.main/0x00002e46", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e46      xor edx, edx\l0x00002e48      mov rsi, r12\l0x00002e4b      call dbg.file_name_concat\l0x00002e50      mov esi, 1                                             ; int mode\l0x00002e55      mov rdi, rax                                           ; const char *path\l0x00002e58      mov r13, rax\l0x00002e5b      call sym.imp.access                                    ; int access(const char *path, int mode)\l0x00002e60      mov rdi, r13\l0x00002e63      test eax, eax\l0x00002e65      jne 0x2e2b\l"]
	"0x00002e67" [URL="dbg.main/0x00002e67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e67      call dbg.dir_name\l0x00002e6c      mov rdi, r13                                           ; void *ptr\l0x00002e6f      mov qword [obj.program_path], rax                      ; [0xe128:8]=0\l0x00002e76      call sym.imp.free                                      ; void free(void *ptr)\l0x00002e7b      jmp 0x2c5b\l"]
        "0x00002770" -> "0x00002805" [color="#3a96dd"];
        "0x00002805" -> "0x00002980" [color="#13a10e"];
        "0x00002805" -> "0x00002821" [color="#c50f1f"];
        "0x00002821" -> "0x00002ca6" [color="#13a10e"];
        "0x00002821" -> "0x0000282c" [color="#c50f1f"];
        "0x0000282c" -> "0x00002870" [color="#13a10e"];
        "0x0000282c" -> "0x00002833" [color="#c50f1f"];
        "0x00002833" -> "0x0000287e" [color="#13a10e"];
        "0x00002833" -> "0x0000283a" [color="#c50f1f"];
        "0x00002870" -> "0x0000287e" [color="#13a10e"];
        "0x00002870" -> "0x00002878" [color="#c50f1f"];
        "0x00002878" -> "0x00002890" [color="#13a10e"];
        "0x00002878" -> "0x0000287e" [color="#c50f1f"];
        "0x00002890" -> "0x00002cff" [color="#13a10e"];
        "0x00002890" -> "0x000028a5" [color="#c50f1f"];
        "0x000028a5" -> "0x000028b5" [color="#3a96dd"];
        "0x000028b5" -> "0x00002930" [color="#13a10e"];
        "0x000028b5" -> "0x000028bd" [color="#c50f1f"];
        "0x000028bd" -> "0x00002935" [color="#13a10e"];
        "0x000028bd" -> "0x000028c2" [color="#c50f1f"];
        "0x000028c2" -> "0x00002951" [color="#13a10e"];
        "0x000028c2" -> "0x000028d4" [color="#c50f1f"];
        "0x000028d4" -> "0x00002945" [color="#13a10e"];
        "0x000028d4" -> "0x000028d9" [color="#c50f1f"];
        "0x000028d9" -> "0x00002cad" [color="#13a10e"];
        "0x000028d9" -> "0x0000290f" [color="#c50f1f"];
        "0x0000290f" -> "0x00002805" [color="#3a96dd"];
        "0x00002930" -> "0x000028c2" [color="#13a10e"];
        "0x00002930" -> "0x00002935" [color="#c50f1f"];
        "0x00002935" -> "0x000028b5" [color="#3a96dd"];
        "0x00002945" -> "0x00002805" [color="#13a10e"];
        "0x00002945" -> "0x0000294f" [color="#c50f1f"];
        "0x0000294f" -> "0x000028d9" [color="#3a96dd"];
        "0x00002951" -> "0x000028d4" [color="#13a10e"];
        "0x00002951" -> "0x0000295a" [color="#c50f1f"];
        "0x0000295a" -> "0x00002966" [color="#3a96dd"];
        "0x00002966" -> "0x0000287e" [color="#3a96dd"];
        "0x00002980" -> "0x00002d5a" [color="#13a10e"];
        "0x00002980" -> "0x000029b1" [color="#c50f1f"];
        "0x000029b1" -> "0x00002a25" [color="#13a10e"];
        "0x000029b1" -> "0x000029ba" [color="#c50f1f"];
        "0x000029ba" -> "0x00002be6" [color="#13a10e"];
        "0x000029ba" -> "0x000029cd" [color="#c50f1f"];
        "0x000029cd" -> "0x000029f4" [color="#13a10e"];
        "0x000029cd" -> "0x000029d8" [color="#c50f1f"];
        "0x000029d8" -> "0x000029f4" [color="#3a96dd"];
        "0x000029f4" -> "0x00002a06" [color="#3a96dd"];
        "0x00002a06" -> "0x00002cfa" [color="#13a10e"];
        "0x00002a06" -> "0x00002a0e" [color="#c50f1f"];
        "0x00002a0e" -> "0x00002d6b" [color="#13a10e"];
        "0x00002a0e" -> "0x00002a20" [color="#c50f1f"];
        "0x00002a20" -> "0x00002a25" [color="#3a96dd"];
        "0x00002a25" -> "0x000029b1" [color="#13a10e"];
        "0x00002a25" -> "0x00002a2e" [color="#c50f1f"];
        "0x00002a2e" -> "0x00002da7" [color="#13a10e"];
        "0x00002a2e" -> "0x00002a36" [color="#c50f1f"];
        "0x00002a36" -> "0x00002c34" [color="#13a10e"];
        "0x00002a36" -> "0x00002a53" [color="#c50f1f"];
        "0x00002a53" -> "0x00002a62" [color="#3a96dd"];
        "0x00002a62" -> "0x00002c1b" [color="#13a10e"];
        "0x00002a62" -> "0x00002a9c" [color="#c50f1f"];
        "0x00002a9c" -> "0x00002ae3" [color="#3a96dd"];
        "0x00002ac0" -> "0x00002d1e" [color="#13a10e"];
        "0x00002ac0" -> "0x00002ada" [color="#c50f1f"];
        "0x00002ada" -> "0x00002c22" [color="#13a10e"];
        "0x00002ada" -> "0x00002ae3" [color="#c50f1f"];
        "0x00002ae3" -> "0x00002cfa" [color="#13a10e"];
        "0x00002ae3" -> "0x00002afb" [color="#c50f1f"];
        "0x00002afb" -> "0x00002ac0" [color="#13a10e"];
        "0x00002afb" -> "0x00002b0c" [color="#c50f1f"];
        "0x00002b0c" -> "0x00002c89" [color="#13a10e"];
        "0x00002b0c" -> "0x00002b23" [color="#c50f1f"];
        "0x00002b23" -> "0x00002b38" [color="#3a96dd"];
        "0x00002b38" -> "0x00002cfa" [color="#13a10e"];
        "0x00002b38" -> "0x00002b40" [color="#c50f1f"];
        "0x00002b40" -> "0x00002dbd" [color="#13a10e"];
        "0x00002b40" -> "0x00002b66" [color="#c50f1f"];
        "0x00002b66" -> "0x00002db8" [color="#13a10e"];
        "0x00002b66" -> "0x00002bd1" [color="#c50f1f"];
        "0x00002be6" -> "0x00002c00" [color="#13a10e"];
        "0x00002be6" -> "0x00002bee" [color="#c50f1f"];
        "0x00002bee" -> "0x00002c00" [color="#3a96dd"];
        "0x00002c00" -> "0x00002a06" [color="#3a96dd"];
        "0x00002c1b" -> "0x00002c22" [color="#3a96dd"];
        "0x00002c22" -> "0x00002b0c" [color="#3a96dd"];
        "0x00002c34" -> "0x00002df1" [color="#13a10e"];
        "0x00002c34" -> "0x00002c4c" [color="#c50f1f"];
        "0x00002c4c" -> "0x00002c5b" [color="#3a96dd"];
        "0x00002c5b" -> "0x00002a62" [color="#13a10e"];
        "0x00002c5b" -> "0x00002c71" [color="#c50f1f"];
        "0x00002c71" -> "0x00002a62" [color="#3a96dd"];
        "0x00002c89" -> "0x00002b38" [color="#3a96dd"];
        "0x00002ca6" -> "0x00002cad" [color="#3a96dd"];
        "0x00002cad" -> "0x00002d50" [color="#13a10e"];
        "0x00002cad" -> "0x00002cb6" [color="#c50f1f"];
        "0x00002cb6" -> "0x00002cb8" [color="#3a96dd"];
        "0x00002cb8" -> "0x00002cfa" [color="#3a96dd"];
        "0x00002cfa" -> "0x00002cff" [color="#3a96dd"];
        "0x00002d1e" -> "0x00002d50" [color="#3a96dd"];
        "0x00002d50" -> "0x00002cb8" [color="#3a96dd"];
        "0x00002d5a" -> "0x00002966" [color="#3a96dd"];
        "0x00002d6b" -> "0x00002da7" [color="#3a96dd"];
        "0x00002da7" -> "0x00002966" [color="#3a96dd"];
        "0x00002dbd" -> "0x00002df1" [color="#3a96dd"];
        "0x00002df1" -> "0x00002c5b" [color="#13a10e"];
        "0x00002df1" -> "0x00002e09" [color="#c50f1f"];
        "0x00002e09" -> "0x00002e3d" [color="#3a96dd"];
        "0x00002e2b" -> "0x00002e3d" [color="#3a96dd"];
        "0x00002e3d" -> "0x00002c5b" [color="#13a10e"];
        "0x00002e3d" -> "0x00002e46" [color="#c50f1f"];
        "0x00002e46" -> "0x00002e2b" [color="#13a10e"];
        "0x00002e46" -> "0x00002e67" [color="#c50f1f"];
        "0x00002e67" -> "0x00002c5b" [color="#3a96dd"];
}
