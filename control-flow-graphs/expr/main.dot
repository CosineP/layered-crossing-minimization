digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000028f0" [URL="main/0x000028f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2ad8\l463: main (int64_t arg3);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000028f0      endbr64\l0x000028f4      push r12\l0x000028f6      lea r12, [0x00022a4c]                                  ; \"coreutils\"\l0x000028fd      push rbp\l0x000028fe      mov ebp, edi                                           ; argc\l0x00002900      push rbx\l0x00002901      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002904      mov rbx, rsi                                           ; argv\l0x00002907      call dbg.set_program_name\l0x0000290c      lea rsi, [0x00023061]                                  ; const char *locale\l0x00002913      mov edi, 6                                             ; int category\l0x00002918      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000291d      lea rsi, str._usr_local_share_locale                   ; 0x22ad2 ; \"/usr/local/share/locale\" ; char *dirname\l0x00002924      mov rdi, r12                                           ; char *domainname\l0x00002927      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x0000292c      mov rdi, r12                                           ; char *domainname\l0x0000292f      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002934      lea rdi, [dbg.close_stdout]                            ; 0x4ca0 ; func function\l0x0000293b      mov dword [obj.exit_failure], 3                        ; [0x2b010:4]=3\l0x00002945      call sym.atexit                                        ; int atexit(func function)\l0x0000294a      lea rax, str.Paul_Eggert                               ; 0x22aee ; \"Paul Eggert\"\l0x00002951      push 0\l0x00002953      mov edi, ebp                                           ; int64_t arg1\l0x00002955      push rax\l0x00002956      lea rax, str.James_Youngman                            ; 0x22afa ; \"James Youngman\"\l0x0000295d      lea r9, [dbg.usage]                                    ; 0x2e00\l0x00002964      mov rsi, rbx                                           ; int64_t arg3\l0x00002967      push rax\l0x00002968      lea rax, str.Mike_Parker                               ; 0x22b09 ; \"Mike Parker\"\l0x0000296f      lea r8, [0x00022aea]                                   ; \"9.0\"\l0x00002976      push rax\l0x00002977      lea rcx, str.GNU_coreutils                             ; 0x22a48 ; \"GNU coreutils\"\l0x0000297e      lea rdx, str.expr                                      ; 0x229cd ; \"expr\" ; int64_t arg4\l0x00002985      xor eax, eax\l0x00002987      call dbg.parse_long_options\l0x0000298c      add rsp, 0x20\l0x00002990      cmp ebp, 1\l0x00002993      jbe 0x2a8f\l"]
	"0x00002999" [URL="main/0x00002999", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002999      mov rdi, qword [rbx + 8]                               ; const char *s1\l0x0000299d      lea rsi, [0x00022b15]                                  ; \"--\" ; const char *s2\l0x000029a4      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x000029a9      mov r8d, eax\l0x000029ac      lea rax, [rbx + 8]\l0x000029b0      test r8d, r8d\l0x000029b3      jne 0x2a45\l"]
	"0x000029b9" [URL="main/0x000029b9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029b9      cmp ebp, 2\l0x000029bc      je 0x2a8f\l"]
	"0x000029c2" [URL="main/0x000029c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from main @ 0x2a48\l0x000029c2      add rax, 8\l0x000029c6      mov edi, 1                                             ; int64_t arg1\l0x000029cb      mov qword [obj.args], rax                              ; [0x2b0f0:8]=8\l0x000029d2      call dbg.eval\l0x000029d7      mov rbp, rax\l0x000029da      mov rax, qword [obj.args]                              ; [0x2b0f0:8]=8\l0x000029e1      mov rdx, qword [rax]\l0x000029e4      test rdx, rdx\l0x000029e7      jne 0x2a59\l"]
	"0x000029e9" [URL="main/0x000029e9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e9      mov eax, dword [rbp]\l0x000029ec      test eax, eax\l0x000029ee      je 0x2a12\l"]
	"0x000029f0" [URL="main/0x000029f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029f0      cmp eax, 1\l0x000029f3      jne 0x2aba\l"]
	"0x000029f9" [URL="main/0x000029f9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029f9      mov rdi, qword [rbp + 8]                               ; const char *s\l0x000029fd      call sym.imp.puts                                      ; int puts(const char *s)\l"]
	"0x00002a02" [URL="main/0x00002a02", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from main @ 0x2a43, 0x2a57\l0x00002a02      mov rdi, rbp                                           ; int64_t arg1\l0x00002a05      call sym.null\l0x00002a0a      pop rbx\l0x00002a0b      pop rbp\l0x00002a0c      movzx eax, al\l0x00002a0f      pop r12\l0x00002a11      ret\l"]
	"0x00002a12" [URL="main/0x00002a12", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from main @ 0x29ee\l0x00002a12      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x2b0a8:8]=0 ; int64_t arg1\l0x00002a19      lea rdx, [rbp + 8]\l0x00002a1d      mov esi, 0xa\l0x00002a22      call dbg.mpz_out_str\l0x00002a27      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x2b0a8:8]=0\l0x00002a2e      mov rax, qword [rdi + 0x28]\l0x00002a32      cmp rax, qword [rdi + 0x30]\l0x00002a36      jae 0x2a4d\l"]
	"0x00002a38" [URL="main/0x00002a38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a38      lea rdx, [rax + 1]\l0x00002a3c      mov qword [rdi + 0x28], rdx\l0x00002a40      mov byte [rax], 0xa\l0x00002a43      jmp 0x2a02\l"]
	"0x00002a45" [URL="main/0x00002a45", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from main @ 0x29b3\l0x00002a45      mov rax, rbx\l0x00002a48      jmp 0x29c2\l"]
	"0x00002a4d" [URL="main/0x00002a4d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from main @ 0x2a36\l0x00002a4d      mov esi, 0xa\l0x00002a52      call sym.imp.__overflow\l0x00002a57      jmp 0x2a02\l"]
	"0x00002a59" [URL="main/0x00002a59", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from main @ 0x29e7\l0x00002a59      mov esi, 8                                             ; int64_t arg2\l0x00002a5e      xor edi, edi                                           ; int64_t arg1\l0x00002a60      call sym.quotearg_n_style\l0x00002a65      mov edx, 5\l0x00002a6a      lea rsi, str.syntax_error:_unexpected_argument__s      ; 0x22958 ; \"syntax error: unexpected argument %s\"\l0x00002a71      xor edi, edi\l0x00002a73      mov r12, rax\l0x00002a76      call sym.imp.dcgettext\l0x00002a7b      mov rcx, r12\l0x00002a7e      xor esi, esi                                           ; int errname\l0x00002a80      mov edi, 2                                             ; int status\l0x00002a85      mov rdx, rax                                           ; char *format\l0x00002a88      xor eax, eax\l0x00002a8a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002a8f" [URL="main/0x00002a8f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from main @ 0x2993, 0x29bc\l0x00002a8f      mov edx, 5\l0x00002a94      lea rsi, str.missing_operand                           ; 0x22b18 ; \"missing operand\"\l0x00002a9b      xor edi, edi\l0x00002a9d      call sym.imp.dcgettext\l0x00002aa2      xor edi, edi                                           ; int status\l0x00002aa4      xor esi, esi                                           ; int errname\l0x00002aa6      mov rdx, rax                                           ; char *format\l0x00002aa9      xor eax, eax\l0x00002aab      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ab0      mov edi, 2                                             ; int64_t arg1\l0x00002ab5      call dbg.usage\l"]
	"0x00002aba" [URL="main/0x00002aba", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from main @ 0x29f3\l0x00002aba      jmp sym.main.cold\l"]
        "0x000028f0" -> "0x00002a8f" [color="#13a10e"];
        "0x000028f0" -> "0x00002999" [color="#c50f1f"];
        "0x00002999" -> "0x00002a45" [color="#13a10e"];
        "0x00002999" -> "0x000029b9" [color="#c50f1f"];
        "0x000029b9" -> "0x00002a8f" [color="#13a10e"];
        "0x000029b9" -> "0x000029c2" [color="#c50f1f"];
        "0x000029c2" -> "0x00002a59" [color="#13a10e"];
        "0x000029c2" -> "0x000029e9" [color="#c50f1f"];
        "0x000029e9" -> "0x00002a12" [color="#13a10e"];
        "0x000029e9" -> "0x000029f0" [color="#c50f1f"];
        "0x000029f0" -> "0x00002aba" [color="#13a10e"];
        "0x000029f0" -> "0x000029f9" [color="#c50f1f"];
        "0x000029f9" -> "0x00002a02" [color="#3a96dd"];
        "0x00002a12" -> "0x00002a4d" [color="#13a10e"];
        "0x00002a12" -> "0x00002a38" [color="#c50f1f"];
        "0x00002a38" -> "0x00002a02" [color="#3a96dd"];
        "0x00002a45" -> "0x000029c2" [color="#3a96dd"];
        "0x00002a4d" -> "0x00002a02" [color="#3a96dd"];
        "0x00002a59" -> "0x00002a8f" [color="#3a96dd"];
        "0x00002a8f" -> "0x00002aba" [color="#3a96dd"];
        "0x00002aba" -> "0x0000289e" [color="#3a96dd"];
}
