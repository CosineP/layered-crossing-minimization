digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002840" [URL="dbg.main/0x00002840", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2a68\l513: int dbg.main (int argc, char **argv);\l; var token_buffer tokenbuffer @ rbp-0x40\l; var int64_t var_8h @ rsp+0x18\l; var int64_t var_18h @ rsp+0x28\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002840      endbr64                                                ; int main(int argc,char ** argv);\l0x00002844      push r14\l0x00002846      push r13\l0x00002848      lea r13, [0x0001711b]                                  ; \"coreutils\"\l0x0000284f      push r12\l0x00002851      lea r12, [0x0001aacb]\l0x00002858      push rbp\l0x00002859      mov ebp, edi                                           ; argc\l0x0000285b      push rbx\l0x0000285c      mov rbx, rsi                                           ; argv\l0x0000285f      sub rsp, 0x20\l0x00002863      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002866      mov rax, qword fs:[0x28]\l0x0000286f      mov qword [var_18h], rax\l0x00002874      xor eax, eax\l0x00002876      call dbg.set_program_name\l0x0000287b      mov rsi, r12                                           ; const char *locale\l0x0000287e      mov edi, 6                                             ; int category\l0x00002883      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002888      lea rsi, str._usr_local_share_locale                   ; 0x17144 ; \"/usr/local/share/locale\" ; char *dirname\l0x0000288f      mov rdi, r13                                           ; char *domainname\l0x00002892      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002897      mov rdi, r13                                           ; char *domainname\l0x0000289a      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x0000289f      cmp qword [obj.lbuf], 0                                ; [0x22110:8]=0\l0x000028a7      je 0x2980\l"]
	"0x000028ad" [URL="dbg.main/0x000028ad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2998\l0x000028ad      lea rdi, [dbg.close_stdout]                            ; 0x66a0 ; func function\l0x000028b4      lea r13, obj.long_options                              ; 0x21b00\l0x000028bb      call sym.atexit                                        ; int atexit(func function)\l0x000028c0      lea rdi, [sym.lbuf_flush]                              ; 0x3560 ; func function\l0x000028c7      call sym.atexit                                        ; int atexit(func function)\l"]
	"0x000028cc" [URL="dbg.main/0x000028cc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2901\l0x000028cc      xor r8d, r8d\l0x000028cf      mov rcx, r13\l0x000028d2      mov rdx, r12\l0x000028d5      mov rsi, rbx\l0x000028d8      mov edi, ebp\l0x000028da      call sym.imp.getopt_long\l0x000028df      cmp eax, 0xffffffff\l0x000028e2      je 0x299d\l"]
	"0x000028e8" [URL="dbg.main/0x000028e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028e8      cmp eax, 0xffffff7e                                    ; 4294967166\l0x000028ed      je 0x2a3a\l"]
	"0x000028f3" [URL="dbg.main/0x000028f3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028f3      cmp eax, 0x80\l0x000028f8      jne 0x2908\l"]
	"0x000028fa" [URL="dbg.main/0x000028fa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028fa      mov byte [obj.dev_debug], 1                            ; [0x22120:1]=1\l0x00002901      jmp 0x28cc\l"]
	"0x00002908" [URL="dbg.main/0x00002908", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28f8\l0x00002908      cmp eax, 0xffffff7d                                    ; 4294967165\l0x0000290d      je 0x2920\l"]
	"0x0000290f" [URL="dbg.main/0x0000290f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000290f      mov edi, 1                                             ; int64_t arg1\l0x00002914      call dbg.usage\l0x00002919      nop dword [rax]\l"]
	"0x00002920" [URL="dbg.main/0x00002920", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x290d\l0x00002920      lea rsi, str.Niels_Mller                               ; 0x1715c ; \"Niels M\\u00f6ller\" ; int64_t arg2\l0x00002927      lea rdi, str.Niels_Moller                              ; 0x1716a ; \"Niels Moller\" ; int64_t arg1\l0x0000292e      call dbg.proper_name_utf8\l0x00002933      lea rsi, str.Torbjrn_Granlund                          ; 0x17177 ; \"Torbj\\u00f6rn Granlund\" ; int64_t arg2\l0x0000293a      lea rdi, str.Torbjorn_Granlund                         ; 0x1718a ; \"Torbjorn Granlund\" ; int64_t arg1\l0x00002941      mov rbx, rax\l0x00002944      call dbg.proper_name_utf8\l0x00002949      push 0\l0x0000294b      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x220c8:8]=0 ; int64_t arg1\l0x00002952      lea r8, str.Paul_Rubin                                 ; 0x1719c ; \"Paul Rubin\" ; int64_t arg6\l0x00002959      push rbx\l0x0000295a      mov rcx, qword [obj.Version]                           ; [0x22018:8]=0x1a5a3 \"9.0\" ; int64_t arg5\l0x00002961      mov r9, rax                                            ; int64_t arg_c0h\l0x00002964      xor eax, eax\l0x00002966      lea rdx, str.GNU_coreutils                             ; 0x17117 ; \"GNU coreutils\" ; int64_t arg3\l0x0000296d      lea rsi, str.factor                                    ; 0x1709a ; \"factor\" ; int64_t arg2\l0x00002974      call dbg.version_etc\l0x00002979      xor edi, edi                                           ; int status\l0x0000297b      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002980" [URL="dbg.main/0x00002980", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28a7\l0x00002980      mov edi, 0x400                                         ; size_t size\l0x00002985      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x0000298a      mov qword [obj.lbuf], rax                              ; [0x22110:8]=0\l0x00002991      mov qword [0x00022118], rax                            ; [0x22118:8]=0x177fdc\l0x00002998      jmp 0x28ad\l"]
	"0x0000299d" [URL="dbg.main/0x0000299d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28e2\l0x0000299d      movsxd r12, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x220d8:4]=0\l0x000029a4      cmp r12d, ebp\l0x000029a7      jge 0x29ef\l"]
	"0x000029a9" [URL="dbg.main/0x000029a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029a9      mov r13d, 1\l0x000029af      xor r14d, r14d\l"]
	"0x000029b2" [URL="dbg.main/0x000029b2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c8\l0x000029b2      mov rdi, qword [rbx + r12*8]                           ; int64_t arg1\l0x000029b6      call dbg.print_factors\l0x000029bb      test al, al\l0x000029bd      cmove r13d, r14d\l0x000029c1      add r12, 1\l0x000029c5      cmp ebp, r12d\l0x000029c8      jg 0x29b2\l"]
	"0x000029ca" [URL="dbg.main/0x000029ca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a38\l0x000029ca      xor r13d, 1\l0x000029ce      movzx eax, r13b\l0x000029d2      mov rdx, qword [var_18h]\l0x000029d7      sub rdx, qword fs:[0x28]\l0x000029e0      jne 0x2a41\l"]
	"0x000029e2" [URL="dbg.main/0x000029e2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e2      add rsp, 0x20\l0x000029e6      pop rbx\l0x000029e7      pop rbp\l0x000029e8      pop r12\l0x000029ea      pop r13\l0x000029ec      pop r14\l0x000029ee      ret\l"]
	"0x000029ef" [URL="dbg.main/0x000029ef", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29a7\l0x000029ef      mov rbx, rsp\l0x000029f2      mov r13d, 1\l0x000029f8      lea rbp, [0x000171a7]                                  ; \"\\n\\t \"\l0x000029ff      mov rdi, rbx                                           ; int64_t arg1\l0x00002a02      call sym.init_tokenbuffer\l0x00002a07      jmp 0x2a11\l"]
	"0x00002a09" [URL="dbg.main/0x00002a09", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a31\l0x00002a09      call dbg.print_factors\l0x00002a0e      and r13d, eax\l"]
	"0x00002a11" [URL="dbg.main/0x00002a11", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a07\l0x00002a11      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0x220d0:8]=0 ; int64_t arg1\l0x00002a18      mov rcx, rbx                                           ; int64_t arg4\l0x00002a1b      mov edx, 3                                             ; int64_t arg3\l0x00002a20      mov rsi, rbp                                           ; uint32_t arg2\l0x00002a23      call dbg.readtoken\l0x00002a28      mov rdi, qword [var_8h]\l0x00002a2d      add rax, 1\l0x00002a31      jne 0x2a09\l"]
	"0x00002a33" [URL="dbg.main/0x00002a33", fillcolor="white",color="#767676", fontname="Courier",label="0x00002a33      call sym.imp.free                                      ; void free(void *ptr)\l0x00002a38      jmp 0x29ca\l"]
	"0x00002a3a" [URL="dbg.main/0x00002a3a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28ed\l0x00002a3a      xor edi, edi                                           ; int64_t arg1\l0x00002a3c      call dbg.usage\l"]
	"0x00002a41" [URL="dbg.main/0x00002a41", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29e0\l0x00002a41      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x00002840" -> "0x00002980" [color="#13a10e"];
        "0x00002840" -> "0x000028ad" [color="#c50f1f"];
        "0x000028ad" -> "0x000028cc" [color="#3a96dd"];
        "0x000028cc" -> "0x0000299d" [color="#13a10e"];
        "0x000028cc" -> "0x000028e8" [color="#c50f1f"];
        "0x000028e8" -> "0x00002a3a" [color="#13a10e"];
        "0x000028e8" -> "0x000028f3" [color="#c50f1f"];
        "0x000028f3" -> "0x00002908" [color="#13a10e"];
        "0x000028f3" -> "0x000028fa" [color="#c50f1f"];
        "0x000028fa" -> "0x000028cc" [color="#3a96dd"];
        "0x00002908" -> "0x00002920" [color="#13a10e"];
        "0x00002908" -> "0x0000290f" [color="#c50f1f"];
        "0x0000290f" -> "0x00002920" [color="#3a96dd"];
        "0x00002980" -> "0x000028ad" [color="#3a96dd"];
        "0x0000299d" -> "0x000029ef" [color="#13a10e"];
        "0x0000299d" -> "0x000029a9" [color="#c50f1f"];
        "0x000029a9" -> "0x000029b2" [color="#3a96dd"];
        "0x000029b2" -> "0x000029b2" [color="#13a10e"];
        "0x000029b2" -> "0x000029ca" [color="#c50f1f"];
        "0x000029ca" -> "0x00002a41" [color="#13a10e"];
        "0x000029ca" -> "0x000029e2" [color="#c50f1f"];
        "0x000029ef" -> "0x00002a11" [color="#3a96dd"];
        "0x00002a09" -> "0x00002a11" [color="#3a96dd"];
        "0x00002a11" -> "0x00002a09" [color="#13a10e"];
        "0x00002a11" -> "0x00002a33" [color="#c50f1f"];
        "0x00002a33" -> "0x000029ca" [color="#3a96dd"];
        "0x00002a3a" -> "0x00002a41" [color="#3a96dd"];
}
