digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002a10" [URL="dbg.main/0x00002a10", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x3368\l2305: int dbg.main (int argc, char **argv);\l; var Options flags @ rbp-0x60\l; var uint32_t var_8h @ rsp+0x18\l; var int64_t var_13h @ rsp+0x23\l; var uint32_t fildes @ rsp+0x24\l; var uint32_t var_18h @ rsp+0x28\l; var void *s1 @ rsp+0x30\l; var void *var_28h @ rsp+0x38\l; var void *ptr @ rsp+0x40\l; var int64_t var_38h @ rsp+0x48\l; var void *var_40h @ rsp+0x50\l; var int64_t var_48h @ rsp+0x58\l; var uint32_t var_50h @ rsp+0x60\l; var int64_t var_58h @ rsp+0x68\l; var int64_t var_60h @ rsp+0x70\l; var uint32_t var_68h @ rsp+0x78\l; var uint32_t var_6ch @ rsp+0x7c\l; var int64_t var_6dh @ rsp+0x7d\l; var int64_t var_6eh @ rsp+0x7e\l; var int64_t var_78h @ rsp+0x88\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002a10      endbr64                                                ; int main(int argc,char ** argv);\l0x00002a14      push r15\l0x00002a16      pxor xmm0, xmm0\l0x00002a1a      lea r15, [0x0000c303]\l0x00002a21      push r14\l0x00002a23      lea r14, obj.long_opts                                 ; 0xf960\l0x00002a2a      push r13\l0x00002a2c      lea r13, str.fn:s:uvxz                                 ; 0xb211 ; \"fn:s:uvxz\"\l0x00002a33      push r12\l0x00002a35      lea r12, [0x0000b178]                                  ; \"coreutils\"\l0x00002a3c      push rbp\l0x00002a3d      mov ebp, edi                                           ; argc\l0x00002a3f      push rbx\l0x00002a40      mov rbx, rsi                                           ; argv\l0x00002a43      sub rsp, 0x88\l0x00002a4a      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002a4d      mov rax, qword fs:[0x28]\l0x00002a56      mov qword [var_78h], rax\l0x00002a5b      xor eax, eax\l0x00002a5d      movaps xmmword [var_50h], xmm0\l0x00002a62      movaps xmmword [var_60h], xmm0\l0x00002a67      call dbg.set_program_name\l0x00002a6c      mov rsi, r15                                           ; const char *locale\l0x00002a6f      mov edi, 6                                             ; int category\l0x00002a74      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002a79      lea rsi, str._usr_local_share_locale                   ; 0xb1ab ; \"/usr/local/share/locale\" ; char *dirname\l0x00002a80      mov rdi, r12                                           ; char *domainname\l0x00002a83      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002a88      mov rdi, r12                                           ; char *domainname\l0x00002a8b      lea r12, [0x0000bba0]\l0x00002a92      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002a97      lea rdi, [dbg.close_stdout]                            ; 0x4d60 ; func function\l0x00002a9e      call sym.atexit                                        ; int atexit(func function)\l0x00002aa3      mov qword [rsp], 0\l0x00002aab      mov qword [var_58h], 3\l0x00002ab4      mov qword [var_60h], 0xffffffffffffffff\l0x00002abd      nop dword [rax]\l"]
	"0x00002ac0" [URL="dbg.main/0x00002ac0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002b3c  CODE 0x00002b45  CODE 0x00002b55  \l; XREFS: CODE 0x00002b65  CODE 0x00002bb5  CODE 0x00002c04  \l; XREFS: CODE 0x00002c49  CODE 0x00002c55  CODE 0x00002cb5  \l0x00002ac0      xor r8d, r8d\l0x00002ac3      mov rcx, r14\l0x00002ac6      mov rdx, r13\l0x00002ac9      mov rsi, rbx\l0x00002acc      mov edi, ebp\l0x00002ace      call sym.imp.getopt_long\l0x00002ad3      cmp eax, 0xffffffff\l0x00002ad6      je 0x2cba\l"]
	"0x00002adc" [URL="dbg.main/0x00002adc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002adc      cmp eax, 0x80\l0x00002ae1      jg case.0x2b03.103\l"]
	"0x00002ae7" [URL="dbg.main/0x00002ae7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ae7      cmp eax, 0x65\l0x00002aea      jle 0x2c60\l"]
	"0x00002af0" [URL="dbg.main/0x00002af0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002af0      sub eax, 0x66\l0x00002af3      cmp eax, 0x1a\l0x00002af6      ja case.0x2b03.103\l"]
	"0x00002afc" [URL="dbg.main/0x00002afc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002afc      movsxd rax, dword [r12 + rax*4]\l0x00002b00      add rax, r12\l;-- switch\l0x00002b03      jmp rax                                                ; switch table (27 cases) at 0xbba0\l"]
	"0x00002b10" [URL="dbg.main/0x00002b10", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002b10      mov rdi, qword [rsp]\l0x00002b14      mov rdx, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x100c0:8]=0\l0x00002b1b      test rdi, rdi\l0x00002b1e      je 0x2b38\l"]
	"0x00002b20" [URL="dbg.main/0x00002b20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b20      mov rsi, rdx                                           ; const char *s2\l0x00002b23      mov qword [rsp], rdx\l0x00002b27      call sym.imp.strcmp                                    ; int strcmp(const char *s1, const char *s2)\l0x00002b2c      mov rdx, qword [rsp]\l0x00002b30      test eax, eax\l0x00002b32      jne 0x32e4\l"]
	"0x00002b38" [URL="dbg.main/0x00002b38", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b1e\l0x00002b38      mov qword [rsp], rdx\l0x00002b3c      jmp 0x2ac0\l"]
	"0x00002b40" [URL="dbg.main/0x00002b40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 122:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002b40      mov byte [var_6eh], 1\l0x00002b45      jmp 0x2ac0\l"]
	"0x00002b50" [URL="dbg.main/0x00002b50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 120:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002b50      mov byte [var_6dh], 1\l0x00002b55      jmp 0x2ac0\l"]
	"0x00002b60" [URL="dbg.main/0x00002b60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 118:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002b60      mov byte [var_6ch], 1\l0x00002b65      jmp 0x2ac0\l"]
	"0x00002b70" [URL="dbg.main/0x00002b70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 117:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002b70      mov rsi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x100c0:8]=0\l0x00002b77      test rsi, rsi\l0x00002b7a      je 0x2cad\l"]
	"0x00002b80" [URL="dbg.main/0x00002b80", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b80      mov r9, qword [obj.argmatch_die]                       ; [0x10018:8]=0x48f0 dbg.__argmatch_die ; int64_t arg6\l0x00002b87      lea rcx, obj.remove_methods                            ; 0xbd60 ; int64_t arg4\l0x00002b8e      mov r8d, 4                                             ; int64_t arg5\l0x00002b94      lea rdx, obj.remove_args                               ; 0xfac0 ; int64_t arg3\l0x00002b9b      lea rdi, str.__remove                                  ; 0xb1dc ; \"--remove\" ; int64_t arg1\l0x00002ba2      call dbg.__xargmatch_internal\l0x00002ba7      lea rcx, obj.remove_methods                            ; 0xbd60\l0x00002bae      mov eax, dword [rcx + rax*4]\l0x00002bb1      mov dword [var_68h], eax\l0x00002bb5      jmp 0x2ac0\l"]
	"0x00002bc0" [URL="dbg.main/0x00002bc0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 115:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002bc0      mov edx, 5\l0x00002bc5      lea rsi, str.invalid_file_size                         ; 0xb1e5 ; \"invalid file size\"\l0x00002bcc      xor edi, edi\l0x00002bce      call sym.imp.dcgettext\l0x00002bd3      sub rsp, 8\l0x00002bd7      xor edx, edx                                           ; char **ubp_av\l0x00002bd9      xor esi, esi                                           ; int argc\l0x00002bdb      push 0\l0x00002bdd      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x100c0:8]=0 ; int64_t arg1\l0x00002be4      mov r9, rax                                            ; int64_t arg_50h\l0x00002be7      lea r8, str.cbBkKMGTPEZY0                              ; 0xb1f7 ; \"cbBkKMGTPEZY0\" ; int64_t arg6\l0x00002bee      movabs rcx, 0x7fffffffffffffff                         ; 9223372036854775807 ; int64_t arg4\l0x00002bf8      call dbg.xnumtoumax\l0x00002bfd      mov qword [var_60h], rax\l0x00002c02      pop rax\l0x00002c03      pop rdx\l0x00002c04      jmp 0x2ac0\l"]
	"0x00002c10" [URL="dbg.main/0x00002c10", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 110:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002c10      mov edx, 5\l0x00002c15      lea rsi, str.invalid_number_of_passes                  ; 0xb1c3 ; \"invalid number of passes\"\l0x00002c1c      xor edi, edi\l0x00002c1e      call sym.imp.dcgettext\l0x00002c23      xor r9d, r9d\l0x00002c26      mov rcx, r15                                           ; int64_t arg5\l0x00002c29      xor esi, esi                                           ; int64_t arg3\l0x00002c2b      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x100c0:8]=0 ; int64_t arg2\l0x00002c32      mov r8, rax                                            ; int64_t arg6\l0x00002c35      movabs rdx, 0x3fffffffffffffff                         ; 4611686018427387903 ; int64_t arg4\l0x00002c3f      call dbg.xdectoumax\l0x00002c44      mov qword [var_58h], rax\l0x00002c49      jmp 0x2ac0\l"]
	"0x00002c50" [URL="dbg.main/0x00002c50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 102:                                                          ; from 0x00002b03\l; CODE XREF from dbg.main @ 0x2b03\l0x00002c50      mov byte [var_50h], 1\l0x00002c55      jmp 0x2ac0\l"]
	"0x00002c60" [URL="dbg.main/0x00002c60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2aea\l0x00002c60      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002c65      jne 0x2c9b\l"]
	"0x00002c67" [URL="dbg.main/0x00002c67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c67      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x100a8:8]=0 ; int64_t arg1\l0x00002c6e      mov rcx, qword [obj.Version]                           ; [0x10010:8]=0xbd6c \"9.0\" ; \"l\\xbd\" ; int64_t arg5\l0x00002c75      xor eax, eax\l0x00002c77      xor r9d, r9d                                           ; int64_t arg_c0h\l0x00002c7a      lea r8, str.Colin_Plumb                                ; 0xb205 ; \"Colin Plumb\" ; int64_t arg6\l0x00002c81      lea rdx, str.GNU_coreutils                             ; 0xb174 ; \"GNU coreutils\" ; int64_t arg3\l0x00002c88      lea rsi, [global_program]                              ; 0xb0f8 ; \"shred\" ; int64_t arg2\l0x00002c8f      call dbg.version_etc\l0x00002c94      xor edi, edi                                           ; int status\l0x00002c96      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002c9b" [URL="dbg.main/0x00002c9b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c65\l0x00002c9b      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002ca0      jne case.0x2b03.103\l"]
	"0x00002ca6" [URL="dbg.main/0x00002ca6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ca6      xor edi, edi                                           ; int64_t arg1\l0x00002ca8      call dbg.usage\l"]
	"0x00002cad" [URL="dbg.main/0x00002cad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b7a\l0x00002cad      mov dword [var_68h], 3\l0x00002cb5      jmp 0x2ac0\l"]
	"0x00002cba" [URL="dbg.main/0x00002cba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad6\l0x00002cba      movsxd r12, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x100b0:4]=0\l0x00002cc1      sub ebp, r12d\l0x00002cc4      je 0x30ea\l"]
	"0x00002cca" [URL="dbg.main/0x00002cca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cca      mov rdi, qword [rsp]\l0x00002cce      or rsi, 0xffffffffffffffff\l0x00002cd2      call dbg.randint_all_new\l0x00002cd7      mov qword [obj.randint_source], rax                    ; [0x100f0:8]=0\l0x00002cde      test rax, rax\l0x00002ce1      je 0x3308\l"]
	"0x00002ce7" [URL="dbg.main/0x00002ce7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ce7      lea rdi, [dbg.clear_random_data]                       ; 0x3440 ; func function\l0x00002cee      call sym.atexit                                        ; int atexit(func function)\l0x00002cf3      test ebp, ebp\l0x00002cf5      jle 0x2e7c\l"]
	"0x00002cfb" [URL="dbg.main/0x00002cfb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cfb      lea eax, [rbp - 1]\l0x00002cfe      mov byte [var_13h], 1\l0x00002d03      lea r13, [rbx + r12*8]\l0x00002d07      add rax, r12\l0x00002d0a      lea r15, obj.nameset                                   ; 0xbc20 ; \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.\"\l0x00002d11      lea rax, [rbx + rax*8 + 8]\l0x00002d16      mov qword [var_8h], rax\l0x00002d1b      jmp 0x2d85\l"]
	"0x00002d20" [URL="dbg.main/0x00002d20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2da9\l0x00002d20      cmp byte [r12 + 1], 0\l0x00002d26      jne 0x2daf\l"]
	"0x00002d2c" [URL="dbg.main/0x00002d2c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d2c      xor eax, eax\l0x00002d2e      mov esi, 3                                             ; signed int arg2\l0x00002d33      mov edi, 1                                             ; int64_t arg1\l0x00002d38      mov r12, qword [obj.randint_source]                    ; [0x100f0:8]=0\l0x00002d3f      call dbg.rpl_fcntl\l0x00002d44      test eax, eax\l0x00002d46      js 0x2ee7\l"]
	"0x00002d4c" [URL="dbg.main/0x00002d4c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d4c      test ah, 4\l0x00002d4f      jne 0x2e51\l"]
	"0x00002d55" [URL="dbg.main/0x00002d55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d55      lea rcx, [var_50h]                                     ; int64_t arg4\l0x00002d5a      mov rdx, r12                                           ; int64_t arg3\l0x00002d5d      mov rsi, rbp                                           ; int64_t arg2\l0x00002d60      mov edi, 1                                             ; int64_t arg1\l0x00002d65      call dbg.do_wipefd\l"]
	"0x00002d6a" [URL="dbg.main/0x00002d6a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2e77, 0x2f15\l0x00002d6a      and byte [var_13h], al\l"]
	"0x00002d6e" [URL="dbg.main/0x00002d6e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e08\l0x00002d6e      mov rdi, rbp                                           ; void *ptr\l0x00002d71      add r13, 8\l0x00002d75      call sym.imp.free                                      ; void free(void *ptr)\l0x00002d7a      cmp qword [var_8h], r13\l0x00002d7f      je 0x2e81\l"]
	"0x00002d85" [URL="dbg.main/0x00002d85", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d1b\l0x00002d85      mov rdx, qword [r13]                                   ; int64_t arg3\l0x00002d89      xor edi, edi                                           ; int64_t arg1\l0x00002d8b      mov esi, 3                                             ; int64_t arg2\l0x00002d90      call sym.quotearg_n_style_colon\l0x00002d95      mov rdi, rax                                           ; int64_t arg1\l0x00002d98      call dbg.xstrdup\l0x00002d9d      mov r12, qword [r13]\l0x00002da1      mov rbp, rax\l0x00002da4      cmp byte [r12], 0x2d\l0x00002da9      je 0x2d20\l"]
	"0x00002daf" [URL="dbg.main/0x00002daf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d26\l0x00002daf      mov esi, 0x101                                         ; int oflag\l0x00002db4      mov rdi, r12                                           ; const char *path\l0x00002db7      xor eax, eax\l0x00002db9      mov r14, qword [obj.randint_source]                    ; [0x100f0:8]=0\l0x00002dc0      call dbg.open_safer\l0x00002dc5      mov ebx, eax\l0x00002dc7      test eax, eax\l0x00002dc9      js 0x2e0d\l"]
	"0x00002dcb" [URL="dbg.main/0x00002dcb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f57\l0x00002dcb      mov edi, ebx                                           ; int64_t arg1\l0x00002dcd      lea rcx, [var_50h]                                     ; int64_t arg4\l0x00002dd2      mov rdx, r14                                           ; int64_t arg3\l0x00002dd5      mov rsi, rbp                                           ; int64_t arg2\l0x00002dd8      call dbg.do_wipefd\l0x00002ddd      mov edi, ebx                                           ; int fildes\l0x00002ddf      mov byte [rsp], al\l0x00002de2      call sym.imp.close                                     ; int close(int fildes)\l0x00002de7      test eax, eax\l0x00002de9      jne 0x2eb2\l"]
	"0x00002def" [URL="dbg.main/0x00002def", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002def      cmp byte [rsp], 0\l0x00002df3      je 0x2e00\l"]
	"0x00002df5" [URL="dbg.main/0x00002df5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002df5      cmp dword [var_68h], 0\l0x00002dfa      jne 0x2f62\l"]
	"0x00002e00" [URL="dbg.main/0x00002e00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2df3, 0x2e4f, 0x2ee2, 0x30e5\l0x00002e00      movzx ecx, byte [rsp]\l0x00002e04      and byte [var_13h], cl\l0x00002e08      jmp 0x2d6e\l"]
	"0x00002e0d" [URL="dbg.main/0x00002e0d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dc9\l0x00002e0d      call sym.imp.__errno_location\l0x00002e12      cmp dword [rax], 0xd\l0x00002e15      mov r8, rax\l0x00002e18      je 0x2f1a\l"]
	"0x00002e1e" [URL="dbg.main/0x00002e1e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2f1f, 0x2f3c, 0x2f5d\l0x00002e1e      mov edx, 5\l0x00002e23      lea rsi, str._s:_failed_to_open_for_writing            ; 0xbb70 ; \"%s: failed to open for writing\"\l0x00002e2a      xor edi, edi\l0x00002e2c      mov qword [rsp], r8\l0x00002e30      call sym.imp.dcgettext\l0x00002e35      mov r8, qword [rsp]\l0x00002e39      mov rcx, rbp\l0x00002e3c      xor edi, edi                                           ; int status\l0x00002e3e      mov rdx, rax                                           ; char *format\l0x00002e41      xor eax, eax\l0x00002e43      mov esi, dword [r8]                                    ; int errname\l0x00002e46      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e4b      mov byte [rsp], 0\l0x00002e4f      jmp 0x2e00\l"]
	"0x00002e51" [URL="dbg.main/0x00002e51", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d4f\l0x00002e51      mov edx, 5\l0x00002e56      lea rsi, str._s:_cannot_shred_append_only_file_descriptor ; 0xbb40 ; \"%s: cannot shred append-only file descriptor\"\l0x00002e5d      xor edi, edi\l0x00002e5f      call sym.imp.dcgettext\l0x00002e64      mov rcx, rbp\l0x00002e67      xor esi, esi                                           ; int errname\l0x00002e69      xor edi, edi                                           ; int status\l0x00002e6b      mov rdx, rax                                           ; char *format\l0x00002e6e      xor eax, eax\l0x00002e70      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e75      xor eax, eax\l0x00002e77      jmp 0x2d6a\l"]
	"0x00002e7c" [URL="dbg.main/0x00002e7c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cf5\l0x00002e7c      mov byte [var_13h], 1\l"]
	"0x00002e81" [URL="dbg.main/0x00002e81", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d7f\l0x00002e81      movzx eax, byte [var_13h]\l0x00002e86      xor eax, 1\l0x00002e89      movzx eax, al\l0x00002e8c      mov rdx, qword [var_78h]\l0x00002e91      sub rdx, qword fs:[0x28]\l0x00002e9a      jne 0x32df\l"]
	"0x00002ea0" [URL="dbg.main/0x00002ea0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ea0      add rsp, 0x88\l0x00002ea7      pop rbx\l0x00002ea8      pop rbp\l0x00002ea9      pop r12\l0x00002eab      pop r13\l0x00002ead      pop r14\l0x00002eaf      pop r15\l0x00002eb1      ret\l"]
	"0x00002eb2" [URL="dbg.main/0x00002eb2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2de9\l0x00002eb2      mov edx, 5\l0x00002eb7      lea rsi, str._s:_failed_to_close                       ; 0xb241 ; \"%s: failed to close\"\l0x00002ebe      xor edi, edi\l0x00002ec0      call sym.imp.dcgettext\l0x00002ec5      mov r12, rax\l0x00002ec8      call sym.imp.__errno_location\l0x00002ecd      mov rcx, rbp\l0x00002ed0      mov rdx, r12                                           ; char *format\l0x00002ed3      xor edi, edi                                           ; int status\l0x00002ed5      mov esi, dword [rax]                                   ; int errname\l0x00002ed7      xor eax, eax\l0x00002ed9      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ede      mov byte [rsp], 0\l0x00002ee2      jmp 0x2e00\l"]
	"0x00002ee7" [URL="dbg.main/0x00002ee7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d46\l0x00002ee7      mov edx, 5\l0x00002eec      lea rsi, str._s:_fcntl_failed                          ; 0xb230 ; \"%s: fcntl failed\"\l0x00002ef3      xor edi, edi\l0x00002ef5      call sym.imp.dcgettext\l0x00002efa      mov r12, rax\l0x00002efd      call sym.imp.__errno_location\l0x00002f02      mov rcx, rbp\l0x00002f05      mov rdx, r12                                           ; char *format\l0x00002f08      xor edi, edi                                           ; int status\l0x00002f0a      mov esi, dword [rax]                                   ; int errname\l0x00002f0c      xor eax, eax\l0x00002f0e      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002f13      xor eax, eax\l0x00002f15      jmp 0x2d6a\l"]
	"0x00002f1a" [URL="dbg.main/0x00002f1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e18\l0x00002f1a      cmp byte [var_50h], 0\l0x00002f1f      je 0x2e1e\l"]
	"0x00002f25" [URL="dbg.main/0x00002f25", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f25      mov esi, 0x80                                          ; int mode\l0x00002f2a      mov rdi, r12                                           ; const char *path\l0x00002f2d      mov qword [rsp], rax\l0x00002f31      call sym.imp.chmod                                     ; int chmod(const char *path, int mode)\l0x00002f36      mov r8, qword [rsp]\l0x00002f3a      test eax, eax\l0x00002f3c      jne 0x2e1e\l"]
	"0x00002f42" [URL="dbg.main/0x00002f42", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f42      mov esi, 0x101                                         ; int oflag\l0x00002f47      mov rdi, r12                                           ; const char *path\l0x00002f4a      call dbg.open_safer\l0x00002f4f      mov r8, qword [rsp]\l0x00002f53      test eax, eax\l0x00002f55      mov ebx, eax\l0x00002f57      jns 0x2dcb\l"]
	"0x00002f5d" [URL="dbg.main/0x00002f5d", fillcolor="white",color="#767676", fontname="Courier",label="0x00002f5d      jmp 0x2e1e\l"]
	"0x00002f62" [URL="dbg.main/0x00002f62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dfa\l0x00002f62      mov rdi, r12                                           ; int64_t arg1\l0x00002f65      call dbg.xstrdup\l0x00002f6a      mov r14, rax\l0x00002f6d      mov rdi, rax                                           ; int64_t arg1\l0x00002f70      mov qword [ptr], rax\l0x00002f75      call dbg.last_component\l0x00002f7a      mov rdi, r14\l0x00002f7d      mov rbx, rax\l0x00002f80      call dbg.dir_name\l0x00002f85      xor edi, edi                                           ; int64_t arg1\l0x00002f87      mov esi, 3                                             ; int64_t arg2\l0x00002f8c      mov rdx, rax                                           ; int64_t arg3\l0x00002f8f      mov qword [var_40h], rax\l0x00002f94      call sym.quotearg_n_style_colon\l0x00002f99      mov rdi, rax                                           ; int64_t arg1\l0x00002f9c      call dbg.xstrdup\l0x00002fa1      cmp dword [var_68h], 3\l0x00002fa6      mov dword [fildes], 0xffffffff                         ; [0xffffffff:4]=-1 ; -1\l0x00002fae      mov qword [var_28h], rax\l0x00002fb3      je 0x3173\l"]
	"0x00002fb9" [URL="dbg.main/0x00002fb9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3188\l0x00002fb9      cmp byte [var_6ch], 0\l0x00002fbe      jne 0x3115\l"]
	"0x00002fc4" [URL="dbg.main/0x00002fc4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3139\l0x00002fc4      cmp dword [var_68h], 1\l0x00002fc9      je 0x30a0\l"]
	"0x00002fcf" [URL="dbg.main/0x00002fcf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fcf      mov rdi, rbx                                           ; int64_t arg1\l0x00002fd2      call dbg.base_len\l0x00002fd7      mov r14, qword [ptr]\l0x00002fdc      mov qword [var_38h], rbp\l0x00002fe1      lea rcx, [rax - 1]\l0x00002fe5      movzx eax, byte [rsp]\l0x00002fe9      mov qword [var_48h], r13\l0x00002fee      mov r13, rcx\l0x00002ff1      mov byte [var_18h], al\l0x00002ff5      mov rax, rbx\l0x00002ff8      sub rax, r14\l0x00002ffb      add rax, r12\l0x00002ffe      mov qword [s1], rax\l"]
	"0x00003003" [URL="dbg.main/0x00003003", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31f1\l0x00003003      lea rdx, [r13 + 1]\l0x00003007      cmp r13, 0xffffffffffffffff\l0x0000300b      je 0x3096\l"]
	"0x00003011" [URL="dbg.main/0x00003011", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003011      mov esi, 0x30                                          ; '0' ; int c\l0x00003016      mov rdi, rbx                                           ; void *s\l0x00003019      call sym.imp.memset                                    ; void *memset(void *s, int c, size_t n)\l0x0000301e      mov byte [rbx + r13 + 1], 0\l"]
	"0x00003024" [URL="dbg.main/0x00003024", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3094\l0x00003024      mov rcx, r14                                           ; int64_t arg4\l0x00003027      mov edx, 0xffffff9c                                    ; 4294967196 ; int64_t arg3\l0x0000302c      mov rsi, r12                                           ; int64_t arg2\l0x0000302f      mov edi, 0xffffff9c                                    ; 4294967196 ; int64_t arg1\l0x00003034      mov r8d, 1                                             ; int64_t arg5\l0x0000303a      call dbg.renameatu\l0x0000303f      test eax, eax\l0x00003041      je 0x318d\l"]
	"0x00003047" [URL="dbg.main/0x00003047", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003047      call sym.imp.__errno_location\l0x0000304c      cmp dword [rax], 0x11\l0x0000304f      jne 0x31ed\l"]
	"0x00003055" [URL="dbg.main/0x00003055", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003055      lea rbp, [rbx + r13]\l0x00003059      jmp 0x3074\l"]
	"0x00003060" [URL="dbg.main/0x00003060", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x308f\l0x00003060      mov byte [rbp], 0x30                                   ; '0'\l0x00003064      lea rax, [rbp - 1]\l0x00003068      cmp rbx, rbp\l0x0000306b      je 0x31ed\l"]
	"0x00003071" [URL="dbg.main/0x00003071", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003071      mov rbp, rax\l"]
	"0x00003074" [URL="dbg.main/0x00003074", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3059\l0x00003074      movsx esi, byte [rbp]                                  ; int c\l0x00003078      mov rdi, r15                                           ; const char *s\l0x0000307b      call sym.imp.strchr                                    ; char *strchr(const char *s, int c)\l0x00003080      test rax, rax\l0x00003083      je 0x32c0\l"]
	"0x00003089" [URL="dbg.main/0x00003089", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003089      movzx eax, byte [rax + 1]\l0x0000308d      test al, al\l0x0000308f      je 0x3060\l"]
	"0x00003091" [URL="dbg.main/0x00003091", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003091      mov byte [rbp], al\l0x00003094      jmp 0x3024\l"]
	"0x00003096" [URL="dbg.main/0x00003096", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x300b\l0x00003096      mov r13, qword [var_48h]\l0x0000309b      mov rbp, qword [var_38h]\l"]
	"0x000030a0" [URL="dbg.main/0x000030a0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fc9\l0x000030a0      mov rdi, r12                                           ; const char *path\l0x000030a3      call sym.imp.unlink                                    ; int unlink(const char *path)\l0x000030a8      test eax, eax\l0x000030aa      jne 0x313e\l"]
	"0x000030b0" [URL="dbg.main/0x000030b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030b0      cmp byte [var_6ch], 0\l0x000030b5      jne 0x3297\l"]
	"0x000030bb" [URL="dbg.main/0x000030bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x316e, 0x32bb\l0x000030bb      mov ebx, dword [fildes]\l0x000030bf      test ebx, ebx\l0x000030c1      jns 0x3227\l"]
	"0x000030c7" [URL="dbg.main/0x000030c7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x325a, 0x3292\l0x000030c7      mov rdi, qword [ptr]                                   ; void *ptr\l; DATA XREF from dbg.version_etc_arn @ 0x91fe\l0x000030cc      call sym.imp.free                                      ; void free(void *ptr)\l0x000030d1      mov rdi, qword [var_40h]                               ; void *ptr\l0x000030d6      call sym.imp.free                                      ; void free(void *ptr)\l0x000030db      mov rdi, qword [var_28h]                               ; void *ptr\l0x000030e0      call sym.imp.free                                      ; void free(void *ptr)\l0x000030e5      jmp 0x2e00\l"]
	"0x000030ea" [URL="dbg.main/0x000030ea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2cc4\l0x000030ea      mov edx, 5\l0x000030ef      lea rsi, str.missing_file_operand                      ; 0xb21b ; \"missing file operand\"\l0x000030f6      xor edi, edi\l0x000030f8      call sym.imp.dcgettext\l0x000030fd      xor esi, esi                                           ; int errname\l0x000030ff      xor edi, edi                                           ; int status\l0x00003101      mov rdx, rax                                           ; char *format\l0x00003104      xor eax, eax\l; DATA XREF from dbg.version_etc_arn @ 0x939b\l0x00003106      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000310b" [URL="dbg.main/0x0000310b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 103...109:                                                    ; from 0x00002b03\l;-- case 111:                                                          ; from 0x00002b03\l;-- case 112...114:                                                    ; from 0x00002b03\l;-- case 116:                                                          ; from 0x00002b03\l;-- case 119:                                                          ; from 0x00002b03\l;-- default:                                                           ; from 0x2b03\l; CODE XREFS from dbg.main @ 0x2ae1, 0x2af6, 0x2b03, 0x2ca0\l0x0000310b      mov edi, 1                                             ; int64_t arg1\l0x00003110      call dbg.usage\l"]
	"0x00003115" [URL="dbg.main/0x00003115", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fbe\l0x00003115      xor edi, edi\l0x00003117      mov edx, 5\l0x0000311c      lea rsi, str._s:_removing                              ; 0xb255 ; \"%s: removing\"\l0x00003123      call sym.imp.dcgettext\l0x00003128      mov rcx, rbp\l0x0000312b      xor esi, esi                                           ; int errname\l0x0000312d      xor edi, edi                                           ; int status\l0x0000312f      mov rdx, rax                                           ; char *format\l0x00003132      xor eax, eax\l0x00003134      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003139      jmp 0x2fc4\l"]
	"0x0000313e" [URL="dbg.main/0x0000313e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30aa\l0x0000313e      mov edx, 5\l0x00003143      lea rsi, str._s:_failed_to_remove                      ; 0xb280 ; \"%s: failed to remove\"\l0x0000314a      xor edi, edi\l0x0000314c      call sym.imp.dcgettext\l0x00003151      mov r12, rax\l0x00003154      call sym.imp.__errno_location\l0x00003159      mov rcx, rbp\l0x0000315c      mov rdx, r12                                           ; char *format\l0x0000315f      xor edi, edi                                           ; int status\l0x00003161      mov esi, dword [rax]                                   ; int errname\l0x00003163      xor eax, eax\l0x00003165      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l; DATA XREF from dbg.version_etc_arn @ 0x92e7\l0x0000316a      mov byte [rsp], 0\l0x0000316e      jmp 0x30bb\l"]
	"0x00003173" [URL="dbg.main/0x00003173", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fb3\l0x00003173      mov rdi, qword [var_40h]                               ; const char *path\l0x00003178      mov esi, 0x10900                                       ; int oflag\l0x0000317d      xor eax, eax\l0x0000317f      call dbg.open_safer\l0x00003184      mov dword [fildes], eax\l0x00003188      jmp 0x2fb9\l"]
	"0x0000318d" [URL="dbg.main/0x0000318d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3041\l0x0000318d      cmp dword [fildes], 0\l0x00003192      jns 0x31f6\l"]
	"0x00003194" [URL="dbg.main/0x00003194", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3203, 0x3222\l0x00003194      cmp byte [var_6ch], 0\l0x00003199      je 0x31dc\l"]
	"0x0000319b" [URL="dbg.main/0x0000319b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000319b      mov rcx, qword [var_38h]\l0x000031a0      cmp byte [var_18h], 0\l0x000031a5      mov edx, 5\l0x000031aa      lea rsi, str._s:_renamed_to__s                         ; 0xb26e ; \"%s: renamed to %s\"\l0x000031b1      cmove rcx, r12\l0x000031b5      xor edi, edi\l0x000031b7      mov qword [var_18h], rcx\l0x000031bc      call sym.imp.dcgettext\l0x000031c1      mov rcx, qword [var_18h]\l0x000031c6      mov r8, r14\l0x000031c9      xor esi, esi                                           ; int errname\l0x000031cb      mov rdx, rax                                           ; char *format\l0x000031ce      xor edi, edi                                           ; int status\l0x000031d0      xor eax, eax\l0x000031d2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000031d7      mov byte [var_18h], 0\l"]
	"0x000031dc" [URL="dbg.main/0x000031dc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3199\l0x000031dc      mov rdi, qword [s1]                                    ; void *s1\l0x000031e1      lea rdx, [r13 + 2]                                     ; size_t n\l0x000031e5      mov rsi, rbx                                           ; const void *s2\l0x000031e8      call sym.imp.memcpy                                    ; void *memcpy(void *s1, const void *s2, size_t n)\l"]
	"0x000031ed" [URL="dbg.main/0x000031ed", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x304f, 0x306b\l0x000031ed      sub r13, 1\l0x000031f1      jmp 0x3003\l"]
	"0x000031f6" [URL="dbg.main/0x000031f6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3192\l0x000031f6      mov ebp, dword [fildes]\l0x000031fa      mov edi, ebp\l0x000031fc      call sym.imp.fdatasync\l0x00003201      test eax, eax\l0x00003203      je 0x3194\l"]
	"0x00003205" [URL="dbg.main/0x00003205", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003205      mov rsi, qword [var_28h]                               ; int64_t arg2\l0x0000320a      mov edi, ebp                                           ; int64_t arg1\l0x0000320c      call sym.dosync.part.0\l0x00003211      movzx ecx, byte [rsp]\l0x00003215      test eax, eax\l0x00003217      mov eax, 0\l0x0000321c      cmovne ecx, eax\l0x0000321f      mov byte [rsp], cl\l0x00003222      jmp 0x3194\l"]
	"0x00003227" [URL="dbg.main/0x00003227", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30c1\l0x00003227      mov edi, ebx\l0x00003229      call sym.imp.fdatasync\l0x0000322e      test eax, eax\l0x00003230      je 0x324f\l"]
	"0x00003232" [URL="dbg.main/0x00003232", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003232      mov rsi, qword [var_28h]                               ; int64_t arg2\l0x00003237      mov edi, ebx                                           ; int64_t arg1\l0x00003239      call sym.dosync.part.0\l0x0000323e      movzx ecx, byte [rsp]\l0x00003242      test eax, eax\l0x00003244      mov eax, 0\l0x00003249      cmovne ecx, eax\l0x0000324c      mov byte [rsp], cl\l"]
	"0x0000324f" [URL="dbg.main/0x0000324f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3230\l0x0000324f      mov edi, dword [fildes]                                ; int fildes\l0x00003253      call sym.imp.close                                     ; int close(int fildes)\l0x00003258      test eax, eax\l0x0000325a      je 0x30c7\l"]
	"0x00003260" [URL="dbg.main/0x00003260", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003260      mov edx, 5\l0x00003265      lea rsi, str._s:_failed_to_close                       ; 0xb241 ; \"%s: failed to close\"\l0x0000326c      xor edi, edi\l0x0000326e      call sym.imp.dcgettext\l0x00003273      mov r12, rax\l0x00003276      call sym.imp.__errno_location\l0x0000327b      mov rcx, qword [var_28h]\l0x00003280      mov rdx, r12                                           ; char *format\l0x00003283      xor edi, edi                                           ; int status\l0x00003285      mov esi, dword [rax]                                   ; int errname\l0x00003287      xor eax, eax\l0x00003289      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000328e      mov byte [rsp], 0\l0x00003292      jmp 0x30c7\l"]
	"0x00003297" [URL="dbg.main/0x00003297", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30b5\l0x00003297      xor edi, edi\l0x00003299      mov edx, 5\l0x0000329e      lea rsi, str._s:_removed                               ; 0xb295 ; \"%s: removed\"\l0x000032a5      call sym.imp.dcgettext\l0x000032aa      mov rcx, rbp\l0x000032ad      xor esi, esi                                           ; int errname\l; DATA XREF from dbg.version_etc_arn @ 0x9007\l0x000032af      xor edi, edi                                           ; int status\l0x000032b1      mov rdx, rax                                           ; char *format\l; DATA XREF from dbg.version_etc_arn @ 0x8fef\l0x000032b4      xor eax, eax\l0x000032b6      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000032bb      jmp 0x30bb\l"]
	"0x000032c0" [URL="dbg.main/0x000032c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3083\l0x000032c0      lea rcx, obj.__PRETTY_FUNCTION__.0                     ; 0xbc10 ; \"incname\" ; const char *function\l0x000032c7      mov edx, 0x3ea                                         ; unsigned int line\l0x000032cc      lea rsi, str.src_shred.c                               ; 0xb262 ; \"src/shred.c\" ; const char *file\l0x000032d3      lea rdi, [0x0000b2d6]                                  ; \"p\" ; const char *assertion\l0x000032da      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x000032df" [URL="dbg.main/0x000032df", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e9a\l0x000032df      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x000032e4" [URL="dbg.main/0x000032e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b32\l0x000032e4      mov edx, 5\l0x000032e9      lea rsi, str.multiple_random_sources_specified         ; 0xbb18 ; \"multiple random sources specified\"\l0x000032f0      xor edi, edi\l0x000032f2      call sym.imp.dcgettext\l0x000032f7      xor esi, esi                                           ; int errname\l0x000032f9      mov edi, 1                                             ; int status\l0x000032fe      mov rdx, rax                                           ; char *format\l0x00003301      xor eax, eax\l0x00003303      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003308" [URL="dbg.main/0x00003308", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ce1\l0x00003308      cmp qword [rsp], 0\l0x0000330d      je 0x333f\l"]
	"0x0000330f" [URL="dbg.main/0x0000330f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x334a\l0x0000330f      mov rdx, qword [rsp]                                   ; int64_t arg3\l; DATA XREF from dbg.version_etc_arn @ 0x9046\l0x00003313      mov esi, 3                                             ; int64_t arg2\l0x00003318      xor edi, edi                                           ; int64_t arg1\l0x0000331a      call sym.quotearg_n_style_colon\l0x0000331f      mov r12, rax\l0x00003322      call sym.imp.__errno_location\l0x00003327      mov rcx, r12\l0x0000332a      mov edi, 1                                             ; int status\l0x0000332f      lea rdx, [0x0000bdc7]                                  ; \"%s\" ; char *format\l0x00003336      mov esi, dword [rax]                                   ; int errname\l0x00003338      xor eax, eax\l0x0000333a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000333f" [URL="dbg.main/0x0000333f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x330d\l0x0000333f      lea rax, str.getrandom                                 ; 0xb1a1\l0x00003346      mov qword [rsp], rax\l0x0000334a      jmp 0x330f\l"]
        "0x00002a10" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002ac0" -> "0x00002cba" [color="#13a10e"];
        "0x00002ac0" -> "0x00002adc" [color="#c50f1f"];
        "0x00002adc" -> "0x0000310b" [color="#13a10e"];
        "0x00002adc" -> "0x00002ae7" [color="#c50f1f"];
        "0x00002ae7" -> "0x00002c60" [color="#13a10e"];
        "0x00002ae7" -> "0x00002af0" [color="#c50f1f"];
        "0x00002af0" -> "0x0000310b" [color="#13a10e"];
        "0x00002af0" -> "0x00002afc" [color="#c50f1f"];
        "0x00002afc" -> "0x00002c50" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002c10" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002bc0" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002b70" [color="#3a96dd"];
        "0x00002afc" -> "0x00002b60" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002b50" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002b40" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x0000310b" [color="#3a96dd"];
        "0x00002afc" -> "0x00002b10" [color="#3a96dd"];
        "0x00002b10" -> "0x00002b38" [color="#13a10e"];
        "0x00002b10" -> "0x00002b20" [color="#c50f1f"];
        "0x00002b20" -> "0x000032e4" [color="#13a10e"];
        "0x00002b20" -> "0x00002b38" [color="#c50f1f"];
        "0x00002b38" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002b40" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002b50" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002b60" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002b70" -> "0x00002cad" [color="#13a10e"];
        "0x00002b70" -> "0x00002b80" [color="#c50f1f"];
        "0x00002b80" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002bc0" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002c10" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002c50" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002c60" -> "0x00002c9b" [color="#13a10e"];
        "0x00002c60" -> "0x00002c67" [color="#c50f1f"];
        "0x00002c9b" -> "0x0000310b" [color="#13a10e"];
        "0x00002c9b" -> "0x00002ca6" [color="#c50f1f"];
        "0x00002ca6" -> "0x00002cad" [color="#3a96dd"];
        "0x00002cad" -> "0x00002ac0" [color="#3a96dd"];
        "0x00002cba" -> "0x000030ea" [color="#13a10e"];
        "0x00002cba" -> "0x00002cca" [color="#c50f1f"];
        "0x00002cca" -> "0x00003308" [color="#13a10e"];
        "0x00002cca" -> "0x00002ce7" [color="#c50f1f"];
        "0x00002ce7" -> "0x00002e7c" [color="#13a10e"];
        "0x00002ce7" -> "0x00002cfb" [color="#c50f1f"];
        "0x00002cfb" -> "0x00002d85" [color="#3a96dd"];
        "0x00002d20" -> "0x00002daf" [color="#13a10e"];
        "0x00002d20" -> "0x00002d2c" [color="#c50f1f"];
        "0x00002d2c" -> "0x00002ee7" [color="#13a10e"];
        "0x00002d2c" -> "0x00002d4c" [color="#c50f1f"];
        "0x00002d4c" -> "0x00002e51" [color="#13a10e"];
        "0x00002d4c" -> "0x00002d55" [color="#c50f1f"];
        "0x00002d55" -> "0x00002d6a" [color="#3a96dd"];
        "0x00002d6a" -> "0x00002d6e" [color="#3a96dd"];
        "0x00002d6e" -> "0x00002e81" [color="#13a10e"];
        "0x00002d6e" -> "0x00002d85" [color="#c50f1f"];
        "0x00002d85" -> "0x00002d20" [color="#13a10e"];
        "0x00002d85" -> "0x00002daf" [color="#c50f1f"];
        "0x00002daf" -> "0x00002e0d" [color="#13a10e"];
        "0x00002daf" -> "0x00002dcb" [color="#c50f1f"];
        "0x00002dcb" -> "0x00002eb2" [color="#13a10e"];
        "0x00002dcb" -> "0x00002def" [color="#c50f1f"];
        "0x00002def" -> "0x00002e00" [color="#13a10e"];
        "0x00002def" -> "0x00002df5" [color="#c50f1f"];
        "0x00002df5" -> "0x00002f62" [color="#13a10e"];
        "0x00002df5" -> "0x00002e00" [color="#c50f1f"];
        "0x00002e00" -> "0x00002d6e" [color="#3a96dd"];
        "0x00002e0d" -> "0x00002f1a" [color="#13a10e"];
        "0x00002e0d" -> "0x00002e1e" [color="#c50f1f"];
        "0x00002e1e" -> "0x00002e00" [color="#3a96dd"];
        "0x00002e51" -> "0x00002d6a" [color="#3a96dd"];
        "0x00002e7c" -> "0x00002e81" [color="#3a96dd"];
        "0x00002e81" -> "0x000032df" [color="#13a10e"];
        "0x00002e81" -> "0x00002ea0" [color="#c50f1f"];
        "0x00002eb2" -> "0x00002e00" [color="#3a96dd"];
        "0x00002ee7" -> "0x00002d6a" [color="#3a96dd"];
        "0x00002f1a" -> "0x00002e1e" [color="#13a10e"];
        "0x00002f1a" -> "0x00002f25" [color="#c50f1f"];
        "0x00002f25" -> "0x00002e1e" [color="#13a10e"];
        "0x00002f25" -> "0x00002f42" [color="#c50f1f"];
        "0x00002f42" -> "0x00002dcb" [color="#13a10e"];
        "0x00002f42" -> "0x00002f5d" [color="#c50f1f"];
        "0x00002f5d" -> "0x00002e1e" [color="#3a96dd"];
        "0x00002f62" -> "0x00003173" [color="#13a10e"];
        "0x00002f62" -> "0x00002fb9" [color="#c50f1f"];
        "0x00002fb9" -> "0x00003115" [color="#13a10e"];
        "0x00002fb9" -> "0x00002fc4" [color="#c50f1f"];
        "0x00002fc4" -> "0x000030a0" [color="#13a10e"];
        "0x00002fc4" -> "0x00002fcf" [color="#c50f1f"];
        "0x00002fcf" -> "0x00003003" [color="#3a96dd"];
        "0x00003003" -> "0x00003096" [color="#13a10e"];
        "0x00003003" -> "0x00003011" [color="#c50f1f"];
        "0x00003011" -> "0x00003024" [color="#3a96dd"];
        "0x00003024" -> "0x0000318d" [color="#13a10e"];
        "0x00003024" -> "0x00003047" [color="#c50f1f"];
        "0x00003047" -> "0x000031ed" [color="#13a10e"];
        "0x00003047" -> "0x00003055" [color="#c50f1f"];
        "0x00003055" -> "0x00003074" [color="#3a96dd"];
        "0x00003060" -> "0x000031ed" [color="#13a10e"];
        "0x00003060" -> "0x00003071" [color="#c50f1f"];
        "0x00003071" -> "0x00003074" [color="#3a96dd"];
        "0x00003074" -> "0x000032c0" [color="#13a10e"];
        "0x00003074" -> "0x00003089" [color="#c50f1f"];
        "0x00003089" -> "0x00003060" [color="#13a10e"];
        "0x00003089" -> "0x00003091" [color="#c50f1f"];
        "0x00003091" -> "0x00003024" [color="#3a96dd"];
        "0x00003096" -> "0x000030a0" [color="#3a96dd"];
        "0x000030a0" -> "0x0000313e" [color="#13a10e"];
        "0x000030a0" -> "0x000030b0" [color="#c50f1f"];
        "0x000030b0" -> "0x00003297" [color="#13a10e"];
        "0x000030b0" -> "0x000030bb" [color="#c50f1f"];
        "0x000030bb" -> "0x00003227" [color="#13a10e"];
        "0x000030bb" -> "0x000030c7" [color="#c50f1f"];
        "0x000030c7" -> "0x00002e00" [color="#3a96dd"];
        "0x000030ea" -> "0x0000310b" [color="#3a96dd"];
        "0x0000310b" -> "0x00003115" [color="#3a96dd"];
        "0x00003115" -> "0x00002fc4" [color="#3a96dd"];
        "0x0000313e" -> "0x000030bb" [color="#3a96dd"];
        "0x00003173" -> "0x00002fb9" [color="#3a96dd"];
        "0x0000318d" -> "0x000031f6" [color="#13a10e"];
        "0x0000318d" -> "0x00003194" [color="#c50f1f"];
        "0x00003194" -> "0x000031dc" [color="#13a10e"];
        "0x00003194" -> "0x0000319b" [color="#c50f1f"];
        "0x0000319b" -> "0x000031dc" [color="#3a96dd"];
        "0x000031dc" -> "0x000031ed" [color="#3a96dd"];
        "0x000031ed" -> "0x00003003" [color="#3a96dd"];
        "0x000031f6" -> "0x00003194" [color="#13a10e"];
        "0x000031f6" -> "0x00003205" [color="#c50f1f"];
        "0x00003205" -> "0x00003194" [color="#3a96dd"];
        "0x00003227" -> "0x0000324f" [color="#13a10e"];
        "0x00003227" -> "0x00003232" [color="#c50f1f"];
        "0x00003232" -> "0x0000324f" [color="#3a96dd"];
        "0x0000324f" -> "0x000030c7" [color="#13a10e"];
        "0x0000324f" -> "0x00003260" [color="#c50f1f"];
        "0x00003260" -> "0x000030c7" [color="#3a96dd"];
        "0x00003297" -> "0x000030bb" [color="#3a96dd"];
        "0x000032e4" -> "0x00003308" [color="#3a96dd"];
        "0x00003308" -> "0x0000333f" [color="#13a10e"];
        "0x00003308" -> "0x0000330f" [color="#c50f1f"];
        "0x0000330f" -> "0x0000333f" [color="#3a96dd"];
        "0x0000333f" -> "0x0000330f" [color="#3a96dd"];
}
