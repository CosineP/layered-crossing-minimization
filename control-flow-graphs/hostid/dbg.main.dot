digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x000025e0" [URL="dbg.main/0x000025e0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x26f8\l256: int dbg.main (int argc, char **argv);\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x000025e0      endbr64                                                ; int main(int argc,char ** argv);\l0x000025e4      push r12\l0x000025e6      lea r12, [0x00007085]                                  ; \"coreutils\"\l0x000025ed      push rbp\l0x000025ee      mov ebp, edi                                           ; argc\l0x000025f0      push rbx\l0x000025f1      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x000025f4      mov rbx, rsi                                           ; argv\l0x000025f7      call dbg.set_program_name\l0x000025fc      lea rsi, [0x00007721]                                  ; const char *locale\l0x00002603      mov edi, 6                                             ; int category\l0x00002608      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000260d      lea rsi, str._usr_local_share_locale                   ; 0x70ae ; \"/usr/local/share/locale\" ; char *dirname\l0x00002614      mov rdi, r12                                           ; char *domainname\l0x00002617      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x0000261c      mov rdi, r12                                           ; char *domainname\l0x0000261f      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002624      lea rdi, [dbg.close_stdout]                            ; 0x2b10 ; func function\l0x0000262b      call sym.atexit                                        ; int atexit(func function)\l0x00002630      mov r9d, 1                                             ; func rtld_fini\l0x00002636      mov rsi, rbx                                           ; int argc\l0x00002639      mov edi, ebp                                           ; func main\l0x0000263b      sub rsp, 8\l0x0000263f      lea rax, str.Jim_Meyering                              ; 0x70c6 ; \"Jim Meyering\"\l0x00002646      mov r8, qword [obj.Version]                            ; [0xa010:8]=0x7283 ; func fini\l0x0000264d      lea rcx, str.GNU_coreutils                             ; 0x7081 ; \"GNU coreutils\" ; func init\l0x00002654      push 0\l0x00002656      lea rdx, str.hostid                                    ; 0x7004 ; \"hostid\" ; int64_t arg5\l0x0000265d      push rax\l0x0000265e      lea rax, [dbg.usage]                                   ; 0x27d0\l0x00002665      push rax                                               ; 0x27d0\l                                                                       ; dbg.usage\l0x00002666      xor eax, eax\l0x00002668      call dbg.parse_gnu_standard_options_only\l0x0000266d      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xa090:4]=0\l0x00002674      add rsp, 0x20\l0x00002678      cmp eax, ebp\l0x0000267a      jl 0x269d\l"]
	"0x0000267c" [URL="dbg.main/0x0000267c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000267c      call sym.imp.gethostid\l0x00002681      lea rsi, str._08x_n                                    ; 0x70e4 ; \"%08x\\n\"\l0x00002688      mov edi, 1\l0x0000268d      mov edx, eax\l0x0000268f      xor eax, eax\l0x00002691      call sym.imp.__printf_chk\l0x00002696      pop rbx\l0x00002697      xor eax, eax\l0x00002699      pop rbp\l0x0000269a      pop r12\l0x0000269c      ret\l"]
	"0x0000269d" [URL="dbg.main/0x0000269d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x267a\l0x0000269d      mov rdi, qword [rbx + rax*8]                           ; int64_t arg1\l0x000026a1      call dbg.quote\l0x000026a6      mov edx, 5\l0x000026ab      lea rsi, str.extra_operand__s                          ; 0x70d3 ; \"extra operand %s\"\l0x000026b2      xor edi, edi\l0x000026b4      mov r12, rax\l0x000026b7      call sym.imp.dcgettext\l0x000026bc      xor edi, edi                                           ; int status\l0x000026be      mov rcx, r12\l0x000026c1      xor esi, esi                                           ; int errname\l0x000026c3      mov rdx, rax                                           ; char *format\l0x000026c6      xor eax, eax\l0x000026c8      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x000026cd      mov edi, 1                                             ; int64_t arg1\l0x000026d2      call dbg.usage\l0x000026d7      nop word [rax + rax]\l"]
        "0x000025e0" -> "0x0000269d" [color="#13a10e"];
        "0x000025e0" -> "0x0000267c" [color="#c50f1f"];
}
