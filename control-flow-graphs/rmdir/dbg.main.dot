digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002730" [URL="dbg.main/0x00002730", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2bd8\l1134: int dbg.main (int argc, char **argv);\l; var stat st @ rbp-0xd0\l; var int64_t var_fh @ rsp+0xf\l; var int64_t var_10h @ rsp+0x10\l; var int64_t var_28h @ rsp+0x28\l; var int64_t var_a8h @ rsp+0xa8\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002730      endbr64                                                ; int main(int argc,char ** argv);\l0x00002734      push r15\l0x00002736      push r14\l0x00002738      push r13\l0x0000273a      lea r13, obj.longopts                                  ; 0xcae0 ; \"1\\x91\"\l0x00002741      push r12\l0x00002743      lea r12, [0x00009084]                                  ; \"coreutils\"\l0x0000274a      push rbp\l0x0000274b      mov ebp, edi                                           ; argc\l0x0000274d      push rbx\l0x0000274e      mov rbx, rsi                                           ; argv\l0x00002751      sub rsp, 0xb8\l0x00002758      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x0000275b      mov rax, qword fs:[0x28]\l0x00002764      mov qword [var_a8h], rax\l0x0000276c      xor eax, eax\l0x0000276e      call dbg.set_program_name\l0x00002773      lea rsi, [0x00009921]                                  ; const char *locale\l0x0000277a      mov edi, 6                                             ; int category\l0x0000277f      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002784      lea rsi, str._usr_local_share_locale                   ; 0x90df ; \"/usr/local/share/locale\" ; char *dirname\l0x0000278b      mov rdi, r12                                           ; char *domainname\l0x0000278e      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002793      mov rdi, r12                                           ; char *domainname\l0x00002796      lea r12, [0x00009107]                                  ; \"pv\"\l0x0000279d      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000027a2      lea rdi, [dbg.close_stdout]                            ; 0x3250 ; func function\l0x000027a9      call sym.atexit                                        ; int atexit(func function)\l0x000027ae      mov byte [obj.remove_empty_parents], 0                 ; [0xd0ab:1]=1\l"]
	"0x000027b5" [URL="dbg.main/0x000027b5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x27e8, 0x2842, 0x2867\l0x000027b5      xor r8d, r8d\l0x000027b8      mov rcx, r13\l0x000027bb      mov rdx, r12\l0x000027be      mov rsi, rbx\l0x000027c1      mov edi, ebp\l0x000027c3      call sym.imp.getopt_long\l0x000027c8      cmp eax, 0xffffffff\l0x000027cb      je 0x286c\l"]
	"0x000027d1" [URL="dbg.main/0x000027d1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027d1      cmp eax, 0x70\l0x000027d4      je 0x2860\l"]
	"0x000027da" [URL="dbg.main/0x000027da", fillcolor="white",color="#767676", fontname="Courier",label="0x000027da      jle 0x27f0\l"]
	"0x000027dc" [URL="dbg.main/0x000027dc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027dc      cmp eax, 0x76\l0x000027df      jne 0x2830\l"]
	"0x000027e1" [URL="dbg.main/0x000027e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027e1      mov byte [obj.verbose], 1                              ; [0xd0a9:1]=1\l0x000027e8      jmp 0x27b5\l"]
	"0x000027f0" [URL="dbg.main/0x000027f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27da\l0x000027f0      cmp eax, 0xffffff7d                                    ; 4294967165\l0x000027f5      jne 0x2847\l"]
	"0x000027f7" [URL="dbg.main/0x000027f7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000027f7      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd088:8]=0 ; int64_t arg1\l0x000027fe      mov rcx, qword [obj.Version]                           ; [0xd010:8]=0x948b ; int64_t arg5\l0x00002805      xor eax, eax\l0x00002807      xor r9d, r9d                                           ; int64_t arg_c0h\l0x0000280a      lea r8, str.David_MacKenzie                            ; 0x90f7 ; \"David MacKenzie\" ; int64_t arg6\l0x00002811      lea rdx, str.GNU_coreutils                             ; 0x9080 ; \"GNU coreutils\" ; int64_t arg3\l0x00002818      lea rsi, [global_program]                              ; 0x9004 ; \"rmdir\" ; int64_t arg2\l0x0000281f      call dbg.version_etc\l0x00002824      xor edi, edi                                           ; int status\l0x00002826      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002830" [URL="dbg.main/0x00002830", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27df\l0x00002830      cmp eax, 0x80\l0x00002835      jne 0x2b5e\l"]
	"0x0000283b" [URL="dbg.main/0x0000283b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000283b      mov byte [obj.ignore_fail_on_non_empty], 1             ; [0xd0aa:1]=1\l0x00002842      jmp 0x27b5\l"]
	"0x00002847" [URL="dbg.main/0x00002847", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27f5\l0x00002847      cmp eax, 0xffffff7e                                    ; 4294967166\l0x0000284c      jne 0x2b5e\l"]
	"0x00002852" [URL="dbg.main/0x00002852", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002852      xor edi, edi                                           ; int64_t arg1\l0x00002854      call dbg.usage\l0x00002859      nop dword [rax]\l"]
	"0x00002860" [URL="dbg.main/0x00002860", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27d4\l0x00002860      mov byte [obj.remove_empty_parents], 1                 ; [0xd0ab:1]=1\l0x00002867      jmp 0x27b5\l"]
	"0x0000286c" [URL="dbg.main/0x0000286c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x27cb\l0x0000286c      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd090:4]=1\l0x00002872      cmp eax, ebp\l0x00002874      je 0x2b3d\l"]
	"0x0000287a" [URL="dbg.main/0x0000287a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000287a      mov byte [var_fh], 1\l0x0000287f      lea r14, str.removing_directory___s                    ; 0x911a ; \"removing directory, %s\"\l0x00002886      jl 0x28c5\l"]
	"0x00002888" [URL="dbg.main/0x00002888", fillcolor="white",color="#767676", fontname="Courier",label="0x00002888      jmp 0x2a34\l"]
	"0x00002890" [URL="dbg.main/0x00002890", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x28d2, 0x2907\l0x00002890      mov rdi, r15\l0x00002893      call sym.imp.rmdir\l0x00002898      test eax, eax\l0x0000289a      jne 0x2909\l"]
	"0x0000289c" [URL="dbg.main/0x0000289c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000289c      movzx eax, byte [obj.remove_empty_parents]             ; [0xd0ab:1]=1\l0x000028a3      mov byte [rsp], al\l0x000028a6      test al, al\l0x000028a8      jne 0x2984\l"]
	"0x000028ae" [URL="dbg.main/0x000028ae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2921, 0x297f, 0x29fa, 0x2ba9\l0x000028ae      mov eax, dword [obj.optind]                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd090:4]=1\l0x000028b4      add eax, 1\l0x000028b7      mov dword [obj.optind], eax                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xd090:4]=1\l0x000028bd      cmp eax, ebp\l0x000028bf      jge 0x2a34\l"]
	"0x000028c5" [URL="dbg.main/0x000028c5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2886\l0x000028c5      cdqe\l0x000028c7      cmp byte [obj.verbose], 0                              ; [0xd0a9:1]=1\l0x000028ce      mov r15, qword [rbx + rax*8]\l0x000028d2      je 0x2890\l"]
	"0x000028d4" [URL="dbg.main/0x000028d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000028d4      mov rsi, r15                                           ; int64_t arg2\l0x000028d7      mov edi, 4                                             ; int64_t arg1\l0x000028dc      call sym.quotearg_style\l0x000028e1      mov rsi, r14\l0x000028e4      xor edi, edi\l0x000028e6      mov edx, 5\l0x000028eb      mov r12, rax\l0x000028ee      call sym.imp.dcgettext\l0x000028f3      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd088:8]=0 ; int64_t arg1\l0x000028fa      mov rdx, r12                                           ; int64_t arg3\l0x000028fd      mov rsi, rax                                           ; int64_t arg2\l0x00002900      xor eax, eax\l0x00002902      call dbg.prog_fprintf\l0x00002907      jmp 0x2890\l"]
	"0x00002909" [URL="dbg.main/0x00002909", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x289a\l0x00002909      call sym.imp.__errno_location\l0x0000290e      mov rsi, r15                                           ; const char *path\l0x00002911      mov r13d, dword [rax]\l0x00002914      mov r12, rax\l0x00002917      mov edi, r13d                                          ; int64_t arg1\l0x0000291a      call dbg.ignorable_failure\l0x0000291f      test al, al\l0x00002921      jne 0x28ae\l"]
	"0x00002923" [URL="dbg.main/0x00002923", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002923      cmp r13d, 0x14\l0x00002927      jne 0x2945\l"]
	"0x00002929" [URL="dbg.main/0x00002929", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002929      mov esi, 0x2f                                          ; '/' ; int c\l0x0000292e      mov rdi, r15                                           ; const char *s\l0x00002931      call sym.imp.strrchr                                   ; char *strrchr(const char *s, int c)\l0x00002936      test rax, rax\l0x00002939      je 0x2945\l"]
	"0x0000293b" [URL="dbg.main/0x0000293b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000293b      cmp byte [rax + 1], 0\l0x0000293f      je 0x2ac0\l"]
	"0x00002945" [URL="dbg.main/0x00002945", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2927, 0x2939, 0x2ae7, 0x2b2c, 0x2b38\l0x00002945      mov rsi, r15                                           ; int64_t arg2\l0x00002948      mov edi, 4                                             ; int64_t arg1\l0x0000294d      call sym.quotearg_style\l0x00002952      mov edx, 5\l0x00002957      lea rsi, str.failed_to_remove__s                       ; 0x90cb ; \"failed to remove %s\"\l0x0000295e      xor edi, edi\l0x00002960      mov r12, rax\l0x00002963      call sym.imp.dcgettext\l0x00002968      mov rcx, r12\l0x0000296b      mov esi, r13d                                          ; int errname\l0x0000296e      xor edi, edi                                           ; int status\l0x00002970      mov rdx, rax                                           ; char *format\l0x00002973      xor eax, eax\l0x00002975      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x0000297a      mov byte [var_fh], 0\l0x0000297f      jmp 0x28ae\l"]
	"0x00002984" [URL="dbg.main/0x00002984", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x28a8\l0x00002984      mov rdi, r15                                           ; int64_t arg1\l0x00002987      call dbg.strip_trailing_slashes\l0x0000298c      nop dword [rax]\l"]
	"0x00002990" [URL="dbg.main/0x00002990", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29e1\l0x00002990      mov esi, 0x2f                                          ; '/' ; int c\l0x00002995      mov rdi, r15                                           ; const char *s\l0x00002998      call sym.imp.strrchr                                   ; char *strrchr(const char *s, int c)\l0x0000299d      test rax, rax\l0x000029a0      je 0x29f2\l"]
	"0x000029a2" [URL="dbg.main/0x000029a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029a2      cmp r15, rax\l0x000029a5      jb 0x29b9\l"]
	"0x000029a7" [URL="dbg.main/0x000029a7", fillcolor="white",color="#767676", fontname="Courier",label="0x000029a7      jmp 0x29be\l"]
	"0x000029b0" [URL="dbg.main/0x000029b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29bc\l0x000029b0      sub rax, 1\l0x000029b4      cmp r15, rax\l0x000029b7      je 0x29be\l"]
	"0x000029b9" [URL="dbg.main/0x000029b9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29a5\l0x000029b9      cmp byte [rax], 0x2f\l0x000029bc      je 0x29b0\l"]
	"0x000029be" [URL="dbg.main/0x000029be", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x29a7, 0x29b7\l0x000029be      cmp byte [obj.verbose], 0                              ; [0xd0a9:1]=1\l0x000029c5      mov byte [rax + 1], 0\l0x000029c9      jne 0x29ff\l"]
	"0x000029cb" [URL="dbg.main/0x000029cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a32\l0x000029cb      mov rdi, r15\l0x000029ce      call sym.imp.rmdir\l0x000029d3      mov r12d, eax\l0x000029d6      call sym.imp.__errno_location\l0x000029db      mov r13d, dword [rax]\l0x000029de      test r12d, r12d\l0x000029e1      je 0x2990\l"]
	"0x000029e3" [URL="dbg.main/0x000029e3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e3      mov rsi, r15                                           ; const char *path\l0x000029e6      mov edi, r13d                                          ; int64_t arg1\l0x000029e9      call dbg.ignorable_failure\l0x000029ee      test al, al\l0x000029f0      je 0x2a6b\l"]
	"0x000029f2" [URL="dbg.main/0x000029f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x29a0, 0x2abb\l0x000029f2      movzx ecx, byte [rsp]\l0x000029f6      and byte [var_fh], cl\l0x000029fa      jmp 0x28ae\l"]
	"0x000029ff" [URL="dbg.main/0x000029ff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c9\l0x000029ff      mov rsi, r15                                           ; int64_t arg2\l0x00002a02      mov edi, 4                                             ; int64_t arg1\l0x00002a07      call sym.quotearg_style\l0x00002a0c      mov rsi, r14\l0x00002a0f      xor edi, edi\l0x00002a11      mov edx, 5\l0x00002a16      mov r12, rax\l0x00002a19      call sym.imp.dcgettext\l0x00002a1e      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xd088:8]=0 ; int64_t arg1\l0x00002a25      mov rdx, r12                                           ; int64_t arg3\l0x00002a28      mov rsi, rax                                           ; int64_t arg2\l0x00002a2b      xor eax, eax\l0x00002a2d      call dbg.prog_fprintf\l0x00002a32      jmp 0x29cb\l"]
	"0x00002a34" [URL="dbg.main/0x00002a34", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2888, 0x28bf\l0x00002a34      movzx r13d, byte [var_fh]\l0x00002a3a      xor r13d, 1\l0x00002a3e      movzx eax, r13b\l0x00002a42      mov rdx, qword [var_a8h]\l0x00002a4a      sub rdx, qword fs:[0x28]\l0x00002a53      jne 0x2bae\l"]
	"0x00002a59" [URL="dbg.main/0x00002a59", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a59      add rsp, 0xb8\l0x00002a60      pop rbx\l0x00002a61      pop rbp\l0x00002a62      pop r12\l0x00002a64      pop r13\l0x00002a66      pop r14\l0x00002a68      pop r15\l0x00002a6a      ret\l"]
	"0x00002a6b" [URL="dbg.main/0x00002a6b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29f0\l0x00002a6b      cmp r13d, 0x14\l0x00002a6f      lea rax, str.failed_to_remove_directory__s             ; 0x90ad ; \"failed to remove directory %s\"\l0x00002a76      mov rsi, r15                                           ; int64_t arg2\l0x00002a79      mov edi, 4                                             ; int64_t arg1\l0x00002a7e      lea r10, str.failed_to_remove__s                       ; 0x90cb ; \"failed to remove %s\"\l0x00002a85      cmovne r10, rax\l0x00002a89      mov qword [rsp], r10\l0x00002a8d      call sym.quotearg_style\l0x00002a92      mov rsi, qword [rsp]\l0x00002a96      mov edx, 5\l0x00002a9b      xor edi, edi\l0x00002a9d      mov r12, rax\l0x00002aa0      call sym.imp.dcgettext\l0x00002aa5      mov rcx, r12\l0x00002aa8      mov esi, r13d                                          ; int errname\l0x00002aab      xor edi, edi                                           ; int status\l0x00002aad      mov rdx, rax                                           ; char *format\l0x00002ab0      xor eax, eax\l0x00002ab2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002ab7      mov byte [rsp], 0\l0x00002abb      jmp 0x29f2\l"]
	"0x00002ac0" [URL="dbg.main/0x00002ac0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x293f\l0x00002ac0      lea rsi, [var_10h]\l0x00002ac5      mov rdi, r15\l0x00002ac8      mov qword [rsp], rsi\l0x00002acc      call sym.imp.stat\l0x00002ad1      mov rsi, qword [rsp]\l0x00002ad5      test eax, eax\l0x00002ad7      jne 0x2b31\l"]
	"0x00002ad9" [URL="dbg.main/0x00002ad9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ad9      mov eax, dword [var_28h]\l0x00002add      and eax, 0xf000\l0x00002ae2      cmp eax, 0x4000\l0x00002ae7      jne 0x2945\l"]
	"0x00002aed" [URL="dbg.main/0x00002aed", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b36\l0x00002aed      mov rdi, r15                                           ; int64_t arg1\l0x00002af0      mov qword [rsp], rsi\l0x00002af4      call dbg.xstrdup\l0x00002af9      mov rdi, r15                                           ; int64_t arg1\l0x00002afc      mov r12, rax\l0x00002aff      call dbg.strip_trailing_slashes\l0x00002b04      mov rsi, qword [rsp]                                   ; void *buf\l0x00002b08      mov rdi, r15                                           ; const char *path\l0x00002b0b      call sym.imp.lstat                                     ; void lstat(const char *path, void *buf)\l0x00002b10      test eax, eax\l0x00002b12      jne 0x2b24\l"]
	"0x00002b14" [URL="dbg.main/0x00002b14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b14      mov eax, dword [var_28h]\l0x00002b18      and eax, 0xf000\l0x00002b1d      cmp eax, 0xa000\l0x00002b22      je 0x2b68\l"]
	"0x00002b24" [URL="dbg.main/0x00002b24", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b12\l0x00002b24      mov rdi, r12                                           ; void *ptr\l0x00002b27      call sym.imp.free                                      ; void free(void *ptr)\l0x00002b2c      jmp 0x2945\l"]
	"0x00002b31" [URL="dbg.main/0x00002b31", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ad7\l0x00002b31      cmp dword [r12], 0x14\l0x00002b36      jne 0x2aed\l"]
	"0x00002b38" [URL="dbg.main/0x00002b38", fillcolor="white",color="#767676", fontname="Courier",label="0x00002b38      jmp 0x2945\l"]
	"0x00002b3d" [URL="dbg.main/0x00002b3d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2874\l0x00002b3d      mov edx, 5\l0x00002b42      lea rsi, str.missing_operand                           ; 0x910a ; \"missing operand\"\l0x00002b49      xor edi, edi\l0x00002b4b      call sym.imp.dcgettext\l0x00002b50      xor esi, esi                                           ; int errname\l0x00002b52      xor edi, edi                                           ; int status\l0x00002b54      mov rdx, rax                                           ; char *format\l0x00002b57      xor eax, eax\l0x00002b59      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002b5e" [URL="dbg.main/0x00002b5e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2835, 0x284c\l0x00002b5e      mov edi, 1                                             ; int64_t arg1\l0x00002b63      call dbg.usage\l"]
	"0x00002b68" [URL="dbg.main/0x00002b68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b22\l0x00002b68      mov rsi, r12                                           ; int64_t arg2\l0x00002b6b      mov edi, 4                                             ; int64_t arg1\l0x00002b70      call sym.quotearg_style\l0x00002b75      mov edx, 5\l0x00002b7a      lea rsi, str.failed_to_remove__s:_Symbolic_link_not_followed ; 0x9458 ; \"failed to remove %s: Symbolic link not followed\"\l0x00002b81      xor edi, edi\l0x00002b83      mov r13, rax\l0x00002b86      call sym.imp.dcgettext\l0x00002b8b      mov rcx, r13\l0x00002b8e      xor esi, esi                                           ; int errname\l0x00002b90      xor edi, edi                                           ; int status\l0x00002b92      mov rdx, rax                                           ; char *format\l0x00002b95      xor eax, eax\l0x00002b97      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002b9c      mov rdi, r12                                           ; void *ptr\l0x00002b9f      call sym.imp.free                                      ; void free(void *ptr)\l0x00002ba4      mov byte [var_fh], 0\l0x00002ba9      jmp 0x28ae\l"]
	"0x00002bae" [URL="dbg.main/0x00002bae", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a53\l0x00002bae      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x00002730" -> "0x000027b5" [color="#3a96dd"];
        "0x000027b5" -> "0x0000286c" [color="#13a10e"];
        "0x000027b5" -> "0x000027d1" [color="#c50f1f"];
        "0x000027d1" -> "0x00002860" [color="#13a10e"];
        "0x000027d1" -> "0x000027da" [color="#c50f1f"];
        "0x000027da" -> "0x000027f0" [color="#13a10e"];
        "0x000027da" -> "0x000027dc" [color="#c50f1f"];
        "0x000027dc" -> "0x00002830" [color="#13a10e"];
        "0x000027dc" -> "0x000027e1" [color="#c50f1f"];
        "0x000027e1" -> "0x000027b5" [color="#3a96dd"];
        "0x000027f0" -> "0x00002847" [color="#13a10e"];
        "0x000027f0" -> "0x000027f7" [color="#c50f1f"];
        "0x00002830" -> "0x00002b5e" [color="#13a10e"];
        "0x00002830" -> "0x0000283b" [color="#c50f1f"];
        "0x0000283b" -> "0x000027b5" [color="#3a96dd"];
        "0x00002847" -> "0x00002b5e" [color="#13a10e"];
        "0x00002847" -> "0x00002852" [color="#c50f1f"];
        "0x00002852" -> "0x00002860" [color="#3a96dd"];
        "0x00002860" -> "0x000027b5" [color="#3a96dd"];
        "0x0000286c" -> "0x00002b3d" [color="#13a10e"];
        "0x0000286c" -> "0x0000287a" [color="#c50f1f"];
        "0x0000287a" -> "0x000028c5" [color="#13a10e"];
        "0x0000287a" -> "0x00002888" [color="#c50f1f"];
        "0x00002888" -> "0x00002a34" [color="#3a96dd"];
        "0x00002890" -> "0x00002909" [color="#13a10e"];
        "0x00002890" -> "0x0000289c" [color="#c50f1f"];
        "0x0000289c" -> "0x00002984" [color="#13a10e"];
        "0x0000289c" -> "0x000028ae" [color="#c50f1f"];
        "0x000028ae" -> "0x00002a34" [color="#13a10e"];
        "0x000028ae" -> "0x000028c5" [color="#c50f1f"];
        "0x000028c5" -> "0x00002890" [color="#13a10e"];
        "0x000028c5" -> "0x000028d4" [color="#c50f1f"];
        "0x000028d4" -> "0x00002890" [color="#3a96dd"];
        "0x00002909" -> "0x000028ae" [color="#13a10e"];
        "0x00002909" -> "0x00002923" [color="#c50f1f"];
        "0x00002923" -> "0x00002945" [color="#13a10e"];
        "0x00002923" -> "0x00002929" [color="#c50f1f"];
        "0x00002929" -> "0x00002945" [color="#13a10e"];
        "0x00002929" -> "0x0000293b" [color="#c50f1f"];
        "0x0000293b" -> "0x00002ac0" [color="#13a10e"];
        "0x0000293b" -> "0x00002945" [color="#c50f1f"];
        "0x00002945" -> "0x000028ae" [color="#3a96dd"];
        "0x00002984" -> "0x00002990" [color="#3a96dd"];
        "0x00002990" -> "0x000029f2" [color="#13a10e"];
        "0x00002990" -> "0x000029a2" [color="#c50f1f"];
        "0x000029a2" -> "0x000029b9" [color="#13a10e"];
        "0x000029a2" -> "0x000029a7" [color="#c50f1f"];
        "0x000029a7" -> "0x000029be" [color="#3a96dd"];
        "0x000029b0" -> "0x000029be" [color="#13a10e"];
        "0x000029b0" -> "0x000029b9" [color="#c50f1f"];
        "0x000029b9" -> "0x000029b0" [color="#13a10e"];
        "0x000029b9" -> "0x000029be" [color="#c50f1f"];
        "0x000029be" -> "0x000029ff" [color="#13a10e"];
        "0x000029be" -> "0x000029cb" [color="#c50f1f"];
        "0x000029cb" -> "0x00002990" [color="#13a10e"];
        "0x000029cb" -> "0x000029e3" [color="#c50f1f"];
        "0x000029e3" -> "0x00002a6b" [color="#13a10e"];
        "0x000029e3" -> "0x000029f2" [color="#c50f1f"];
        "0x000029f2" -> "0x000028ae" [color="#3a96dd"];
        "0x000029ff" -> "0x000029cb" [color="#3a96dd"];
        "0x00002a34" -> "0x00002bae" [color="#13a10e"];
        "0x00002a34" -> "0x00002a59" [color="#c50f1f"];
        "0x00002a6b" -> "0x000029f2" [color="#3a96dd"];
        "0x00002ac0" -> "0x00002b31" [color="#13a10e"];
        "0x00002ac0" -> "0x00002ad9" [color="#c50f1f"];
        "0x00002ad9" -> "0x00002945" [color="#13a10e"];
        "0x00002ad9" -> "0x00002aed" [color="#c50f1f"];
        "0x00002aed" -> "0x00002b24" [color="#13a10e"];
        "0x00002aed" -> "0x00002b14" [color="#c50f1f"];
        "0x00002b14" -> "0x00002b68" [color="#13a10e"];
        "0x00002b14" -> "0x00002b24" [color="#c50f1f"];
        "0x00002b24" -> "0x00002945" [color="#3a96dd"];
        "0x00002b31" -> "0x00002aed" [color="#13a10e"];
        "0x00002b31" -> "0x00002b38" [color="#c50f1f"];
        "0x00002b38" -> "0x00002945" [color="#3a96dd"];
        "0x00002b3d" -> "0x00002b5e" [color="#3a96dd"];
        "0x00002b5e" -> "0x00002b68" [color="#3a96dd"];
        "0x00002b68" -> "0x000028ae" [color="#3a96dd"];
}
