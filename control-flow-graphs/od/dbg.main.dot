digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002840" [URL="dbg.main/0x00002840", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x38d8\l4217: int dbg.main (int argc, char **argv);\l; var int c @ rbp-0x60\l; var size_t n_bytes_read @ rbp-0x58\l; var char *[2] block @ rbp-0x50\l; var uint32_t var_8h @ rsp+0x10\l; var uint32_t var_14h @ rsp+0x1c\l; var void *ptr @ rsp+0x20\l; var int64_t var_20h @ rsp+0x28\l; var uint32_t var_28h @ rsp+0x30\l; var int64_t var_30h @ rsp+0x38\l; var uint32_t var_38h @ rsp+0x40\l; var int64_t var_40h @ rsp+0x48\l; var int64_t var_48h @ rsp+0x50\l; var int64_t var_58h @ rsp+0x60\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002840      endbr64                                                ; int main(int argc,char ** argv);\l0x00002844      push r15\l0x00002846      push r14\l0x00002848      lea r14, obj.short_options                             ; 0xd440 ; \"A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx\"\l0x0000284f      push r13\l0x00002851      lea r13, [0x0000d14f]                                  ; \"coreutils\"\l0x00002858      push r12\l0x0000285a      mov r12d, edi                                          ; argc\l0x0000285d      push rbp\l0x0000285e      mov rbp, rsi                                           ; argv\l0x00002861      push rbx\l0x00002862      lea rbx, [0x0000d2b0]\l0x00002869      sub rsp, 0x68\l0x0000286d      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002870      mov rax, qword fs:[0x28]\l0x00002879      mov qword [var_58h], rax\l0x0000287e      xor eax, eax\l0x00002880      lea r15, [var_30h]\l0x00002885      call dbg.set_program_name\l0x0000288a      lea rsi, [0x0000ec81]                                  ; const char *locale\l0x00002891      mov edi, 6                                             ; int category\l0x00002896      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x0000289b      lea rsi, str._usr_local_share_locale                   ; 0xd178 ; \"/usr/local/share/locale\" ; char *dirname\l0x000028a2      mov rdi, r13                                           ; char *domainname\l0x000028a5      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x000028aa      mov rdi, r13                                           ; char *domainname\l0x000028ad      lea r13, obj.long_options                              ; 0x129c0\l0x000028b4      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x000028b9      lea rdi, [dbg.close_stdout]                            ; 0x6150 ; func function\l0x000028c0      call sym.atexit                                        ; int atexit(func function)\l0x000028c5      pxor xmm0, xmm0\l0x000028c9      mov byte [var_8h], 1\l0x000028ce      movabs rax, 0x200000001                                ; 8589934593\l0x000028d8      movaps xmmword [obj.integral_type_size], xmm0          ; [0x13180:16]=-1\l0x000028df      mov qword [0x00013184], rax                            ; [0x13184:8]=0x200000001\l0x000028e6      lea rax, [dbg.format_address_std]                      ; 0x3a40\l0x000028ed      movaps xmmword [0x00013190], xmm0                      ; [0x13190:16]=-1\l0x000028f4      movaps xmmword [0x00013130], xmm0                      ; [0x13130:16]=-1\l0x000028fb      movaps xmmword [0x00013140], xmm0                      ; [0x13140:16]=-1\l0x00002902      mov dword [0x00013190], 3                              ; [0x13190:4]=3\l0x0000290c      mov dword [0x000131a0], 5                              ; [0x131a0:4]=5\l0x00002916      mov dword [0x00013130], 6                              ; [0x13130:4]=6\l0x00002920      mov dword [0x00013160], 8                              ; [0x13160:4]=8\l0x0000292a      mov dword [0x00013140], 7                              ; [0x13140:4]=7\l0x00002934      mov qword [obj.n_specs], 0                             ; [0x131d0:8]=1\l0x0000293f      mov qword [obj.n_specs_allocated], 0                   ; [0x131c8:8]=0\l0x0000294a      mov qword [obj.spec], 0                                ; [0x131d8:8]=0\l0x00002955      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x0000295c      mov dword [obj.address_base], 8                        ; [0x13224:4]=8\l0x00002966      mov dword [obj.address_pad_len], 7                     ; [0x13220:4]=7\l0x00002970      mov byte [obj.flag_dump_strings], 0                    ; [0x13212:1]=1\l0x00002977      mov byte [ptr], 0\l0x0000297c      mov byte [var_14h], 0\l0x00002981      movaps xmmword [obj.fp_type_size], xmm0                ; [0x13120:16]=-1\l0x00002988      movaps xmmword [0x00013150], xmm0                      ; [0x13150:16]=-1\l0x0000298f      nop\l"]
	"0x00002990" [URL="dbg.main/0x00002990", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS(28)\l0x00002990      mov r8, r15\l0x00002993      mov rcx, r13\l0x00002996      mov rdx, r14\l0x00002999      mov rsi, rbp\l0x0000299c      mov edi, r12d\l0x0000299f      mov dword [var_30h], 0xffffffff                        ; [0xffffffff:4]=75 ; -1\l0x000029a7      call sym.imp.getopt_long\l0x000029ac      cmp eax, 0xffffffff\l0x000029af      je 0x2da0\l"]
	"0x000029b5" [URL="dbg.main/0x000029b5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029b5      cmp eax, 0x81\l0x000029ba      jg case.0x29dc.67\l"]
	"0x000029c0" [URL="dbg.main/0x000029c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029c0      cmp eax, 0x40                                          ; elf_phdr ; ub\"\\ufeff\\uffff\\uffff\\uffff\"\l0x000029c3      jle 0x2d20\l"]
	"0x000029c9" [URL="dbg.main/0x000029c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029c9      sub eax, 0x41\l0x000029cc      cmp eax, 0x40                                          ; elf_phdr ; ub\"\\ufeff\\uffff\\uffff\\uffff\"\l0x000029cf      ja case.0x29dc.67\l"]
	"0x000029d5" [URL="dbg.main/0x000029d5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029d5      movsxd rax, dword [rbx + rax*4]\l0x000029d9      add rax, rbx\l;-- switch\l0x000029dc      jmp rax                                                ; switch table (65 cases) at 0xd2b0\l"]
	"0x000029df" [URL="dbg.main/0x000029df", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 73:                                                           ; from 0x000029dc\l;-- case 108:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x000029df      lea rdi, [0x0000d1b8]                                  ; \"dL\" ; int64_t arg1\l0x000029e6      call sym.decode_format_string.part.0\l0x000029eb      and byte [var_8h], al\l0x000029ef      jmp 0x2990\l"]
	"0x000029f1" [URL="dbg.main/0x000029f1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 72:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x000029f1      lea rdi, [0x0000d1b2]                                  ; \"x4\" ; int64_t arg1\l0x000029f8      call sym.decode_format_string.part.0\l0x000029fd      and byte [var_8h], al\l0x00002a01      jmp 0x2990\l"]
	"0x00002a03" [URL="dbg.main/0x00002a03", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 70:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a03      lea rdi, [0x0000d1ac]                                  ; \"fD\" ; int64_t arg1\l0x00002a0a      call sym.decode_format_string.part.0\l0x00002a0f      and byte [var_8h], al\l0x00002a13      jmp 0x2990\l"]
	"0x00002a18" [URL="dbg.main/0x00002a18", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 66:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a18      lea rdi, [0x0000d1be]                                  ; \"o2\" ; int64_t arg1\l0x00002a1f      call sym.decode_format_string.part.0\l0x00002a24      and byte [var_8h], al\l0x00002a28      jmp 0x2990\l"]
	"0x00002a2d" [URL="dbg.main/0x00002a2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 104:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a2d      lea rdi, [0x0000d1c4]                                  ; \"x2\" ; int64_t arg1\l0x00002a34      call sym.decode_format_string.part.0\l0x00002a39      and byte [var_8h], al\l0x00002a3d      jmp 0x2990\l"]
	"0x00002a42" [URL="dbg.main/0x00002a42", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 105:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a42      lea rdi, [0x0000d1b5]                                  ; \"dI\" ; int64_t arg1\l0x00002a49      call sym.decode_format_string.part.0\l0x00002a4e      and byte [var_8h], al\l0x00002a52      jmp 0x2990\l"]
	"0x00002a57" [URL="dbg.main/0x00002a57", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 115:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a57      lea rdi, [0x0000d1c1]                                  ; \"d2\" ; int64_t arg1\l0x00002a5e      call sym.decode_format_string.part.0\l0x00002a63      and byte [var_8h], al\l0x00002a67      jmp 0x2990\l"]
	"0x00002a6c" [URL="dbg.main/0x00002a6c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 106:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a6c      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0 ; int64_t arg1\l0x00002a73      xor edx, edx                                           ; uint32_t arg3\l0x00002a75      xor esi, esi                                           ; int64_t arg2\l0x00002a77      lea r8, str.bEGKkMmPTYZ0                               ; global_multipliers\l                                                                       ; 0xd418 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002a7e      lea rcx, obj.n_bytes_to_skip                           ; 0x131f8 ; int64_t arg4\l0x00002a85      call dbg.xstrtoumax\l0x00002a8a      test eax, eax\l0x00002a8c      jne 0x378f\l"]
	"0x00002a92" [URL="dbg.main/0x00002a92", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ccb\l0x00002a92      mov byte [var_14h], 1\l0x00002a97      jmp 0x2990\l"]
	"0x00002a9c" [URL="dbg.main/0x00002a9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 68:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002a9c      lea rdi, [0x0000d1a6]                                  ; \"u4\" ; int64_t arg1\l0x00002aa3      call sym.decode_format_string.part.0\l0x00002aa8      and byte [var_8h], al\l0x00002aac      jmp 0x2990\l"]
	"0x00002ab1" [URL="dbg.main/0x00002ab1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 65:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002ab1      mov rax, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00002ab8      movzx ecx, byte [rax]\l0x00002abb      cmp cl, 0x6f\l0x00002abe      je 0x2e9d\l"]
	"0x00002ac4" [URL="dbg.main/0x00002ac4", fillcolor="white",color="#767676", fontname="Courier",label="0x00002ac4      jg 0x2ceb\l"]
	"0x00002aca" [URL="dbg.main/0x00002aca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002aca      cmp cl, 0x64\l0x00002acd      je 0x2e71\l"]
	"0x00002ad3" [URL="dbg.main/0x00002ad3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ad3      cmp cl, 0x6e\l0x00002ad6      jne 0x3853\l"]
	"0x00002adc" [URL="dbg.main/0x00002adc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002adc      lea rax, [dbg.format_address_none]                     ; 0x39b0\l0x00002ae3      mov byte [var_14h], 1\l0x00002ae8      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00002aef      mov dword [obj.address_pad_len], 0                     ; [0x13220:4]=7\l0x00002af9      jmp 0x2990\l"]
	"0x00002afe" [URL="dbg.main/0x00002afe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 129:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002afe      mov r9, qword [obj.argmatch_die]                       ; [0x13020:8]=0x5d70 dbg.__argmatch_die ; \"p]\" ; int64_t arg6\l0x00002b05      mov rsi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0 ; int64_t arg2\l0x00002b0c      lea rcx, obj.endian_types                              ; 0xd428 ; int64_t arg4\l0x00002b13      mov r8d, 4                                             ; int64_t arg5\l0x00002b19      lea rdx, obj.endian_args                               ; 0x12b40 ; \"L\\xd2\" ; int64_t arg3\l0x00002b20      lea rdi, str.__endian                                  ; 0xd19a ; \"--endian\" ; int64_t arg1\l0x00002b27      call dbg.__xargmatch_internal\l0x00002b2c      lea rcx, obj.endian_types                              ; 0xd428\l0x00002b33      mov eax, dword [rcx + rax*4]\l0x00002b36      test eax, eax\l0x00002b38      je 0x2d94\l"]
	"0x00002b3e" [URL="dbg.main/0x00002b3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b3e      sub eax, 1\l0x00002b41      jne 0x2990\l"]
	"0x00002b47" [URL="dbg.main/0x00002b47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b47      mov byte [obj.input_swap], 1                           ; [0x13101:1]=0\l0x00002b4e      jmp 0x2990\l"]
	"0x00002b53" [URL="dbg.main/0x00002b53", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002b53      mov byte [obj.traditional], 1                          ; [0x13211:1]=1\l0x00002b5a      jmp 0x2990\l"]
	"0x00002b5f" [URL="dbg.main/0x00002b5f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 119:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002b5f      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00002b66      test rdi, rdi\l0x00002b69      je 0x2d72\l"]
	"0x00002b6f" [URL="dbg.main/0x00002b6f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b6f      xor esi, esi                                           ; int64_t arg2\l0x00002b71      lea rcx, [var_38h]                                     ; int64_t arg4\l0x00002b76      mov edx, 0xa                                           ; uint32_t arg3\l0x00002b7b      lea r8, [0x0000ec81]                                   ; int64_t arg5\l0x00002b82      call dbg.xstrtoumax\l0x00002b87      test eax, eax\l0x00002b89      jne 0x389a\l"]
	"0x00002b8f" [URL="dbg.main/0x00002b8f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002b8f      mov rax, qword [var_38h]\l0x00002b94      mov byte [ptr], 1\l0x00002b99      mov byte [var_14h], 1\l0x00002b9e      mov qword [var_20h], rax\l0x00002ba3      jmp 0x2990\l"]
	"0x00002ba8" [URL="dbg.main/0x00002ba8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 118:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002ba8      mov byte [obj.abbreviate_duplicate_blocks], 0          ; [0x13011:1]=0\l0x00002baf      mov byte [var_14h], 1\l0x00002bb4      jmp 0x2990\l"]
	"0x00002bb9" [URL="dbg.main/0x00002bb9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 116:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002bb9      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00002bc0      test rdi, rdi\l0x00002bc3      je 0x3834\l"]
	"0x00002bc9" [URL="dbg.main/0x00002bc9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002bc9      call sym.decode_format_string.part.0\l0x00002bce      mov byte [var_14h], 1\l0x00002bd3      and byte [var_8h], al\l0x00002bd7      jmp 0x2990\l"]
	"0x00002bdc" [URL="dbg.main/0x00002bdc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 102:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002bdc      lea rdi, [0x0000d1af]                                  ; \"fF\" ; int64_t arg1\l0x00002be3      call sym.decode_format_string.part.0\l0x00002be8      and byte [var_8h], al\l0x00002bec      jmp 0x2990\l"]
	"0x00002bf1" [URL="dbg.main/0x00002bf1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 100:                                                          ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002bf1      lea rdi, [0x0000d1a9]                                  ; \"u2\" ; int64_t arg1\l0x00002bf8      call sym.decode_format_string.part.0\l0x00002bfd      and byte [var_8h], al\l0x00002c01      jmp 0x2990\l"]
	"0x00002c06" [URL="dbg.main/0x00002c06", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 99:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002c06      lea rdi, [0x0000d021]                                  ; \"c\" ; int64_t arg1\l0x00002c0d      call sym.decode_format_string.part.0\l0x00002c12      and byte [var_8h], al\l0x00002c16      jmp 0x2990\l"]
	"0x00002c1b" [URL="dbg.main/0x00002c1b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 98:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002c1b      lea rdi, [0x0000d1a3]                                  ; \"o1\" ; int64_t arg1\l0x00002c22      call sym.decode_format_string.part.0\l0x00002c27      and byte [var_8h], al\l0x00002c2b      jmp 0x2990\l"]
	"0x00002c30" [URL="dbg.main/0x00002c30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 97:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002c30      lea rdi, [0x0000d02c]                                  ; \"a\" ; int64_t arg1\l0x00002c37      call sym.decode_format_string.part.0\l0x00002c3c      and byte [var_8h], al\l0x00002c40      jmp 0x2990\l"]
	"0x00002c45" [URL="dbg.main/0x00002c45", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 83:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002c45      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00002c4c      test rdi, rdi\l0x00002c4f      je 0x2d8a\l"]
	"0x00002c55" [URL="dbg.main/0x00002c55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c55      xor edx, edx                                           ; uint32_t arg3\l0x00002c57      lea rcx, [var_38h]                                     ; int64_t arg4\l0x00002c5c      lea r8, str.bEGKkMmPTYZ0                               ; global_multipliers\l                                                                       ; 0xd418 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002c63      xor esi, esi                                           ; int64_t arg2\l0x00002c65      call dbg.xstrtoumax\l0x00002c6a      test eax, eax\l0x00002c6c      jne 0x3880\l"]
	"0x00002c72" [URL="dbg.main/0x00002c72", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c72      mov rax, qword [var_38h]\l"]
	"0x00002c77" [URL="dbg.main/0x00002c77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d8f\l0x00002c77      mov qword [obj.string_min], rax                        ; [0x13218:8]=0xd107 str.sha2_utilities\l0x00002c7e      mov byte [obj.flag_dump_strings], 1                    ; [0x13212:1]=1\l0x00002c85      mov byte [var_14h], 1\l0x00002c8a      jmp 0x2990\l"]
	"0x00002c8f" [URL="dbg.main/0x00002c8f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 79:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002c8f      lea rdi, [0x0000d1bb]                                  ; \"o4\" ; int64_t arg1\l0x00002c96      call sym.decode_format_string.part.0\l0x00002c9b      and byte [var_8h], al\l0x00002c9f      jmp 0x2990\l"]
	"0x00002ca4" [URL="dbg.main/0x00002ca4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 78:                                                           ; from 0x000029dc\l; CODE XREF from dbg.main @ 0x29dc\l0x00002ca4      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0 ; int64_t arg1\l0x00002cab      xor edx, edx                                           ; uint32_t arg3\l0x00002cad      xor esi, esi                                           ; int64_t arg2\l0x00002caf      lea r8, str.bEGKkMmPTYZ0                               ; global_multipliers\l                                                                       ; 0xd418 ; \"bEGKkMmPTYZ0\" ; int64_t arg5\l0x00002cb6      lea rcx, obj.max_bytes_to_format                       ; 0x131e8 ; int64_t arg4\l0x00002cbd      mov byte [obj.limit_bytes_to_format], 1                ; [0x131f0:1]=1\l0x00002cc4      call dbg.xstrtoumax\l0x00002cc9      test eax, eax\l0x00002ccb      je 0x2a92\l"]
	"0x00002cd1" [URL="dbg.main/0x00002cd1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cd1      mov r8, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00002cd8      mov esi, dword [var_30h]                               ; int64_t arg2\l0x00002cdc      mov rcx, r13                                           ; int64_t arg5\l0x00002cdf      mov edi, eax                                           ; int64_t arg1\l0x00002ce1      mov edx, 0x4e                                          ; 'N' ; int64_t arg4\l0x00002ce6      call sym.xstrtol_fatal\l"]
	"0x00002ceb" [URL="dbg.main/0x00002ceb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ac4\l0x00002ceb      cmp cl, 0x78\l0x00002cee      jne 0x3853\l"]
	"0x00002cf4" [URL="dbg.main/0x00002cf4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002cf4      lea rax, [dbg.format_address_std]                      ; 0x3a40\l0x00002cfb      mov byte [var_14h], 1\l0x00002d00      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00002d07      mov dword [obj.address_base], 0x10                     ; [0x13224:4]=8\l0x00002d11      mov dword [obj.address_pad_len], 6                     ; [0x13220:4]=7\l0x00002d1b      jmp 0x2990\l"]
	"0x00002d20" [URL="dbg.main/0x00002d20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c3\l0x00002d20      cmp eax, 0xffffff7d                                    ; 4294967165\l; DATA XREF from dbg.dtoastr @ 0x6224\l; DATA XREF from dbg.ftoastr @ 0x639a\l; DATA XREF from dbg.ldtoastr @ 0x6517\l0x00002d25      jne 0x2d60\l"]
	"0x00002d27" [URL="dbg.main/0x00002d27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d27      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x130a8:8]=0 ; int64_t arg1\l0x00002d2e      mov rcx, qword [obj.Version]                           ; [0x13018:8]=0xe750 \"9.0\" ; \"P\\xe7\" ; int64_t arg5\l0x00002d35      xor eax, eax\l0x00002d37      xor r9d, r9d                                           ; int64_t arg_c0h\l0x00002d3a      lea r8, str.Jim_Meyering                               ; 0xd1c7 ; \"Jim Meyering\" ; int64_t arg6\l0x00002d41      lea rdx, str.GNU_coreutils                             ; 0xd14b ; \"GNU coreutils\" ; int64_t arg3\l0x00002d48      lea rsi, [global_program]                              ; 0xd0d2 ; \"od\" ; int64_t arg2\l0x00002d4f      call dbg.version_etc\l0x00002d54      xor edi, edi                                           ; int status\l0x00002d56      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002d60" [URL="dbg.main/0x00002d60", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d25\l0x00002d60      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002d65      jne case.0x29dc.67\l"]
	"0x00002d6b" [URL="dbg.main/0x00002d6b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d6b      xor edi, edi                                           ; int64_t arg1\l0x00002d6d      call dbg.usage\l"]
	"0x00002d72" [URL="dbg.main/0x00002d72", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b69\l0x00002d72      mov byte [ptr], 1\l0x00002d77      mov byte [var_14h], 1\l0x00002d7c      mov qword [var_20h], 0x20                              ; [0x20:8]=0x304923202b2d27 ; \"'-+ #I0\"\l0x00002d85      jmp 0x2990\l"]
	"0x00002d8a" [URL="dbg.main/0x00002d8a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c4f\l0x00002d8a      mov eax, 3\l0x00002d8f      jmp 0x2c77\l"]
	"0x00002d94" [URL="dbg.main/0x00002d94", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b38\l0x00002d94      mov byte [obj.input_swap], 0                           ; [0x13101:1]=0\l0x00002d9b      jmp 0x2990\l"]
	"0x00002da0" [URL="dbg.main/0x00002da0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29af\l0x00002da0      cmp byte [var_8h], 0\l0x00002da5      je 0x31e5\l"]
	"0x00002dab" [URL="dbg.main/0x00002dab", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dab      cmp byte [obj.flag_dump_strings], 0                    ; [0x13212:1]=1\l0x00002db2      je 0x2dc2\l"]
	"0x00002db4" [URL="dbg.main/0x00002db4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002db4      cmp qword [obj.n_specs], 0                             ; [0x131d0:8]=1\l0x00002dbc      jne 0x380b\l"]
	"0x00002dc2" [URL="dbg.main/0x00002dc2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2db2\l0x00002dc2      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x00002dc9      movzx edx, byte [obj.traditional]                      ; [0x13211:1]=1\l0x00002dd0      sub r12d, eax\l0x00002dd3      cmp byte [var_14h], 0\l0x00002dd8      jne 0x2ec9\l"]
	"0x00002dde" [URL="dbg.main/0x00002dde", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dde      cmp r12d, 2\l0x00002de2      je 0x355c\l"]
	"0x00002de8" [URL="dbg.main/0x00002de8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002de8      cmp r12d, 3\l0x00002dec      je 0x3262\l"]
	"0x00002df2" [URL="dbg.main/0x00002df2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002df2      cmp r12d, 1\l0x00002df6      je 0x353b\l"]
	"0x00002dfc" [URL="dbg.main/0x00002dfc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002dfc      test dl, dl\l0x00002dfe      je 0x2f13\l"]
	"0x00002e04" [URL="dbg.main/0x00002e04", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ee5\l0x00002e04      cmp r12d, 1\l0x00002e08      jle 0x2f13\l"]
	"0x00002e0e" [URL="dbg.main/0x00002e0e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3299\l0x00002e0e      mov rdi, qword [rbp + rax*8 + 8]                       ; int64_t arg1\l0x00002e13      call dbg.quote\l0x00002e18      mov edx, 5\l0x00002e1d      lea rsi, str.extra_operand__s                          ; 0xd1d4 ; \"extra operand %s\"\l0x00002e24      xor edi, edi\l0x00002e26      mov r12, rax\l0x00002e29      call sym.imp.dcgettext\l0x00002e2e      mov rcx, r12\l0x00002e31      xor esi, esi                                           ; int errname\l0x00002e33      xor edi, edi                                           ; int status\l0x00002e35      mov rdx, rax                                           ; char *format\l0x00002e38      xor eax, eax\l0x00002e3a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e3f      mov edx, 5\l0x00002e44      lea rsi, str.compatibility_mode_supports_at_most_one_file ; 0xe6a8 ; \"compatibility mode supports at most one file\"\l0x00002e4b      xor edi, edi\l0x00002e4d      call sym.imp.dcgettext\l0x00002e52      lea rdx, [0x0000e7ab]                                  ; \"%s\" ; char *format\l0x00002e59      xor esi, esi                                           ; int errname\l0x00002e5b      xor edi, edi                                           ; int status\l0x00002e5d      mov rcx, rax\l0x00002e60      xor eax, eax\l0x00002e62      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002e67" [URL="dbg.main/0x00002e67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 67:                                                           ; from 0x000029dc\l;-- case 71:                                                           ; from 0x000029dc\l;-- case 75:                                                           ; from 0x000029dc\l;-- case 80...82:                                                      ; from 0x000029dc\l;-- case 84:                                                           ; from 0x000029dc\l;-- case 85...87:                                                      ; from 0x000029dc\l;-- case 89:                                                           ; from 0x000029dc\l;-- case 90...96:                                                      ; from 0x000029dc\l;-- case 103:                                                          ; from 0x000029dc\l;-- case 107:                                                          ; from 0x000029dc\l;-- case 110:                                                          ; from 0x000029dc\l;-- case 113...114:                                                    ; from 0x000029dc\l;-- case 117:                                                          ; from 0x000029dc\l;-- default:                                                           ; from 0x29dc\l; CODE XREFS from dbg.main @ 0x29ba, 0x29cf, 0x29dc, 0x2d65\l0x00002e67      mov edi, 1                                             ; int64_t arg1\l0x00002e6c      call dbg.usage\l"]
	"0x00002e71" [URL="dbg.main/0x00002e71", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2acd\l0x00002e71      lea rax, [dbg.format_address_std]                      ; 0x3a40\l0x00002e78      mov byte [var_14h], 1\l0x00002e7d      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00002e84      mov dword [obj.address_base], 0xa                      ; [0x13224:4]=8\l0x00002e8e      mov dword [obj.address_pad_len], 7                     ; [0x13220:4]=7\l0x00002e98      jmp 0x2990\l"]
	"0x00002e9d" [URL="dbg.main/0x00002e9d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2abe\l0x00002e9d      lea rax, [dbg.format_address_std]                      ; 0x3a40\l0x00002ea4      mov byte [var_14h], 1\l0x00002ea9      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00002eb0      mov dword [obj.address_base], 8                        ; [0x13224:4]=8\l0x00002eba      mov dword [obj.address_pad_len], 7                     ; [0x13220:4]=7\l0x00002ec4      jmp 0x2990\l"]
	"0x00002ec9" [URL="dbg.main/0x00002ec9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dd8\l0x00002ec9      test dl, dl\l0x00002ecb      je 0x2f13\l"]
	"0x00002ecd" [URL="dbg.main/0x00002ecd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ecd      cmp r12d, 2\l0x00002ed1      je 0x329e\l"]
	"0x00002ed7" [URL="dbg.main/0x00002ed7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ed7      cmp r12d, 3\l0x00002edb      je 0x326a\l"]
	"0x00002ee1" [URL="dbg.main/0x00002ee1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ee1      cmp r12d, 1\l0x00002ee5      jne 0x2e04\l"]
	"0x00002eeb" [URL="dbg.main/0x00002eeb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002eeb      mov rdi, qword [rbp + rax*8]\l"]
	"0x00002ef0" [URL="dbg.main/0x00002ef0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3542, 0x354b\l0x00002ef0      mov rsi, r15                                           ; int64_t arg2\l0x00002ef3      call dbg.parse_old_offset\l0x00002ef8      test al, al\l0x00002efa      je 0x3551\l"]
	"0x00002f00" [URL="dbg.main/0x00002f00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f00      mov rax, qword [var_30h]\l0x00002f05      add rbp, 8\l0x00002f09      xor r12d, r12d\l0x00002f0c      mov qword [obj.n_bytes_to_skip], rax                   ; [0x131f8:8]=0\l"]
	"0x00002f13" [URL="dbg.main/0x00002f13", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00002dfe  CODE 0x00002e08  CODE 0x00002ecb  \l; XREFS: CODE 0x00003264  CODE 0x0000328c  CODE 0x000032f4  \l; XREFS: CODE 0x00003557  CODE 0x0000357a  CODE 0x00003722  \l; XREFS: CODE 0x00003761  \l0x00002f13      cmp byte [obj.flag_pseudo_start], 0                    ; [0x13210:1]=1\l0x00002f1a      je 0x2f3e\l"]
	"0x00002f1c" [URL="dbg.main/0x00002f1c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f1c      lea rax, [dbg.format_address_none]                     ; 0x39b0\l0x00002f23      cmp qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00002f2a      je 0x3514\l"]
	"0x00002f30" [URL="dbg.main/0x00002f30", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f30      lea rax, [dbg.format_address_label]                    ; 0x4f80\l0x00002f37      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l"]
	"0x00002f3e" [URL="dbg.main/0x00002f3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2f1a, 0x3536\l0x00002f3e      cmp byte [obj.limit_bytes_to_format], 0                ; [0x131f0:1]=1\l0x00002f45      je 0x2f62\l"]
	"0x00002f47" [URL="dbg.main/0x00002f47", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f47      mov rax, qword [obj.max_bytes_to_format]               ; [0x131e8:8]=0\l0x00002f4e      add rax, qword [obj.n_bytes_to_skip]                   ; [0x131f8:8]=0\l0x00002f55      mov qword [obj.end_offset], rax                        ; [0x131e0:8]=-1\l0x00002f5c      jb 0x37e7\l"]
	"0x00002f62" [URL="dbg.main/0x00002f62", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f45\l0x00002f62      cmp qword [obj.n_specs], 0                             ; [0x131d0:8]=1\l0x00002f6a      je 0x31ec\l"]
	"0x00002f70" [URL="dbg.main/0x00002f70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31f8\l0x00002f70      lea rax, obj.default_file_list                         ; 0x12b60\l0x00002f77      test r12d, r12d\l0x00002f7a      jle 0x2f88\l"]
	"0x00002f7c" [URL="dbg.main/0x00002f7c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002f7c      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x00002f83      lea rax, [rbp + rax*8]\l"]
	"0x00002f88" [URL="dbg.main/0x00002f88", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f7a\l0x00002f88      mov qword [obj.file_list], rax                         ; [0x131b0:8]=16\l0x00002f8f      call dbg.open_next_file\l0x00002f94      cmp qword [obj.in_stream], 0                           ; [0x131a8:8]=16\l0x00002f9c      mov ebx, eax\l0x00002f9e      je 0x31b3\l"]
	"0x00002fa4" [URL="dbg.main/0x00002fa4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fa4      mov rdi, qword [obj.n_bytes_to_skip]                   ; [0x131f8:8]=0 ; int64_t arg1\l0x00002fab      call dbg.skip\l0x00002fb0      and ebx, eax\l0x00002fb2      cmp qword [obj.in_stream], 0                           ; [0x131a8:8]=16\l0x00002fba      movzx eax, bl\l0x00002fbd      mov dword [var_14h], eax\l0x00002fc1      je 0x31b3\l"]
	"0x00002fc7" [URL="dbg.main/0x00002fc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fc7      xor eax, eax\l0x00002fc9      cmp byte [obj.flag_pseudo_start], 0                    ; [0x13210:1]=1\l0x00002fd0      je 0x2fde\l"]
	"0x00002fd2" [URL="dbg.main/0x00002fd2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002fd2      mov rax, qword [var_28h]\l0x00002fd7      sub rax, qword [obj.n_bytes_to_skip]                   ; [0x131f8:8]=0\l"]
	"0x00002fde" [URL="dbg.main/0x00002fde", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2fd0\l0x00002fde      mov qword [obj.pseudo_offset], rax                     ; [0x13208:8]=0xffffffff0000d108\l0x00002fe5      call dbg.get_lcm\l0x00002fea      cmp byte [ptr], 0\l0x00002fef      mov ebx, eax\l0x00002ff1      je 0x323a\l"]
	"0x00002ff7" [URL="dbg.main/0x00002ff7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ff7      movsxd rbp, eax\l0x00002ffa      mov rax, qword [var_20h]\l0x00002fff      test rax, rax\l0x00003002      je 0x300e\l"]
	"0x00003004" [URL="dbg.main/0x00003004", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003004      xor edx, edx\l0x00003006      div rbp\l0x00003009      test rdx, rdx\l0x0000300c      je 0x303c\l"]
	"0x0000300e" [URL="dbg.main/0x0000300e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3002\l0x0000300e      mov edx, 5\l0x00003013      lea rsi, str.warning:_invalid_width__lu__using__d_instead ; 0xe700 ; \"warning: invalid width %lu; using %d instead\"\l0x0000301a      xor edi, edi\l0x0000301c      call sym.imp.dcgettext\l0x00003021      mov rcx, qword [var_20h]\l0x00003026      mov r8d, ebx\l0x00003029      xor esi, esi                                           ; int errname\l0x0000302b      mov rdx, rax                                           ; char *format\l0x0000302e      xor edi, edi                                           ; int status\l0x00003030      xor eax, eax\l0x00003032      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00003037      mov qword [var_20h], rbp\l"]
	"0x0000303c" [URL="dbg.main/0x0000303c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x300c, 0x3251, 0x325d\l0x0000303c      mov rax, qword [var_20h]\l0x00003041      mov qword [obj.bytes_per_block], rax                   ; [0x131c0:8]=0xd108 \"ha\"\l0x00003048      mov rax, qword [obj.n_specs]                           ; [0x131d0:8]=1\l0x0000304f      test rax, rax\l0x00003052      je 0x30d2\l"]
	"0x00003054" [URL="dbg.main/0x00003054", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003054      mov rdx, qword [obj.spec]                              ; [0x131d8:8]=0\l0x0000305b      imul rax, rax, 0x28\l0x0000305f      mov r11, qword [var_20h]\l0x00003064      xor edi, edi\l0x00003066      lea r9, obj.width_bytes                                ; 0xd520\l0x0000306d      lea rcx, [rdx + 4]\l0x00003071      lea r8, [rdx + rax + 4]\l0x00003076      mov rsi, rcx\l0x00003079      nop dword [rax]\l"]
	"0x00003080" [URL="dbg.main/0x00003080", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30a8\l0x00003080      mov eax, dword [rsi]\l0x00003082      xor edx, edx\l0x00003084      mov ebx, dword [rsi + 0x18]\l0x00003087      movsxd r10, dword [r9 + rax*4]\l0x0000308b      mov rax, r11\l0x0000308e      div r10\l0x00003091      lea edx, [rbx + 1]\l0x00003094      imul edx, eax\l0x00003097      movsxd rax, edx\l0x0000309a      cmp rdi, rax\l0x0000309d      cmovb rdi, rax\l0x000030a1      add rsi, 0x28\l0x000030a5      cmp r8, rsi\l0x000030a8      jne 0x3080\l"]
	"0x000030aa" [URL="dbg.main/0x000030aa", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030aa      mov r10, qword [var_20h]\l0x000030af      nop\l"]
	"0x000030b0" [URL="dbg.main/0x000030b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30d0\l0x000030b0      mov eax, dword [rcx]\l0x000030b2      xor edx, edx\l0x000030b4      add rcx, 0x28\l0x000030b8      movsxd rsi, dword [r9 + rax*4]\l0x000030bc      mov rax, r10\l0x000030bf      div rsi\l0x000030c2      mov edx, edi\l0x000030c4      imul eax, dword [rcx - 0x10]\l0x000030c8      sub edx, eax\l0x000030ca      mov dword [rcx - 0xc], edx\l0x000030cd      cmp r8, rcx\l0x000030d0      jne 0x30b0\l"]
	"0x000030d2" [URL="dbg.main/0x000030d2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3052\l0x000030d2      movzx ebx, byte [obj.flag_dump_strings]                ; [0x13212:1]=1\l0x000030d9      test bl, bl\l0x000030db      je 0x32f9\l"]
	"0x000030e1" [URL="dbg.main/0x000030e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000030e1      mov rdi, qword [obj.string_min]                        ; [0x13218:8]=0xd107 str.sha2_utilities ; size_t size\l0x000030e8      mov eax, 0x64                                          ; 'd'\l0x000030ed      cmp rdi, rax\l0x000030f0      cmovb rdi, rax\l0x000030f4      mov qword [var_38h], rdi\l0x000030f9      call sym.xmalloc                                       ;  void *xmalloc(size_t size)\l0x000030fe      mov rbp, qword [obj.n_bytes_to_skip]                   ; [0x131f8:8]=0\l0x00003105      mov r12, rax\l"]
	"0x00003108" [URL="dbg.main/0x00003108", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34d7\l0x00003108      mov rsi, qword [obj.string_min]                        ; [0x13218:8]=0xd107 str.sha2_utilities\l"]
	"0x0000310f" [URL="dbg.main/0x0000310f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x316a, 0x3685, 0x378a\l0x0000310f      cmp byte [obj.limit_bytes_to_format], 0                ; [0x131f0:1]=1\l0x00003116      mov r13, rsi\l0x00003119      je 0x3137\l"]
	"0x0000311b" [URL="dbg.main/0x0000311b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000311b      mov rax, qword [obj.end_offset]                        ; [0x131e0:8]=-1\l0x00003122      cmp rax, rsi\l0x00003125      jb 0x3727\l"]
	"0x0000312b" [URL="dbg.main/0x0000312b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000312b      sub rax, rsi\l0x0000312e      cmp rax, rbp\l0x00003131      jbe 0x3727\l"]
	"0x00003137" [URL="dbg.main/0x00003137", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3119\l0x00003137      test rsi, rsi\l0x0000313a      je 0x3496\l"]
	"0x00003140" [URL="dbg.main/0x00003140", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003140      lea rax, [rbp + 1]\l0x00003144      xor r13d, r13d\l0x00003147      mov qword [var_8h], rax\l0x0000314c      jmp 0x317d\l"]
	"0x00003150" [URL="dbg.main/0x00003150", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3198\l0x00003150      call sym.imp.__ctype_b_loc\l0x00003155      mov rsi, qword [obj.string_min]                        ; [0x13218:8]=0xd107 str.sha2_utilities\l0x0000315c      mov r8, rax\l0x0000315f      movsxd rax, r14d\l0x00003162      mov rcx, qword [r8]\l0x00003165      test byte [rcx + rax*2 + 1], 0x40\l0x0000316a      je 0x310f\l"]
	"0x0000316c" [URL="dbg.main/0x0000316c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000316c      mov byte [r12 + r13], r14b\l0x00003170      add r13, 1\l0x00003174      cmp r13, rsi\l0x00003177      jae 0x3496\l"]
	"0x0000317d" [URL="dbg.main/0x0000317d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x314c\l0x0000317d      mov rdi, r15                                           ; int64_t arg1\l0x00003180      call dbg.read_char\l0x00003185      mov r14d, dword [var_30h]\l0x0000318a      and ebx, eax\l0x0000318c      mov rax, qword [var_8h]\l0x00003191      lea rbp, [rax + r13]\l0x00003195      test r14d, r14d\l0x00003198      jns 0x3150\l"]
	"0x0000319a" [URL="dbg.main/0x0000319a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34b8\l0x0000319a      mov rdi, r12                                           ; void *ptr\l0x0000319d      call sym.imp.free                                      ; void free(void *ptr)\l"]
	"0x000031a2" [URL="dbg.main/0x000031a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3738\l0x000031a2      movzx ebp, bl\l"]
	"0x000031a5" [URL="dbg.main/0x000031a5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x341f\l0x000031a5      mov r14d, dword [var_14h]\l0x000031aa      and r14d, ebp\l0x000031ad      mov ebx, r14d\l0x000031b0      and ebx, 1\l"]
	"0x000031b3" [URL="dbg.main/0x000031b3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2f9e, 0x2fc1\l0x000031b3      cmp byte [obj.have_read_stdin], 0                      ; [0x131a4:1]=1\l0x000031ba      jne 0x31fd\l"]
	"0x000031bc" [URL="dbg.main/0x000031bc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x320c\l0x000031bc      xor ebx, 1\l0x000031bf      movzx eax, bl\l"]
	"0x000031c2" [URL="dbg.main/0x000031c2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31ea\l0x000031c2      mov rdx, qword [var_58h]\l0x000031c7      sub rdx, qword fs:[0x28]\l0x000031d0      jne 0x382f\l"]
	"0x000031d6" [URL="dbg.main/0x000031d6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000031d6      add rsp, 0x68\l0x000031da      pop rbx\l0x000031db      pop rbp\l0x000031dc      pop r12\l0x000031de      pop r13\l0x000031e0      pop r14\l0x000031e2      pop r15\l0x000031e4      ret\l"]
	"0x000031e5" [URL="dbg.main/0x000031e5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2da5\l0x000031e5      mov eax, 1\l0x000031ea      jmp 0x31c2\l"]
	"0x000031ec" [URL="dbg.main/0x000031ec", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f6a\l0x000031ec      lea rdi, [0x0000d1e5]                                  ; \"oS\" ; int64_t arg1\l0x000031f3      call sym.decode_format_string.part.0\l0x000031f8      jmp 0x2f70\l"]
	"0x000031fd" [URL="dbg.main/0x000031fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31ba\l0x000031fd      mov rdi, qword [obj.stdin]                             ; obj.stdin_GLIBC_2.2.5\l                                                                       ; [0x130b0:8]=0 ; int64_t arg1\l0x00003204      call dbg.rpl_fclose\l0x00003209      add eax, 1\l0x0000320c      jne 0x31bc\l"]
	"0x0000320e" [URL="dbg.main/0x0000320e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000320e      mov edx, 5\l0x00003213      lea rsi, str.standard_input                            ; 0xd040 ; \"standard input\"\l0x0000321a      xor edi, edi\l0x0000321c      call sym.imp.dcgettext\l0x00003221      mov r12, rax\l0x00003224      call sym.imp.__errno_location\l0x00003229      mov rdx, r12                                           ; char *format\l0x0000322c      mov edi, 1                                             ; int status\l0x00003231      mov esi, dword [rax]                                   ; int errname\l0x00003233      xor eax, eax\l0x00003235      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000323a" [URL="dbg.main/0x0000323a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ff1\l0x0000323a      cmp eax, 0xf\l0x0000323d      jg 0x3256\l"]
	"0x0000323f" [URL="dbg.main/0x0000323f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000323f      mov eax, 0x10\l0x00003244      cdq\l0x00003245      idiv ebx\l0x00003247      imul eax, ebx\l0x0000324a      cdqe\l0x0000324c      mov qword [var_20h], rax\l0x00003251      jmp 0x303c\l"]
	"0x00003256" [URL="dbg.main/0x00003256", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x323d\l0x00003256      cdqe\l0x00003258      mov qword [var_20h], rax\l0x0000325d      jmp 0x303c\l"]
	"0x00003262" [URL="dbg.main/0x00003262", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dec\l0x00003262      test dl, dl\l0x00003264      je 0x2f13\l"]
	"0x0000326a" [URL="dbg.main/0x0000326a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2edb\l0x0000326a      mov rdi, qword [rbp + rax*8 + 8]                       ; int64_t arg1\l0x0000326f      mov rsi, r15                                           ; int64_t arg2\l0x00003272      call dbg.parse_old_offset\l0x00003277      test al, al\l0x00003279      jne 0x36c9\l"]
	"0x0000327f" [URL="dbg.main/0x0000327f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36e4\l0x0000327f      mov r12d, 3\l"]
	"0x00003285" [URL="dbg.main/0x00003285", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3690\l0x00003285      cmp byte [obj.traditional], 0                          ; [0x13211:1]=1\l0x0000328c      je 0x2f13\l"]
	"0x00003292" [URL="dbg.main/0x00003292", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003292      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x00003299      jmp 0x2e0e\l"]
	"0x0000329e" [URL="dbg.main/0x0000329e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2ed1\l0x0000329e      mov rdi, qword [rbp + rax*8 + 8]\l"]
	"0x000032a3" [URL="dbg.main/0x000032a3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3563, 0x356e, 0x3580\l0x000032a3      lea r12, [var_38h]\l0x000032a8      mov rsi, r12                                           ; int64_t arg2\l0x000032ab      call dbg.parse_old_offset\l0x000032b0      test al, al\l0x000032b2      je 0x368a\l"]
	"0x000032b8" [URL="dbg.main/0x000032b8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000032b8      movsxd rdx, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x000032bf      cmp byte [obj.traditional], 0                          ; [0x13211:1]=1\l0x000032c6      mov rdi, qword [rbp + rdx*8]\l0x000032cb      mov rax, rdx\l0x000032ce      jne 0x36ad\l"]
	"0x000032d4" [URL="dbg.main/0x000032d4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36c4\l0x000032d4      mov rdx, qword [var_38h]\l0x000032d9      mov r12d, 1\l0x000032df      mov qword [obj.n_bytes_to_skip], rdx                   ; [0x131f8:8]=0\l0x000032e6      mov rdx, qword [rbp + rax*8]\l0x000032eb      mov qword [rbp + rax*8 + 8], rdx\l0x000032f0      add rbp, 8\l0x000032f4      jmp 0x2f13\l"]
	"0x000032f9" [URL="dbg.main/0x000032f9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x30db\l0x000032f9      mov rsi, qword [var_20h]                               ; int64_t arg2\l0x000032fe      mov edi, 2                                             ; int64_t arg1\l0x00003303      lea r12, [var_38h]\l0x00003308      call dbg.xnmalloc\l0x0000330d      mov rdi, qword [obj.bytes_per_block]                   ; [0x131c0:8]=0xd108 \"ha\"\l0x00003314      movzx ebp, byte [obj.limit_bytes_to_format]            ; [0x131f0:1]=1\l0x0000331b      mov qword [ptr], rax\l0x00003320      mov r15, qword [obj.n_bytes_to_skip]                   ; [0x131f8:8]=0\l0x00003327      mov qword [var_40h], rax\l0x0000332c      add rax, rdi\l0x0000332f      mov qword [var_48h], rax\l0x00003334      test bpl, bpl\l0x00003337      jne 0x3485\l"]
	"0x0000333d" [URL="dbg.main/0x0000333d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0000333d      movzx ebp, byte [var_8h]\l0x00003342      xor r13d, r13d\l0x00003345      jmp 0x3376\l"]
	"0x00003347" [URL="dbg.main/0x00003347", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x339c\l0x00003347      mov rcx, qword [var_8h]\l0x0000334c      jne 0x37a9\l"]
	"0x00003352" [URL="dbg.main/0x00003352", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003352      xor ebx, 1\l0x00003355      mov rdi, r15                                           ; int64_t arg1\l0x00003358      mov rsi, r14                                           ; int64_t arg2\l0x0000335b      add r15, r14\l0x0000335e      movzx eax, bl\l0x00003361      movzx r13d, bl\l0x00003365      mov rdx, qword [rsp + rax*8 + 0x40]                    ; int64_t arg3\l0x0000336a      call dbg.write_block\l0x0000336f      mov rdi, qword [obj.bytes_per_block]                   ; [0x131c0:8]=0xd108 \"ha\"\l"]
	"0x00003376" [URL="dbg.main/0x00003376", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3345\l0x00003376      movsxd rax, r13d\l0x00003379      mov rdx, r12                                           ; int64_t arg3\l0x0000337c      mov rcx, qword [rsp + rax*8 + 0x40]\l0x00003381      mov rsi, rcx                                           ; int64_t arg2\l0x00003384      mov qword [var_8h], rcx\l0x00003389      call sym.read_block\l0x0000338e      mov r14, qword [var_38h]\l0x00003393      and ebp, eax\l0x00003395      cmp r14, qword [obj.bytes_per_block]                   ; [0x131c0:8]=0xd108 \"ha\"\l0x0000339c      jae 0x3347\l"]
	"0x0000339e" [URL="dbg.main/0x0000339e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x369a\l0x0000339e      test r14, r14\l0x000033a1      je 0x33ed\l"]
	"0x000033a3" [URL="dbg.main/0x000033a3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000033a3      call dbg.get_lcm\l0x000033a8      xor edx, edx\l0x000033aa      mov r12, qword [rsp + r13*8 + 0x40]\l0x000033af      xor esi, esi                                           ; int c\l0x000033b1      movsxd rcx, eax\l0x000033b4      lea rax, [rcx + r14 - 1]\l0x000033b9      lea rdi, [r12 + r14]                                   ; void *s\l0x000033bd      div rcx\l0x000033c0      imul rax, rcx\l0x000033c4      sub rax, r14\l0x000033c7      mov rdx, rax                                           ; size_t n\l0x000033ca      call sym.imp.memset                                    ; void *memset(void *s, int c, size_t n)\l0x000033cf      mov eax, ebx\l0x000033d1      mov rdi, r15                                           ; int64_t arg1\l0x000033d4      mov rcx, r12                                           ; int64_t arg4\l0x000033d7      xor eax, 1\l0x000033da      mov rsi, r14                                           ; int64_t arg2\l0x000033dd      add r15, r14\l0x000033e0      movzx eax, al\l0x000033e3      mov rdx, qword [rsp + rax*8 + 0x40]                    ; int64_t arg3\l0x000033e8      call dbg.write_block\l"]
	"0x000033ed" [URL="dbg.main/0x000033ed", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x33a1, 0x3491\l0x000033ed      mov esi, 0xa\l0x000033f2      mov rdi, r15\l0x000033f5      call qword [obj.format_address]                        ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x000033fb      cmp byte [obj.limit_bytes_to_format], 0                ; [0x131f0:1]=1\l0x00003402      je 0x3411\l"]
	"0x00003404" [URL="dbg.main/0x00003404", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003404      cmp r15, qword [obj.end_offset]                        ; [0x131e0:8]=-1\l0x0000340b      jae 0x369f\l"]
	"0x00003411" [URL="dbg.main/0x00003411", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3402, 0x36a8\l0x00003411      mov rdi, qword [ptr]                                   ; void *ptr\l0x00003416      movzx ebp, bpl\l0x0000341a      call sym.imp.free                                      ; void free(void *ptr)\l0x0000341f      jmp 0x31a5\l"]
	"0x00003424" [URL="dbg.main/0x00003424", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x348f\l0x00003424      movzx eax, bl\l0x00003427      sub rdi, r15\l0x0000342a      mov rdx, r12                                           ; int64_t arg3\l0x0000342d      mov dword [var_8h], eax\l0x00003431      movzx eax, bl\l0x00003434      mov r13, qword [rsp + rax*8 + 0x40]\l0x00003439      mov rax, qword [obj.bytes_per_block]                   ; [0x131c0:8]=0xd108 \"ha\"\l0x00003440      cmp rdi, rax\l0x00003443      mov rsi, r13                                           ; int64_t arg2\l0x00003446      cmova rdi, rax                                         ; int64_t arg1\l0x0000344a      call sym.read_block\l0x0000344f      mov r14, qword [var_38h]\l0x00003454      and ebp, eax\l0x00003456      cmp r14, qword [obj.bytes_per_block]                   ; [0x131c0:8]=0xd108 \"ha\"\l0x0000345d      jb 0x3695\l"]
	"0x00003463" [URL="dbg.main/0x00003463", fillcolor="white",color="#767676", fontname="Courier",label="0x00003463      jne 0x37c8\l"]
	"0x00003469" [URL="dbg.main/0x00003469", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003469      xor ebx, 1\l0x0000346c      mov rdi, r15                                           ; int64_t arg1\l0x0000346f      mov rcx, r13                                           ; int64_t arg4\l0x00003472      mov rsi, r14                                           ; int64_t arg2\l0x00003475      movzx eax, bl\l0x00003478      add r15, r14\l0x0000347b      mov rdx, qword [rsp + rax*8 + 0x40]                    ; int64_t arg3\l0x00003480      call dbg.write_block\l"]
	"0x00003485" [URL="dbg.main/0x00003485", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3337\l0x00003485      mov rdi, qword [obj.end_offset]                        ; [0x131e0:8]=-1\l0x0000348c      cmp rdi, r15\l0x0000348f      ja 0x3424\l"]
	"0x00003491" [URL="dbg.main/0x00003491", fillcolor="white",color="#767676", fontname="Courier",label="0x00003491      jmp 0x33ed\l"]
	"0x00003496" [URL="dbg.main/0x00003496", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x313a, 0x3177\l0x00003496      lea rax, [var_38h]\l0x0000349b      mov qword [var_8h], rax\l0x000034a0      jmp 0x34e5\l"]
	"0x000034a2" [URL="dbg.main/0x000034a2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3500, 0x3512\l0x000034a2      mov rdi, r15                                           ; int64_t arg1\l0x000034a5      add rbp, 1\l0x000034a9      call dbg.read_char\l0x000034ae      mov r14d, dword [var_30h]\l0x000034b3      and ebx, eax\l0x000034b5      test r14d, r14d\l0x000034b8      js 0x319a\l"]
	"0x000034be" [URL="dbg.main/0x000034be", fillcolor="white",color="#767676", fontname="Courier",label="0x000034be      je 0x3585\l"]
	"0x000034c4" [URL="dbg.main/0x000034c4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000034c4      call sym.imp.__ctype_b_loc\l0x000034c9      mov r8, rax\l0x000034cc      movsxd rax, r14d\l0x000034cf      mov rcx, qword [r8]\l0x000034d2      test byte [rcx + rax*2 + 1], 0x40\l0x000034d7      je 0x3108\l"]
	"0x000034dd" [URL="dbg.main/0x000034dd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000034dd      mov byte [r12 + r13], r14b\l0x000034e1      add r13, 1\l"]
	"0x000034e5" [URL="dbg.main/0x000034e5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34a0\l0x000034e5      cmp byte [obj.limit_bytes_to_format], 0                ; [0x131f0:1]=1\l0x000034ec      je 0x34fb\l"]
	"0x000034ee" [URL="dbg.main/0x000034ee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000034ee      cmp rbp, qword [obj.end_offset]                        ; [0x131e0:8]=-1\l0x000034f5      jae 0x3585\l"]
	"0x000034fb" [URL="dbg.main/0x000034fb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x34ec\l0x000034fb      cmp qword [var_38h], r13\l0x00003500      jne 0x34a2\l"]
	"0x00003502" [URL="dbg.main/0x00003502", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003502      mov rsi, qword [var_8h]                                ; int64_t arg2\l0x00003507      mov rdi, r12                                           ; int64_t arg1\l0x0000350a      call dbg.x2realloc\l0x0000350f      mov r12, rax\l0x00003512      jmp 0x34a2\l"]
	"0x00003514" [URL="dbg.main/0x00003514", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f2a\l0x00003514      lea rax, [sym.format_address_paren]                    ; 0x4f00\l0x0000351b      mov dword [obj.address_base], 8                        ; [0x13224:4]=8\l0x00003525      mov dword [obj.address_pad_len], 7                     ; [0x13220:4]=7\l0x0000352f      mov qword [obj.format_address], rax                    ; [0x13200:8]=0x4f00 sym.format_address_paren\l0x00003536      jmp 0x2f3e\l"]
	"0x0000353b" [URL="dbg.main/0x0000353b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2df6\l0x0000353b      mov rdi, qword [rbp + rax*8]\l0x00003540      test dl, dl\l0x00003542      jne 0x2ef0\l"]
	"0x00003548" [URL="dbg.main/0x00003548", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003548      cmp byte [rdi], 0x2b\l0x0000354b      je 0x2ef0\l"]
	"0x00003551" [URL="dbg.main/0x00003551", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2efa\l0x00003551      mov r12d, 1\l0x00003557      jmp 0x2f13\l"]
	"0x0000355c" [URL="dbg.main/0x0000355c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2de2\l0x0000355c      mov rdi, qword [rbp + rax*8 + 8]\l0x00003561      test dl, dl\l0x00003563      jne 0x32a3\l"]
	"0x00003569" [URL="dbg.main/0x00003569", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003569      movsx eax, byte [rdi]\l0x0000356c      cmp al, 0x2b\l0x0000356e      je 0x32a3\l"]
	"0x00003574" [URL="dbg.main/0x00003574", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003574      sub eax, 0x30\l0x00003577      cmp eax, 9\l0x0000357a      ja 0x2f13\l"]
	"0x00003580" [URL="dbg.main/0x00003580", fillcolor="white",color="#767676", fontname="Courier",label="0x00003580      jmp 0x32a3\l"]
	"0x00003585" [URL="dbg.main/0x00003585", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x34be, 0x34f5\l0x00003585      lea rdi, [rbp - 1]\l0x00003589      mov byte [r12 + r13], 0\l0x0000358e      mov esi, 0x20                                          ; \"'-+ #I0\"\l0x00003593      mov r14, r12\l0x00003596      sub rdi, r13\l0x00003599      lea r13, [0x0000d037]                                  ; \"\\r\"\l0x000035a0      call qword [obj.format_address]                        ; [0x13200:8]=0x4f00 sym.format_address_paren\l"]
	"0x000035a6" [URL="dbg.main/0x000035a6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x35f9\l0x000035a6      movzx edx, byte [r14]\l0x000035aa      mov rcx, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0x130a8:8]=0\l0x000035b1      movsx eax, dl\l0x000035b4      mov dword [var_30h], eax\l0x000035b8      test eax, eax\l0x000035ba      je 0x3665\l"]
	"0x000035c0" [URL="dbg.main/0x000035c0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035c0      lea eax, [rdx - 7]\l0x000035c3      cmp al, 6\l0x000035c5      ja case.default.0x35e6\l"]
	"0x000035cb" [URL="dbg.main/0x000035cb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000035cb      lea rdx, [0x0000d3b4]\l0x000035d2      movzx eax, al\l0x000035d5      mov esi, 1\l0x000035da      movsxd rax, dword [rdx + rax*4]\l0x000035de      add rax, rdx\l0x000035e1      mov edx, 2\l;-- switch\l0x000035e6      jmp rax                                                ; switch table (7 cases) at 0xd3b4\l"]
	"0x000035e9" [URL="dbg.main/0x000035e9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 12:                                                           ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x000035e9      lea rdi, [0x0000d031]                                  ; \"\\f\"\l0x000035f0      call sym.imp.fwrite_unlocked\l"]
	"0x000035f5" [URL="dbg.main/0x000035f5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x00003607  CODE 0x00003615  CODE 0x00003623  \l; XREFS: CODE 0x00003631  CODE 0x0000363f  CODE 0x00003649  \l; XREFS: CODE 0x00003663  CODE 0x00003771  \l0x000035f5      add r14, 1\l0x000035f9      jmp 0x35a6\l"]
	"0x000035fb" [URL="dbg.main/0x000035fb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 11:                                                           ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x000035fb      lea rdi, [0x0000d03d]                                  ; \"\\v\"\l0x00003602      call sym.imp.fwrite_unlocked\l0x00003607      jmp 0x35f5\l"]
	"0x00003609" [URL="dbg.main/0x00003609", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 10:                                                           ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x00003609      lea rdi, [0x0000d034]                                  ; \"\\n\"\l0x00003610      call sym.imp.fwrite_unlocked\l0x00003615      jmp 0x35f5\l"]
	"0x00003617" [URL="dbg.main/0x00003617", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 9:                                                            ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x00003617      lea rdi, [0x0000d03a]                                  ; \"\\t\"\l0x0000361e      call sym.imp.fwrite_unlocked\l0x00003623      jmp 0x35f5\l"]
	"0x00003625" [URL="dbg.main/0x00003625", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 8:                                                            ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x00003625      lea rdi, [0x0000d02e]                                  ; \"\\b\"\l0x0000362c      call sym.imp.fwrite_unlocked\l0x00003631      jmp 0x35f5\l"]
	"0x00003633" [URL="dbg.main/0x00003633", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 7:                                                            ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x00003633      lea rdi, [0x0000d02b]                                  ; \"\\a\"\l0x0000363a      call sym.imp.fwrite_unlocked\l0x0000363f      jmp 0x35f5\l"]
	"0x00003641" [URL="dbg.main/0x00003641", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 13:                                                           ; from 0x000035e6\l; CODE XREF from dbg.main @ 0x35e6\l0x00003641      mov rdi, r13\l0x00003644      call sym.imp.fwrite_unlocked\l0x00003649      jmp 0x35f5\l"]
	"0x0000364b" [URL="dbg.main/0x0000364b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- default:                                                           ; from 0x35e6\l; CODE XREFS from dbg.main @ 0x35c5, 0x35e6\l0x0000364b      mov rax, qword [rcx + 0x28]\l0x0000364f      cmp rax, qword [rcx + 0x30]\l0x00003653      jae 0x3766\l"]
	"0x00003659" [URL="dbg.main/0x00003659", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003659      lea rsi, [rax + 1]\l0x0000365d      mov qword [rcx + 0x28], rsi\l0x00003661      mov byte [rax], dl\l0x00003663      jmp 0x35f5\l"]
	"0x00003665" [URL="dbg.main/0x00003665", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x35ba\l0x00003665      mov rax, qword [rcx + 0x28]\l0x00003669      cmp rax, qword [rcx + 0x30]\l0x0000366d      jae 0x3776\l"]
	"0x00003673" [URL="dbg.main/0x00003673", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00003673      lea rdx, [rax + 1]\l0x00003677      mov rsi, qword [obj.string_min]                        ; [0x13218:8]=0xd107 str.sha2_utilities\l0x0000367e      mov qword [rcx + 0x28], rdx\l0x00003682      mov byte [rax], 0xa\l0x00003685      jmp 0x310f\l"]
	"0x0000368a" [URL="dbg.main/0x0000368a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x32b2\l0x0000368a      mov r12d, 2\l0x00003690      jmp 0x3285\l"]
	"0x00003695" [URL="dbg.main/0x00003695", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x345d\l0x00003695      movsxd r13, dword [var_8h]\l0x0000369a      jmp 0x339e\l"]
	"0x0000369f" [URL="dbg.main/0x0000369f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x340b\l0x0000369f      xor edi, edi                                           ; int64_t arg1\l0x000036a1      call dbg.check_and_close\l0x000036a6      and ebp, eax\l0x000036a8      jmp 0x3411\l"]
	"0x000036ad" [URL="dbg.main/0x000036ad", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x32ce\l0x000036ad      mov rsi, r15                                           ; int64_t arg2\l0x000036b0      call dbg.parse_old_offset\l0x000036b5      test al, al\l0x000036b7      jne 0x373d\l"]
	"0x000036bd" [URL="dbg.main/0x000036bd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000036bd      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x000036c4      jmp 0x32d4\l"]
	"0x000036c9" [URL="dbg.main/0x000036c9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3279\l0x000036c9      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x000036d0      lea r12, [var_38h]\l0x000036d5      mov rsi, r12                                           ; int64_t arg2\l0x000036d8      mov rdi, qword [rbp + rax*8 + 0x10]                    ; int64_t arg1\l0x000036dd      call dbg.parse_old_offset\l0x000036e2      test al, al\l0x000036e4      je 0x327f\l"]
	"0x000036ea" [URL="dbg.main/0x000036ea", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000036ea      mov rax, qword [var_30h]\l0x000036ef      mov byte [obj.flag_pseudo_start], 1                    ; [0x13210:1]=1\l0x000036f6      mov r12d, 1\l0x000036fc      mov qword [obj.n_bytes_to_skip], rax                   ; [0x131f8:8]=0\l0x00003703      mov rax, qword [var_38h]\l0x00003708      mov qword [var_28h], rax\l0x0000370d      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0x130b8:4]=0\l0x00003714      mov rdx, qword [rbp + rax*8]\l0x00003719      mov qword [rbp + rax*8 + 0x10], rdx\l0x0000371e      add rbp, 0x10                                          ; \"'\\xff\\xdc\\xc4\\xff\\xff\\xdc\\xc4\"\l0x00003722      jmp 0x2f13\l"]
	"0x00003727" [URL="dbg.main/0x00003727", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x3125, 0x3131\l0x00003727      mov rdi, r12                                           ; void *ptr\l0x0000372a      call sym.imp.free                                      ; void free(void *ptr)\l0x0000372f      xor edi, edi                                           ; int64_t arg1\l0x00003731      call dbg.check_and_close\l0x00003736      and ebx, eax\l0x00003738      jmp 0x31a2\l"]
	"0x0000373d" [URL="dbg.main/0x0000373d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x36b7\l0x0000373d      mov rax, qword [var_30h]\l0x00003742      mov byte [obj.flag_pseudo_start], 1                    ; [0x13210:1]=1\l0x00003749      add rbp, 0x10                                          ; \"'\\xff\\xdc\\xc4\\xff\\xff\\xdc\\xc4\"\l0x0000374d      xor r12d, r12d\l0x00003750      mov qword [obj.n_bytes_to_skip], rax                   ; [0x131f8:8]=0\l0x00003757      mov rax, qword [var_38h]\l0x0000375c      mov qword [var_28h], rax\l0x00003761      jmp 0x2f13\l"]
	"0x00003766" [URL="dbg.main/0x00003766", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3653\l0x00003766      movzx esi, dl\l0x00003769      mov rdi, rcx\l0x0000376c      call sym.imp.__overflow\l0x00003771      jmp 0x35f5\l"]
	"0x00003776" [URL="dbg.main/0x00003776", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x366d\l0x00003776      mov esi, 0xa\l0x0000377b      mov rdi, rcx\l0x0000377e      call sym.imp.__overflow\l0x00003783      mov rsi, qword [obj.string_min]                        ; [0x13218:8]=0xd107 str.sha2_utilities\l0x0000378a      jmp 0x310f\l"]
	"0x0000378f" [URL="dbg.main/0x0000378f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a8c\l0x0000378f      mov r8, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00003796      mov esi, dword [var_30h]                               ; int64_t arg2\l0x0000379a      mov rcx, r13                                           ; int64_t arg5\l0x0000379d      mov edi, eax                                           ; int64_t arg1\l0x0000379f      mov edx, 0x6a                                          ; 'j' ; int64_t arg4\l0x000037a4      call sym.xstrtol_fatal\l"]
	"0x000037a9" [URL="dbg.main/0x000037a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x334c\l0x000037a9      lea rcx, obj.__PRETTY_FUNCTION__.3                     ; 0xd3db ; \"dump\" ; const char *function\l0x000037b0      mov edx, 0x588                                         ; unsigned int line\l0x000037b5      lea rsi, str.src_od.c                                  ; 0xd061 ; \"src/od.c\" ; const char *file\l0x000037bc      lea rdi, str.n_bytes_read__bytes_per_block             ; 0xe730 ; \"n_bytes_read == bytes_per_block\" ; const char *assertion\l0x000037c3      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x000037c8" [URL="dbg.main/0x000037c8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x3463\l0x000037c8      lea rcx, obj.__PRETTY_FUNCTION__.3                     ; 0xd3db ; \"dump\" ; const char *function\l0x000037cf      mov edx, 0x57a                                         ; unsigned int line\l0x000037d4      lea rsi, str.src_od.c                                  ; 0xd061 ; \"src/od.c\" ; const char *file\l0x000037db      lea rdi, str.n_bytes_read__bytes_per_block             ; 0xe730 ; \"n_bytes_read == bytes_per_block\" ; const char *assertion\l0x000037e2      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x000037e7" [URL="dbg.main/0x000037e7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2f5c\l0x000037e7      mov edx, 5\l0x000037ec      lea rsi, str.skip_bytes__read_bytes_is_too_large       ; 0xe6d8 ; \"skip-bytes + read-bytes is too large\"\l0x000037f3      xor edi, edi\l0x000037f5      call sym.imp.dcgettext\l0x000037fa      xor esi, esi                                           ; int errname\l0x000037fc      mov edi, 1                                             ; int status\l0x00003801      mov rdx, rax                                           ; char *format\l0x00003804      xor eax, eax\l0x00003806      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000380b" [URL="dbg.main/0x0000380b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dbc\l0x0000380b      mov edx, 5\l0x00003810      lea rsi, str.no_type_may_be_specified_when_dumping_strings ; 0xe678 ; \"no type may be specified when dumping strings\"\l0x00003817      xor edi, edi\l0x00003819      call sym.imp.dcgettext\l0x0000381e      xor esi, esi                                           ; int errname\l0x00003820      mov edi, 1                                             ; int status\l0x00003825      mov rdx, rax                                           ; char *format\l0x00003828      xor eax, eax\l0x0000382a      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x0000382f" [URL="dbg.main/0x0000382f", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x31d0\l0x0000382f      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
	"0x00003834" [URL="dbg.main/0x00003834", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bc3\l0x00003834      lea rcx, obj.__PRETTY_FUNCTION__.5                     ; 0xd400 ; \"decode_format_string\" ; const char *function\l0x0000383b      mov edx, 0x3d8                                         ; unsigned int line\l0x00003840      lea rsi, str.src_od.c                                  ; 0xd061 ; \"src/od.c\" ; const char *file\l0x00003847      lea rdi, str.s___NULL                                  ; 0xd190 ; \"s != NULL\" ; const char *assertion\l0x0000384e      call sym.imp.__assert_fail                             ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\l"]
	"0x00003853" [URL="dbg.main/0x00003853", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ad6, 0x2cee\l0x00003853      mov edx, 5\l0x00003858      lea rsi, str.invalid_output_address_radix__c__it_must_be_one_character_from__doxn_ ; 0xe630 ; \"invalid output address radix '%c'; it must be one character from [doxn]\"\l0x0000385f      xor edi, edi\l0x00003861      mov byte [var_8h], cl\l0x00003865      call sym.imp.dcgettext\l0x0000386a      movsx ecx, byte [var_8h]\l0x0000386f      xor esi, esi                                           ; int errname\l0x00003871      mov edi, 1                                             ; int status\l0x00003876      mov rdx, rax                                           ; char *format\l0x00003879      xor eax, eax\l0x0000387b      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00003880" [URL="dbg.main/0x00003880", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c6c\l0x00003880      mov r8, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x00003887      mov esi, dword [var_30h]                               ; int64_t arg2\l0x0000388b      mov rcx, r13                                           ; int64_t arg5\l0x0000388e      mov edi, eax                                           ; int64_t arg1\l; DATA XREF from dbg.main @ 0x28b9\l0x00003890      mov edx, 0x53                                          ; 'S' ; int64_t arg4\l0x00003895      call sym.xstrtol_fatal\l"]
	"0x0000389a" [URL="dbg.main/0x0000389a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2b89\l0x0000389a      mov r8, qword [obj.optarg]                             ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0x130c0:8]=0\l0x000038a1      mov esi, dword [var_30h]                               ; int64_t arg2\l0x000038a5      mov rcx, r13                                           ; int64_t arg5\l0x000038a8      mov edi, eax                                           ; int64_t arg1\l0x000038aa      mov edx, 0x77                                          ; 'w' ; int64_t arg4\l0x000038af      call sym.xstrtol_fatal\l0x000038b4      nop word cs:[rax + rax]\l0x000038be      nop\l"]
        "0x00002840" -> "0x00002990" [color="#3a96dd"];
        "0x00002990" -> "0x00002da0" [color="#13a10e"];
        "0x00002990" -> "0x000029b5" [color="#c50f1f"];
        "0x000029b5" -> "0x00002e67" [color="#13a10e"];
        "0x000029b5" -> "0x000029c0" [color="#c50f1f"];
        "0x000029c0" -> "0x00002d20" [color="#13a10e"];
        "0x000029c0" -> "0x000029c9" [color="#c50f1f"];
        "0x000029c9" -> "0x00002e67" [color="#13a10e"];
        "0x000029c9" -> "0x000029d5" [color="#c50f1f"];
        "0x000029d5" -> "0x00002ab1" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a18" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a9c" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a03" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x000029f1" [color="#3a96dd"];
        "0x000029d5" -> "0x000029df" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x000029df" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002ca4" [color="#3a96dd"];
        "0x000029d5" -> "0x00002c8f" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002c45" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x000029f1" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002c30" [color="#3a96dd"];
        "0x000029d5" -> "0x00002c1b" [color="#3a96dd"];
        "0x000029d5" -> "0x00002c06" [color="#3a96dd"];
        "0x000029d5" -> "0x00002bf1" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a03" [color="#3a96dd"];
        "0x000029d5" -> "0x00002bdc" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a2d" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a42" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a6c" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x000029df" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a18" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a57" [color="#3a96dd"];
        "0x000029d5" -> "0x00002bb9" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002ba8" [color="#3a96dd"];
        "0x000029d5" -> "0x00002b5f" [color="#3a96dd"];
        "0x000029d5" -> "0x00002a2d" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002e67" [color="#3a96dd"];
        "0x000029d5" -> "0x00002b53" [color="#3a96dd"];
        "0x000029d5" -> "0x00002afe" [color="#3a96dd"];
        "0x000029df" -> "0x00002990" [color="#3a96dd"];
        "0x000029f1" -> "0x00002990" [color="#3a96dd"];
        "0x00002a03" -> "0x00002990" [color="#3a96dd"];
        "0x00002a18" -> "0x00002990" [color="#3a96dd"];
        "0x00002a2d" -> "0x00002990" [color="#3a96dd"];
        "0x00002a42" -> "0x00002990" [color="#3a96dd"];
        "0x00002a57" -> "0x00002990" [color="#3a96dd"];
        "0x00002a6c" -> "0x0000378f" [color="#13a10e"];
        "0x00002a6c" -> "0x00002a92" [color="#c50f1f"];
        "0x00002a92" -> "0x00002990" [color="#3a96dd"];
        "0x00002a9c" -> "0x00002990" [color="#3a96dd"];
        "0x00002ab1" -> "0x00002e9d" [color="#13a10e"];
        "0x00002ab1" -> "0x00002ac4" [color="#c50f1f"];
        "0x00002ac4" -> "0x00002ceb" [color="#13a10e"];
        "0x00002ac4" -> "0x00002aca" [color="#c50f1f"];
        "0x00002aca" -> "0x00002e71" [color="#13a10e"];
        "0x00002aca" -> "0x00002ad3" [color="#c50f1f"];
        "0x00002ad3" -> "0x00003853" [color="#13a10e"];
        "0x00002ad3" -> "0x00002adc" [color="#c50f1f"];
        "0x00002adc" -> "0x00002990" [color="#3a96dd"];
        "0x00002afe" -> "0x00002d94" [color="#13a10e"];
        "0x00002afe" -> "0x00002b3e" [color="#c50f1f"];
        "0x00002b3e" -> "0x00002990" [color="#13a10e"];
        "0x00002b3e" -> "0x00002b47" [color="#c50f1f"];
        "0x00002b47" -> "0x00002990" [color="#3a96dd"];
        "0x00002b53" -> "0x00002990" [color="#3a96dd"];
        "0x00002b5f" -> "0x00002d72" [color="#13a10e"];
        "0x00002b5f" -> "0x00002b6f" [color="#c50f1f"];
        "0x00002b6f" -> "0x0000389a" [color="#13a10e"];
        "0x00002b6f" -> "0x00002b8f" [color="#c50f1f"];
        "0x00002b8f" -> "0x00002990" [color="#3a96dd"];
        "0x00002ba8" -> "0x00002990" [color="#3a96dd"];
        "0x00002bb9" -> "0x00003834" [color="#13a10e"];
        "0x00002bb9" -> "0x00002bc9" [color="#c50f1f"];
        "0x00002bc9" -> "0x00002990" [color="#3a96dd"];
        "0x00002bdc" -> "0x00002990" [color="#3a96dd"];
        "0x00002bf1" -> "0x00002990" [color="#3a96dd"];
        "0x00002c06" -> "0x00002990" [color="#3a96dd"];
        "0x00002c1b" -> "0x00002990" [color="#3a96dd"];
        "0x00002c30" -> "0x00002990" [color="#3a96dd"];
        "0x00002c45" -> "0x00002d8a" [color="#13a10e"];
        "0x00002c45" -> "0x00002c55" [color="#c50f1f"];
        "0x00002c55" -> "0x00003880" [color="#13a10e"];
        "0x00002c55" -> "0x00002c72" [color="#c50f1f"];
        "0x00002c72" -> "0x00002c77" [color="#3a96dd"];
        "0x00002c77" -> "0x00002990" [color="#3a96dd"];
        "0x00002c8f" -> "0x00002990" [color="#3a96dd"];
        "0x00002ca4" -> "0x00002a92" [color="#13a10e"];
        "0x00002ca4" -> "0x00002cd1" [color="#c50f1f"];
        "0x00002cd1" -> "0x00002ceb" [color="#3a96dd"];
        "0x00002ceb" -> "0x00003853" [color="#13a10e"];
        "0x00002ceb" -> "0x00002cf4" [color="#c50f1f"];
        "0x00002cf4" -> "0x00002990" [color="#3a96dd"];
        "0x00002d20" -> "0x00002d60" [color="#13a10e"];
        "0x00002d20" -> "0x00002d27" [color="#c50f1f"];
        "0x00002d60" -> "0x00002e67" [color="#13a10e"];
        "0x00002d60" -> "0x00002d6b" [color="#c50f1f"];
        "0x00002d6b" -> "0x00002d72" [color="#3a96dd"];
        "0x00002d72" -> "0x00002990" [color="#3a96dd"];
        "0x00002d8a" -> "0x00002c77" [color="#3a96dd"];
        "0x00002d94" -> "0x00002990" [color="#3a96dd"];
        "0x00002da0" -> "0x000031e5" [color="#13a10e"];
        "0x00002da0" -> "0x00002dab" [color="#c50f1f"];
        "0x00002dab" -> "0x00002dc2" [color="#13a10e"];
        "0x00002dab" -> "0x00002db4" [color="#c50f1f"];
        "0x00002db4" -> "0x0000380b" [color="#13a10e"];
        "0x00002db4" -> "0x00002dc2" [color="#c50f1f"];
        "0x00002dc2" -> "0x00002ec9" [color="#13a10e"];
        "0x00002dc2" -> "0x00002dde" [color="#c50f1f"];
        "0x00002dde" -> "0x0000355c" [color="#13a10e"];
        "0x00002dde" -> "0x00002de8" [color="#c50f1f"];
        "0x00002de8" -> "0x00003262" [color="#13a10e"];
        "0x00002de8" -> "0x00002df2" [color="#c50f1f"];
        "0x00002df2" -> "0x0000353b" [color="#13a10e"];
        "0x00002df2" -> "0x00002dfc" [color="#c50f1f"];
        "0x00002dfc" -> "0x00002f13" [color="#13a10e"];
        "0x00002dfc" -> "0x00002e04" [color="#c50f1f"];
        "0x00002e04" -> "0x00002f13" [color="#13a10e"];
        "0x00002e04" -> "0x00002e0e" [color="#c50f1f"];
        "0x00002e0e" -> "0x00002e67" [color="#3a96dd"];
        "0x00002e67" -> "0x00002e71" [color="#3a96dd"];
        "0x00002e71" -> "0x00002990" [color="#3a96dd"];
        "0x00002e9d" -> "0x00002990" [color="#3a96dd"];
        "0x00002ec9" -> "0x00002f13" [color="#13a10e"];
        "0x00002ec9" -> "0x00002ecd" [color="#c50f1f"];
        "0x00002ecd" -> "0x0000329e" [color="#13a10e"];
        "0x00002ecd" -> "0x00002ed7" [color="#c50f1f"];
        "0x00002ed7" -> "0x0000326a" [color="#13a10e"];
        "0x00002ed7" -> "0x00002ee1" [color="#c50f1f"];
        "0x00002ee1" -> "0x00002e04" [color="#13a10e"];
        "0x00002ee1" -> "0x00002eeb" [color="#c50f1f"];
        "0x00002eeb" -> "0x00002ef0" [color="#3a96dd"];
        "0x00002ef0" -> "0x00003551" [color="#13a10e"];
        "0x00002ef0" -> "0x00002f00" [color="#c50f1f"];
        "0x00002f00" -> "0x00002f13" [color="#3a96dd"];
        "0x00002f13" -> "0x00002f3e" [color="#13a10e"];
        "0x00002f13" -> "0x00002f1c" [color="#c50f1f"];
        "0x00002f1c" -> "0x00003514" [color="#13a10e"];
        "0x00002f1c" -> "0x00002f30" [color="#c50f1f"];
        "0x00002f30" -> "0x00002f3e" [color="#3a96dd"];
        "0x00002f3e" -> "0x00002f62" [color="#13a10e"];
        "0x00002f3e" -> "0x00002f47" [color="#c50f1f"];
        "0x00002f47" -> "0x000037e7" [color="#13a10e"];
        "0x00002f47" -> "0x00002f62" [color="#c50f1f"];
        "0x00002f62" -> "0x000031ec" [color="#13a10e"];
        "0x00002f62" -> "0x00002f70" [color="#c50f1f"];
        "0x00002f70" -> "0x00002f88" [color="#13a10e"];
        "0x00002f70" -> "0x00002f7c" [color="#c50f1f"];
        "0x00002f7c" -> "0x00002f88" [color="#3a96dd"];
        "0x00002f88" -> "0x000031b3" [color="#13a10e"];
        "0x00002f88" -> "0x00002fa4" [color="#c50f1f"];
        "0x00002fa4" -> "0x000031b3" [color="#13a10e"];
        "0x00002fa4" -> "0x00002fc7" [color="#c50f1f"];
        "0x00002fc7" -> "0x00002fde" [color="#13a10e"];
        "0x00002fc7" -> "0x00002fd2" [color="#c50f1f"];
        "0x00002fd2" -> "0x00002fde" [color="#3a96dd"];
        "0x00002fde" -> "0x0000323a" [color="#13a10e"];
        "0x00002fde" -> "0x00002ff7" [color="#c50f1f"];
        "0x00002ff7" -> "0x0000300e" [color="#13a10e"];
        "0x00002ff7" -> "0x00003004" [color="#c50f1f"];
        "0x00003004" -> "0x0000303c" [color="#13a10e"];
        "0x00003004" -> "0x0000300e" [color="#c50f1f"];
        "0x0000300e" -> "0x0000303c" [color="#3a96dd"];
        "0x0000303c" -> "0x000030d2" [color="#13a10e"];
        "0x0000303c" -> "0x00003054" [color="#c50f1f"];
        "0x00003054" -> "0x00003080" [color="#3a96dd"];
        "0x00003080" -> "0x00003080" [color="#13a10e"];
        "0x00003080" -> "0x000030aa" [color="#c50f1f"];
        "0x000030aa" -> "0x000030b0" [color="#3a96dd"];
        "0x000030b0" -> "0x000030b0" [color="#13a10e"];
        "0x000030b0" -> "0x000030d2" [color="#c50f1f"];
        "0x000030d2" -> "0x000032f9" [color="#13a10e"];
        "0x000030d2" -> "0x000030e1" [color="#c50f1f"];
        "0x000030e1" -> "0x00003108" [color="#3a96dd"];
        "0x00003108" -> "0x0000310f" [color="#3a96dd"];
        "0x0000310f" -> "0x00003137" [color="#13a10e"];
        "0x0000310f" -> "0x0000311b" [color="#c50f1f"];
        "0x0000311b" -> "0x00003727" [color="#13a10e"];
        "0x0000311b" -> "0x0000312b" [color="#c50f1f"];
        "0x0000312b" -> "0x00003727" [color="#13a10e"];
        "0x0000312b" -> "0x00003137" [color="#c50f1f"];
        "0x00003137" -> "0x00003496" [color="#13a10e"];
        "0x00003137" -> "0x00003140" [color="#c50f1f"];
        "0x00003140" -> "0x0000317d" [color="#3a96dd"];
        "0x00003150" -> "0x0000310f" [color="#13a10e"];
        "0x00003150" -> "0x0000316c" [color="#c50f1f"];
        "0x0000316c" -> "0x00003496" [color="#13a10e"];
        "0x0000316c" -> "0x0000317d" [color="#c50f1f"];
        "0x0000317d" -> "0x00003150" [color="#13a10e"];
        "0x0000317d" -> "0x0000319a" [color="#c50f1f"];
        "0x0000319a" -> "0x000031a2" [color="#3a96dd"];
        "0x000031a2" -> "0x000031a5" [color="#3a96dd"];
        "0x000031a5" -> "0x000031b3" [color="#3a96dd"];
        "0x000031b3" -> "0x000031fd" [color="#13a10e"];
        "0x000031b3" -> "0x000031bc" [color="#c50f1f"];
        "0x000031bc" -> "0x000031c2" [color="#3a96dd"];
        "0x000031c2" -> "0x0000382f" [color="#13a10e"];
        "0x000031c2" -> "0x000031d6" [color="#c50f1f"];
        "0x000031e5" -> "0x000031c2" [color="#3a96dd"];
        "0x000031ec" -> "0x00002f70" [color="#3a96dd"];
        "0x000031fd" -> "0x000031bc" [color="#13a10e"];
        "0x000031fd" -> "0x0000320e" [color="#c50f1f"];
        "0x0000320e" -> "0x0000323a" [color="#3a96dd"];
        "0x0000323a" -> "0x00003256" [color="#13a10e"];
        "0x0000323a" -> "0x0000323f" [color="#c50f1f"];
        "0x0000323f" -> "0x0000303c" [color="#3a96dd"];
        "0x00003256" -> "0x0000303c" [color="#3a96dd"];
        "0x00003262" -> "0x00002f13" [color="#13a10e"];
        "0x00003262" -> "0x0000326a" [color="#c50f1f"];
        "0x0000326a" -> "0x000036c9" [color="#13a10e"];
        "0x0000326a" -> "0x0000327f" [color="#c50f1f"];
        "0x0000327f" -> "0x00003285" [color="#3a96dd"];
        "0x00003285" -> "0x00002f13" [color="#13a10e"];
        "0x00003285" -> "0x00003292" [color="#c50f1f"];
        "0x00003292" -> "0x00002e0e" [color="#3a96dd"];
        "0x0000329e" -> "0x000032a3" [color="#3a96dd"];
        "0x000032a3" -> "0x0000368a" [color="#13a10e"];
        "0x000032a3" -> "0x000032b8" [color="#c50f1f"];
        "0x000032b8" -> "0x000036ad" [color="#13a10e"];
        "0x000032b8" -> "0x000032d4" [color="#c50f1f"];
        "0x000032d4" -> "0x00002f13" [color="#3a96dd"];
        "0x000032f9" -> "0x00003485" [color="#13a10e"];
        "0x000032f9" -> "0x0000333d" [color="#c50f1f"];
        "0x0000333d" -> "0x00003376" [color="#3a96dd"];
        "0x00003347" -> "0x000037a9" [color="#13a10e"];
        "0x00003347" -> "0x00003352" [color="#c50f1f"];
        "0x00003352" -> "0x00003376" [color="#3a96dd"];
        "0x00003376" -> "0x00003347" [color="#13a10e"];
        "0x00003376" -> "0x0000339e" [color="#c50f1f"];
        "0x0000339e" -> "0x000033ed" [color="#13a10e"];
        "0x0000339e" -> "0x000033a3" [color="#c50f1f"];
        "0x000033a3" -> "0x000033ed" [color="#3a96dd"];
        "0x000033ed" -> "0x00003411" [color="#13a10e"];
        "0x000033ed" -> "0x00003404" [color="#c50f1f"];
        "0x00003404" -> "0x0000369f" [color="#13a10e"];
        "0x00003404" -> "0x00003411" [color="#c50f1f"];
        "0x00003411" -> "0x000031a5" [color="#3a96dd"];
        "0x00003424" -> "0x00003695" [color="#13a10e"];
        "0x00003424" -> "0x00003463" [color="#c50f1f"];
        "0x00003463" -> "0x000037c8" [color="#13a10e"];
        "0x00003463" -> "0x00003469" [color="#c50f1f"];
        "0x00003469" -> "0x00003485" [color="#3a96dd"];
        "0x00003485" -> "0x00003424" [color="#13a10e"];
        "0x00003485" -> "0x00003491" [color="#c50f1f"];
        "0x00003491" -> "0x000033ed" [color="#3a96dd"];
        "0x00003496" -> "0x000034e5" [color="#3a96dd"];
        "0x000034a2" -> "0x0000319a" [color="#13a10e"];
        "0x000034a2" -> "0x000034be" [color="#c50f1f"];
        "0x000034be" -> "0x00003585" [color="#13a10e"];
        "0x000034be" -> "0x000034c4" [color="#c50f1f"];
        "0x000034c4" -> "0x00003108" [color="#13a10e"];
        "0x000034c4" -> "0x000034dd" [color="#c50f1f"];
        "0x000034dd" -> "0x000034e5" [color="#3a96dd"];
        "0x000034e5" -> "0x000034fb" [color="#13a10e"];
        "0x000034e5" -> "0x000034ee" [color="#c50f1f"];
        "0x000034ee" -> "0x00003585" [color="#13a10e"];
        "0x000034ee" -> "0x000034fb" [color="#c50f1f"];
        "0x000034fb" -> "0x000034a2" [color="#13a10e"];
        "0x000034fb" -> "0x00003502" [color="#c50f1f"];
        "0x00003502" -> "0x000034a2" [color="#3a96dd"];
        "0x00003514" -> "0x00002f3e" [color="#3a96dd"];
        "0x0000353b" -> "0x00002ef0" [color="#13a10e"];
        "0x0000353b" -> "0x00003548" [color="#c50f1f"];
        "0x00003548" -> "0x00002ef0" [color="#13a10e"];
        "0x00003548" -> "0x00003551" [color="#c50f1f"];
        "0x00003551" -> "0x00002f13" [color="#3a96dd"];
        "0x0000355c" -> "0x000032a3" [color="#13a10e"];
        "0x0000355c" -> "0x00003569" [color="#c50f1f"];
        "0x00003569" -> "0x000032a3" [color="#13a10e"];
        "0x00003569" -> "0x00003574" [color="#c50f1f"];
        "0x00003574" -> "0x00002f13" [color="#13a10e"];
        "0x00003574" -> "0x00003580" [color="#c50f1f"];
        "0x00003580" -> "0x000032a3" [color="#3a96dd"];
        "0x00003585" -> "0x000035a6" [color="#3a96dd"];
        "0x000035a6" -> "0x00003665" [color="#13a10e"];
        "0x000035a6" -> "0x000035c0" [color="#c50f1f"];
        "0x000035c0" -> "0x0000364b" [color="#13a10e"];
        "0x000035c0" -> "0x000035cb" [color="#c50f1f"];
        "0x000035cb" -> "0x00003633" [color="#3a96dd"];
        "0x000035cb" -> "0x00003625" [color="#3a96dd"];
        "0x000035cb" -> "0x00003617" [color="#3a96dd"];
        "0x000035cb" -> "0x00003609" [color="#3a96dd"];
        "0x000035cb" -> "0x000035fb" [color="#3a96dd"];
        "0x000035cb" -> "0x000035e9" [color="#3a96dd"];
        "0x000035cb" -> "0x00003641" [color="#3a96dd"];
        "0x000035e9" -> "0x000035f5" [color="#3a96dd"];
        "0x000035f5" -> "0x000035a6" [color="#3a96dd"];
        "0x000035fb" -> "0x000035f5" [color="#3a96dd"];
        "0x00003609" -> "0x000035f5" [color="#3a96dd"];
        "0x00003617" -> "0x000035f5" [color="#3a96dd"];
        "0x00003625" -> "0x000035f5" [color="#3a96dd"];
        "0x00003633" -> "0x000035f5" [color="#3a96dd"];
        "0x00003641" -> "0x000035f5" [color="#3a96dd"];
        "0x0000364b" -> "0x00003766" [color="#13a10e"];
        "0x0000364b" -> "0x00003659" [color="#c50f1f"];
        "0x00003659" -> "0x000035f5" [color="#3a96dd"];
        "0x00003665" -> "0x00003776" [color="#13a10e"];
        "0x00003665" -> "0x00003673" [color="#c50f1f"];
        "0x00003673" -> "0x0000310f" [color="#3a96dd"];
        "0x0000368a" -> "0x00003285" [color="#3a96dd"];
        "0x00003695" -> "0x0000339e" [color="#3a96dd"];
        "0x0000369f" -> "0x00003411" [color="#3a96dd"];
        "0x000036ad" -> "0x0000373d" [color="#13a10e"];
        "0x000036ad" -> "0x000036bd" [color="#c50f1f"];
        "0x000036bd" -> "0x000032d4" [color="#3a96dd"];
        "0x000036c9" -> "0x0000327f" [color="#13a10e"];
        "0x000036c9" -> "0x000036ea" [color="#c50f1f"];
        "0x000036ea" -> "0x00002f13" [color="#3a96dd"];
        "0x00003727" -> "0x000031a2" [color="#3a96dd"];
        "0x0000373d" -> "0x00002f13" [color="#3a96dd"];
        "0x00003766" -> "0x000035f5" [color="#3a96dd"];
        "0x00003776" -> "0x0000310f" [color="#3a96dd"];
        "0x0000378f" -> "0x000037a9" [color="#3a96dd"];
        "0x000037e7" -> "0x0000380b" [color="#3a96dd"];
        "0x0000380b" -> "0x0000382f" [color="#3a96dd"];
        "0x00003853" -> "0x00003880" [color="#3a96dd"];
        "0x00003880" -> "0x0000389a" [color="#3a96dd"];
        "0x0000389a" -> "0x000038c0" [color="#3a96dd"];
}
