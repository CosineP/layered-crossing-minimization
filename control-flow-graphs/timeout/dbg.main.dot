digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00002920" [URL="dbg.main/0x00002920", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ;-- main:\l  ; DATA XREF from entry0 @ 0x2f38\l1501: int dbg.main (int argc, char **argv);\l; var int status @ rbp-0x164\l; var sigset_t cleanup_set @ rbp-0x160\l; var sigaction sa @ rbp-0xe0\l; var char[19] signame @ rbp-0x40\l; var int64_t var_ch @ rsp+0xc\l; var int64_t var_10h @ rsp+0x10\l; var int64_t var_90h @ rsp+0x90\l; var int64_t var_98h @ rsp+0x98\l; var int64_t var_118h @ rsp+0x118\l; var int64_t var_130h @ rsp+0x130\l; var int64_t var_148h @ rsp+0x148\l; arg int argc @ rdi\l; arg char **argv @ rsi\l0x00002920      endbr64                                                ; int main(int argc,char ** argv);\l0x00002924      push r14\l0x00002926      lea r14, obj.long_options                              ; 0xba40\l0x0000292d      push r13\l0x0000292f      lea r13, str.k:s:v                                     ; 0x8133 ; \"+k:s:v\"\l0x00002936      push r12\l0x00002938      lea r12, [0x000080cb]                                  ; \"coreutils\"\l0x0000293f      push rbp\l0x00002940      mov ebp, edi                                           ; argc\l0x00002942      push rbx\l0x00002943      mov rbx, rsi                                           ; argv\l0x00002946      sub rsp, 0x150\l0x0000294d      mov rdi, qword [rsi]                                   ; int64_t arg1\l0x00002950      mov rax, qword fs:[0x28]\l0x00002959      mov qword [var_148h], rax\l0x00002961      xor eax, eax\l0x00002963      call dbg.set_program_name\l0x00002968      lea rsi, [0x00008fe1]                                  ; const char *locale\l0x0000296f      mov edi, 6                                             ; int category\l0x00002974      call sym.imp.setlocale                                 ; char *setlocale(int category, const char *locale)\l0x00002979      lea rsi, str._usr_local_share_locale                   ; 0x810d ; \"/usr/local/share/locale\" ; char *dirname\l0x00002980      mov rdi, r12                                           ; char *domainname\l0x00002983      call sym.imp.bindtextdomain                            ; char *bindtextdomain(char *domainname, char *dirname)\l0x00002988      mov rdi, r12                                           ; char *domainname\l0x0000298b      lea r12, [0x00008a84]\l0x00002992      call sym.imp.textdomain                                ; char *textdomain(char *domainname)\l0x00002997      lea rdi, [dbg.close_stdout]                            ; 0x3c40 ; func function\l0x0000299e      mov dword [obj.exit_failure], 0x7d                     ; '}'\l                                                                       ; [0xc020:4]=125 ; \"}\"\l0x000029a8      call sym.atexit                                        ; int atexit(func function)\l0x000029ad      nop dword [rax]\l"]
	"0x000029b0" [URL="dbg.main/0x000029b0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x29f7, 0x2a07, 0x2a17, 0x2a3d, 0x2a64\l0x000029b0      xor r8d, r8d\l0x000029b3      mov rcx, r14\l0x000029b6      mov rdx, r13\l0x000029b9      mov rsi, rbx\l0x000029bc      mov edi, ebp\l0x000029be      call sym.imp.getopt_long\l0x000029c3      cmp eax, 0xffffffff\l0x000029c6      je 0x2ab9\l"]
	"0x000029cc" [URL="dbg.main/0x000029cc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029cc      cmp eax, 0x81\l0x000029d1      jg case.0x29eb.108\l"]
	"0x000029d3" [URL="dbg.main/0x000029d3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029d3      cmp eax, 0x6a\l0x000029d6      jle 0x2a70\l"]
	"0x000029dc" [URL="dbg.main/0x000029dc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029dc      sub eax, 0x6b\l0x000029df      cmp eax, 0x16\l0x000029e2      ja case.0x29eb.108\l"]
	"0x000029e4" [URL="dbg.main/0x000029e4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x000029e4      movsxd rax, dword [r12 + rax*4]\l0x000029e8      add rax, r12\l;-- switch\l0x000029eb      jmp rax                                                ; switch table (23 cases) at 0x8a84\l"]
	"0x000029f0" [URL="dbg.main/0x000029f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 129:                                                          ; from 0x000029eb\l; CODE XREF from dbg.main @ 0x29eb\l0x000029f0      mov byte [obj.preserve_status], 1                      ; [0xc2b9:1]=1\l0x000029f7      jmp 0x29b0\l"]
	"0x00002a00" [URL="dbg.main/0x00002a00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 128:                                                          ; from 0x000029eb\l; CODE XREF from dbg.main @ 0x29eb\l0x00002a00      mov byte [obj.foreground], 1                           ; [0xc2ba:1]=1\l0x00002a07      jmp 0x29b0\l"]
	"0x00002a10" [URL="dbg.main/0x00002a10", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 118:                                                          ; from 0x000029eb\l; CODE XREF from dbg.main @ 0x29eb\l0x00002a10      mov byte [obj.verbose], 1                              ; [0xc2b8:1]=1\l0x00002a17      jmp 0x29b0\l"]
	"0x00002a20" [URL="dbg.main/0x00002a20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 115:                                                          ; from 0x000029eb\l; CODE XREF from dbg.main @ 0x29eb\l0x00002a20      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xc280:8]=0 ; int64_t arg1\l0x00002a27      lea rsi, [var_130h]                                    ; int64_t arg2\l0x00002a2f      call dbg.operand2sig\l0x00002a34      mov dword [obj.term_signal], eax                       ; [0xc010:4]=9 ; \"\\t\"\l0x00002a3a      cmp eax, 0xffffffff\l0x00002a3d      jne 0x29b0\l"]
	"0x00002a43" [URL="dbg.main/0x00002a43", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 108...114:                                                    ; from 0x000029eb\l;-- case 116:                                                          ; from 0x000029eb\l;-- case 117:                                                          ; from 0x000029eb\l;-- default:                                                           ; from 0x29eb\l; CODE XREFS from dbg.main @ 0x29d1, 0x29e2, 0x29eb, 0x2ab0, 0x2ac5\l0x00002a43      mov edi, 0x7d                                          ; '}' ; int64_t arg1\l0x00002a48      call dbg.usage\l0x00002a4d      nop dword [rax]\l"]
	"0x00002a50" [URL="dbg.main/0x00002a50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label=";-- case 107:                                                          ; from 0x000029eb\l; CODE XREF from dbg.main @ 0x29eb\l0x00002a50      mov rdi, qword [obj.optarg]                            ; obj.optarg_GLIBC_2.2.5\l                                                                       ; [0xc280:8]=0 ; int64_t arg1\l0x00002a57      call dbg.parse_duration\l0x00002a5c      movsd qword [obj.kill_after], xmm0                     ; [0xc2c0:8]=0\l0x00002a64      jmp 0x29b0\l"]
	"0x00002a70" [URL="dbg.main/0x00002a70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29d6\l0x00002a70      cmp eax, 0xffffff7d                                    ; 4294967165\l0x00002a75      jne 0x2aab\l"]
	"0x00002a77" [URL="dbg.main/0x00002a77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002a77      mov rdi, qword [obj.stdout]                            ; obj.stdout_GLIBC_2.2.5\l                                                                       ; [0xc268:8]=0 ; int64_t arg1\l0x00002a7e      mov rcx, qword [obj.Version]                           ; [0xc018:8]=0x8b36 \"9.0\" ; \"6\\x8b\" ; int64_t arg5\l0x00002a85      xor eax, eax\l0x00002a87      xor r9d, r9d                                           ; int64_t arg_c0h\l0x00002a8a      lea r8, str.Padraig_Brady                              ; 0x8125 ; \"Padraig Brady\" ; int64_t arg6\l0x00002a91      lea rdx, str.GNU_coreutils                             ; 0x80c7 ; \"GNU coreutils\" ; int64_t arg3\l0x00002a98      lea rsi, str.timeout                                   ; 0x8049 ; \"timeout\" ; int64_t arg2\l0x00002a9f      call dbg.version_etc\l0x00002aa4      xor edi, edi                                           ; int status\l0x00002aa6      call sym.imp.exit                                      ; void exit(int status)\l"]
	"0x00002aab" [URL="dbg.main/0x00002aab", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2a75\l0x00002aab      cmp eax, 0xffffff7e                                    ; 4294967166\l0x00002ab0      jne case.0x29eb.108\l"]
	"0x00002ab2" [URL="dbg.main/0x00002ab2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ab2      xor edi, edi                                           ; int64_t arg1\l0x00002ab4      call dbg.usage\l"]
	"0x00002ab9" [URL="dbg.main/0x00002ab9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x29c6\l0x00002ab9      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xc270:4]=1\l0x00002ac0      sub ebp, eax\l0x00002ac2      sub ebp, 1\l0x00002ac5      jle case.0x29eb.108\l"]
	"0x00002acb" [URL="dbg.main/0x00002acb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002acb      mov rdi, qword [rbx + rax*8]                           ; int64_t arg1\l0x00002acf      lea edx, [rax + 1]\l0x00002ad2      mov dword [obj.optind], edx                            ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xc270:4]=1\l0x00002ad8      call dbg.parse_duration\l0x00002add      movsxd rax, dword [obj.optind]                         ; obj.optind_GLIBC_2.2.5\l                                                                       ; [0xc270:4]=1\l0x00002ae4      cmp byte [obj.foreground], 0                           ; [0xc2ba:1]=1\l0x00002aeb      movq r12, xmm0\l0x00002af0      lea rbx, [rbx + rax*8]\l0x00002af4      mov rax, qword [rbx]\l0x00002af7      mov qword [obj.command], rax                           ; [0xc2b0:8]=8\l0x00002afe      je 0x2dff\l"]
	"0x00002b04" [URL="dbg.main/0x00002b04", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e08\l0x00002b04      lea r13, [var_98h]\l0x00002b0c      lea rbp, [var_90h]\l0x00002b14      mov r14d, dword [obj.term_signal]                      ; [0xc010:4]=9 ; \"\\t\"\l0x00002b1b      mov rdi, r13\l0x00002b1e      call sym.imp.sigemptyset\l0x00002b23      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b25      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b28      mov edi, 0xe                                           ; int signum\l0x00002b2d      lea rax, [dbg.cleanup]                                 ; 0x3260\l0x00002b34      mov dword [var_118h], 0x10000000                       ; [0x10000000:4]=-1\l0x00002b3f      mov qword [var_90h], rax\l0x00002b47      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b4c      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b4e      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b51      mov edi, 2                                             ; int signum\l0x00002b56      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b5b      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b5d      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b60      mov edi, 3                                             ; int signum\l0x00002b65      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b6a      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b6c      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b6f      mov edi, 1                                             ; int signum\l0x00002b74      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b79      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b7b      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b7e      mov edi, 0xf                                           ; int signum\l0x00002b83      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b88      xor edx, edx                                           ; struct sigaction *oldact\l0x00002b8a      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002b8d      mov edi, r14d                                          ; int signum\l0x00002b90      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002b95      mov esi, 1                                             ; void *func\l0x00002b9a      mov edi, 0x15                                          ; int sig\l0x00002b9f      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00002ba4      mov esi, 1                                             ; void *func\l0x00002ba9      mov edi, 0x16                                          ; int sig\l0x00002bae      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00002bb3      mov rdi, r13\l0x00002bb6      call sym.imp.sigemptyset\l0x00002bbb      xor edx, edx                                           ; struct sigaction *oldact\l0x00002bbd      mov rsi, rbp                                           ; const struct sigaction *act\l0x00002bc0      mov edi, 0x11                                          ; int signum\l0x00002bc5      lea rax, [dbg.chld]                                    ; 0x3010\l0x00002bcc      mov dword [var_118h], 0x10000000                       ; [0x10000000:4]=-1\l0x00002bd7      mov qword [var_90h], rax\l0x00002bdf      call sym.imp.sigaction                                 ; int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)\l0x00002be4      mov edi, 0x11                                          ; int64_t arg1\l0x00002be9      call sym.unblock_signal\l0x00002bee      call sym.imp.fork\l0x00002bf3      mov dword [obj.monitored_pid], eax                     ; [0xc2c8:4]=0x3010 dbg.chld\l0x00002bf9      cmp eax, 0xffffffff\l0x00002bfc      je 0x2e32\l"]
	"0x00002c02" [URL="dbg.main/0x00002c02", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c02      test eax, eax\l0x00002c04      jne 0x2ca0\l"]
	"0x00002c0a" [URL="dbg.main/0x00002c0a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c0a      xor esi, esi                                           ; void *func\l0x00002c0c      mov edi, 0x15                                          ; int sig\l0x00002c11      xor r12d, r12d\l0x00002c14      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00002c19      xor esi, esi                                           ; void *func\l0x00002c1b      mov edi, 0x16                                          ; int sig\l0x00002c20      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00002c25      mov rdi, qword [rbx]\l0x00002c28      mov rsi, rbx\l0x00002c2b      call sym.imp.execvp\l0x00002c30      call sym.imp.__errno_location\l0x00002c35      mov rdi, qword [obj.command]                           ; [0xc2b0:8]=8 ; int64_t arg1\l0x00002c3c      cmp dword [rax], 2\l0x00002c3f      mov rbx, rax\l0x00002c42      sete r12b\l0x00002c46      call dbg.quote\l0x00002c4b      mov edx, 5\l0x00002c50      xor edi, edi\l0x00002c52      add r12d, 0x7e\l0x00002c56      lea rsi, str.failed_to_run_command__s                  ; 0x8152 ; \"failed to run command %s\"\l0x00002c5d      mov r13, rax\l; DATA XREF from dbg.version_etc_arn @ 0x6338\l0x00002c60      call sym.imp.dcgettext\l0x00002c65      mov esi, dword [rbx]                                   ; int errname\l0x00002c67      mov rcx, r13\l0x00002c6a      xor edi, edi                                           ; int status\l0x00002c6c      mov rdx, rax                                           ; char *format\l0x00002c6f      xor eax, eax\l0x00002c71      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l"]
	"0x00002c76" [URL="dbg.main/0x00002c76", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2d99, 0x2e61\l0x00002c76      mov rax, qword [var_148h]\l0x00002c7e      sub rax, qword fs:[0x28]\l0x00002c87      jne 0x2f16\l"]
	"0x00002c8d" [URL="dbg.main/0x00002c8d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002c8d      add rsp, 0x150\l0x00002c94      mov eax, r12d\l0x00002c97      pop rbx\l0x00002c98      pop rbp\l0x00002c99      pop r12\l0x00002c9b      pop r13\l0x00002c9d      pop r14\l0x00002c9f      ret\l"]
	"0x00002ca0" [URL="dbg.main/0x00002ca0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c04\l0x00002ca0      mov edi, 0xe                                           ; int64_t arg1\l0x00002ca5      call sym.unblock_signal\l0x00002caa      movq xmm0, r12\l0x00002caf      mov edi, 1                                             ; int64_t arg1\l0x00002cb4      call dbg.settimeout\l0x00002cb9      mov rdi, rbp\l0x00002cbc      mov r12d, dword [obj.term_signal]                      ; [0xc010:4]=9 ; \"\\t\"\l0x00002cc3      call sym.imp.sigemptyset\l0x00002cc8      mov esi, 0xe\l0x00002ccd      mov rdi, rbp\l; DATA XREF from dbg.version_etc_arn @ 0x62bd\l0x00002cd0      call sym.imp.sigaddset\l0x00002cd5      mov esi, 2\l0x00002cda      mov rdi, rbp\l0x00002cdd      call sym.imp.sigaddset\l0x00002ce2      mov esi, 3\l0x00002ce7      mov rdi, rbp\l0x00002cea      call sym.imp.sigaddset\l0x00002cef      mov esi, 1\l0x00002cf4      mov rdi, rbp\l0x00002cf7      call sym.imp.sigaddset\l0x00002cfc      mov esi, 0xf\l0x00002d01      mov rdi, rbp\l0x00002d04      call sym.imp.sigaddset\l0x00002d09      mov esi, r12d\l0x00002d0c      mov rdi, rbp\l0x00002d0f      lea r12, [var_10h]\l0x00002d14      call sym.imp.sigaddset\l0x00002d19      mov esi, 0x11\l0x00002d1e      mov rdi, rbp\l0x00002d21      call sym.imp.sigaddset\l0x00002d26      xor edi, edi\l0x00002d28      mov rdx, r12\l0x00002d2b      mov rsi, rbp\l0x00002d2e      call sym.imp.sigprocmask\l0x00002d33      test eax, eax\l0x00002d35      jne 0x2d9e\l"]
	"0x00002d37" [URL="dbg.main/0x00002d37", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2dc7\l0x00002d37      lea rbx, [var_ch]\l0x00002d3c      jmp 0x2d46\l"]
	"0x00002d3e" [URL="dbg.main/0x00002d3e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d5b\l0x00002d3e      mov rdi, r12\l0x00002d41      call sym.imp.sigsuspend\l"]
	"0x00002d46" [URL="dbg.main/0x00002d46", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d3c\l0x00002d46      mov edi, dword [obj.monitored_pid]                     ; [0xc2c8:4]=0x3010 dbg.chld ; pid_t pid\l0x00002d4c      mov edx, 1                                             ; int options\l0x00002d51      mov rsi, rbx                                           ; int *wstatus\l0x00002d54      call sym.imp.waitpid                                   ; pid_t waitpid(pid_t pid, int *wstatus, int options)\l0x00002d59      test eax, eax\l0x00002d5b      je 0x2d3e\l"]
	"0x00002d5d" [URL="dbg.main/0x00002d5d", fillcolor="white",color="#767676", fontname="Courier",label="0x00002d5d      js 0x2dcc\l"]
	"0x00002d5f" [URL="dbg.main/0x00002d5f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d5f      mov r12d, dword [var_ch]\l0x00002d64      mov ebx, r12d\l0x00002d67      and ebx, 0x7f\l0x00002d6a      jne 0x2e0d\l"]
	"0x00002d70" [URL="dbg.main/0x00002d70", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d70      mov eax, r12d\l0x00002d73      movzx eax, ah\l"]
	"0x00002d76" [URL="dbg.main/0x00002d76", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2dfa, 0x2e2d, 0x2e8f\l0x00002d76      cmp dword [obj.timed_out], 0                           ; [0xc2cc:4]=1\l0x00002d7d      mov dword [var_ch], eax\l0x00002d81      je 0x2d94\l"]
	"0x00002d83" [URL="dbg.main/0x00002d83", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d83      cmp byte [obj.preserve_status], 0                      ; [0xc2b9:1]=1\l0x00002d8a      jne 0x2d94\l"]
	"0x00002d8c" [URL="dbg.main/0x00002d8c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002d8c      mov dword [var_ch], 0x7c                               ; '|'\l                                                                       ; [0x7c:4]=4\l"]
	"0x00002d94" [URL="dbg.main/0x00002d94", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2d81, 0x2d8a\l0x00002d94      mov r12d, dword [var_ch]\l0x00002d99      jmp 0x2c76\l"]
	"0x00002d9e" [URL="dbg.main/0x00002d9e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d35\l0x00002d9e      xor edi, edi\l0x00002da0      mov edx, 5\l0x00002da5      lea rsi, str.warning:_sigprocmask                      ; 0x8031 ; \"warning: sigprocmask\"\l0x00002dac      call sym.imp.dcgettext\l0x00002db1      mov r13, rax\l0x00002db4      call sym.imp.__errno_location\l0x00002db9      mov rdx, r13                                           ; char *format\l0x00002dbc      xor edi, edi                                           ; int status\l0x00002dbe      mov esi, dword [rax]                                   ; int errname\l0x00002dc0      xor eax, eax\l0x00002dc2      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002dc7      jmp 0x2d37\l"]
	"0x00002dcc" [URL="dbg.main/0x00002dcc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d5d\l0x00002dcc      mov edx, 5\l0x00002dd1      lea rsi, str.error_waiting_for_command                 ; 0x816b ; \"error waiting for command\"\l0x00002dd8      xor edi, edi\l0x00002dda      call sym.imp.dcgettext\l0x00002ddf      mov r12, rax\l0x00002de2      call sym.imp.__errno_location\l0x00002de7      mov rdx, r12                                           ; char *format\l0x00002dea      xor edi, edi                                           ; int status\l0x00002dec      mov esi, dword [rax]                                   ; int errname\l0x00002dee      xor eax, eax\l0x00002df0      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002df5      mov eax, 0x7d                                          ; '}'\l0x00002dfa      jmp 0x2d76\l"]
	"0x00002dff" [URL="dbg.main/0x00002dff", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2afe\l0x00002dff      xor esi, esi\l0x00002e01      xor edi, edi\l0x00002e03      call sym.imp.setpgid\l0x00002e08      jmp 0x2b04\l"]
	"0x00002e0d" [URL="dbg.main/0x00002e0d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2d6a\l; DATA XREF from dbg.version_etc_arn @ 0x6187\l0x00002e0d      lea eax, [rbx + 1]\l0x00002e10      sub al, 1\l; DATA XREF from dbg.version_etc_arn @ 0x616f\l0x00002e12      jle 0x2e66\l"]
	"0x00002e14" [URL="dbg.main/0x00002e14", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002e14      and r12b, 0x80\l0x00002e18      jne 0x2e94\l"]
	"0x00002e1a" [URL="dbg.main/0x00002e1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2eb5\l0x00002e1a      cmp dword [obj.timed_out], 0                           ; [0xc2cc:4]=1\l0x00002e21      je 0x2eba\l"]
	"0x00002e27" [URL="dbg.main/0x00002e27", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from dbg.main @ 0x2ee3, 0x2f11\l0x00002e27      lea eax, [rbx + 0x80]\l0x00002e2d      jmp 0x2d76\l"]
	"0x00002e32" [URL="dbg.main/0x00002e32", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2bfc\l0x00002e32      mov edx, 5\l0x00002e37      lea rsi, str.fork_system_call_failed                   ; 0x813a ; \"fork system call failed\"\l0x00002e3e      xor edi, edi\l0x00002e40      call sym.imp.dcgettext\l0x00002e45      mov r12, rax\l0x00002e48      call sym.imp.__errno_location\l0x00002e4d      mov rdx, r12                                           ; char *format\l0x00002e50      xor edi, edi                                           ; int status\l0x00002e52      mov r12d, 0x7d                                         ; '}'\l0x00002e58      mov esi, dword [rax]                                   ; int errname\l0x00002e5a      xor eax, eax\l0x00002e5c      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e61      jmp 0x2c76\l"]
	"0x00002e66" [URL="dbg.main/0x00002e66", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e12\l0x00002e66      mov edx, 5\l0x00002e6b      lea rsi, str.unknown_status_from_command___d_          ; 0x8a60 ; \"unknown status from command (%d)\"\l0x00002e72      xor edi, edi\l0x00002e74      call sym.imp.dcgettext\l0x00002e79      mov ecx, r12d\l0x00002e7c      xor esi, esi                                           ; int errname\l0x00002e7e      xor edi, edi                                           ; int status\l0x00002e80      mov rdx, rax                                           ; char *format\l0x00002e83      xor eax, eax\l0x00002e85      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002e8a      mov eax, 1\l0x00002e8f      jmp 0x2d76\l"]
	"0x00002e94" [URL="dbg.main/0x00002e94", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e18\l0x00002e94      xor edi, edi\l0x00002e96      mov edx, 5\l0x00002e9b      lea rsi, str.the_monitored_command_dumped_core         ; 0x8a10 ; \"the monitored command dumped core\"\l0x00002ea2      call sym.imp.dcgettext\l0x00002ea7      xor esi, esi                                           ; int errname\l0x00002ea9      xor edi, edi                                           ; int status\l0x00002eab      mov rdx, rax                                           ; char *format\l0x00002eae      xor eax, eax\l0x00002eb0      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002eb5      jmp 0x2e1a\l"]
	"0x00002eba" [URL="dbg.main/0x00002eba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2e21\l0x00002eba      xor esi, esi                                           ; unsigned long v2\l0x00002ebc      xor eax, eax\l0x00002ebe      mov edi, 4                                             ; int option\l0x00002ec3      call sym.imp.prctl                                     ; int prctl(int option, unsigned long v2, unsigned long v3, unsigned long v4, unsigned long v5)\l0x00002ec8      test eax, eax\l0x00002eca      jne 0x2ee8\l"]
	"0x00002ecc" [URL="dbg.main/0x00002ecc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00002ecc      xor esi, esi                                           ; void *func\l0x00002ece      mov edi, ebx                                           ; int sig\l0x00002ed0      call sym.imp.signal                                    ; void signal(int sig, void *func)\l0x00002ed5      mov edi, ebx                                           ; int64_t arg1\l0x00002ed7      call sym.unblock_signal\l0x00002edc      mov edi, ebx                                           ; int sig\l0x00002ede      call sym.imp.raise                                     ; int raise(int sig)\l0x00002ee3      jmp 0x2e27\l"]
	"0x00002ee8" [URL="dbg.main/0x00002ee8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2eca\l0x00002ee8      xor edi, edi\l0x00002eea      mov edx, 5\l0x00002eef      lea rsi, str.warning:_disabling_core_dumps_failed      ; 0x8a38 ; \"warning: disabling core dumps failed\"\l0x00002ef6      call sym.imp.dcgettext\l0x00002efb      mov r12, rax\l0x00002efe      call sym.imp.__errno_location\l0x00002f03      mov rdx, r12                                           ; char *format\l0x00002f06      xor edi, edi                                           ; int status\l0x00002f08      mov esi, dword [rax]                                   ; int errname\l0x00002f0a      xor eax, eax\l0x00002f0c      call sym.imp.error                                     ; void error(int status, int errname, char *format)\l0x00002f11      jmp 0x2e27\l"]
	"0x00002f16" [URL="dbg.main/0x00002f16", fillcolor="white",color="#767676", fontname="Courier",label="; CODE XREF from dbg.main @ 0x2c87\l0x00002f16      call sym.imp.__stack_chk_fail                          ; void __stack_chk_fail(void)\l"]
        "0x00002920" -> "0x000029b0" [color="#3a96dd"];
        "0x000029b0" -> "0x00002ab9" [color="#13a10e"];
        "0x000029b0" -> "0x000029cc" [color="#c50f1f"];
        "0x000029cc" -> "0x00002a43" [color="#13a10e"];
        "0x000029cc" -> "0x000029d3" [color="#c50f1f"];
        "0x000029d3" -> "0x00002a70" [color="#13a10e"];
        "0x000029d3" -> "0x000029dc" [color="#c50f1f"];
        "0x000029dc" -> "0x00002a43" [color="#13a10e"];
        "0x000029dc" -> "0x000029e4" [color="#c50f1f"];
        "0x000029e4" -> "0x00002a50" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a20" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a10" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a43" [color="#3a96dd"];
        "0x000029e4" -> "0x00002a00" [color="#3a96dd"];
        "0x000029e4" -> "0x000029f0" [color="#3a96dd"];
        "0x000029f0" -> "0x000029b0" [color="#3a96dd"];
        "0x00002a00" -> "0x000029b0" [color="#3a96dd"];
        "0x00002a10" -> "0x000029b0" [color="#3a96dd"];
        "0x00002a20" -> "0x000029b0" [color="#13a10e"];
        "0x00002a20" -> "0x00002a43" [color="#c50f1f"];
        "0x00002a43" -> "0x00002a50" [color="#3a96dd"];
        "0x00002a50" -> "0x000029b0" [color="#3a96dd"];
        "0x00002a70" -> "0x00002aab" [color="#13a10e"];
        "0x00002a70" -> "0x00002a77" [color="#c50f1f"];
        "0x00002aab" -> "0x00002a43" [color="#13a10e"];
        "0x00002aab" -> "0x00002ab2" [color="#c50f1f"];
        "0x00002ab2" -> "0x00002ab9" [color="#3a96dd"];
        "0x00002ab9" -> "0x00002a43" [color="#13a10e"];
        "0x00002ab9" -> "0x00002acb" [color="#c50f1f"];
        "0x00002acb" -> "0x00002dff" [color="#13a10e"];
        "0x00002acb" -> "0x00002b04" [color="#c50f1f"];
        "0x00002b04" -> "0x00002e32" [color="#13a10e"];
        "0x00002b04" -> "0x00002c02" [color="#c50f1f"];
        "0x00002c02" -> "0x00002ca0" [color="#13a10e"];
        "0x00002c02" -> "0x00002c0a" [color="#c50f1f"];
        "0x00002c0a" -> "0x00002c76" [color="#3a96dd"];
        "0x00002c76" -> "0x00002f16" [color="#13a10e"];
        "0x00002c76" -> "0x00002c8d" [color="#c50f1f"];
        "0x00002ca0" -> "0x00002d9e" [color="#13a10e"];
        "0x00002ca0" -> "0x00002d37" [color="#c50f1f"];
        "0x00002d37" -> "0x00002d46" [color="#3a96dd"];
        "0x00002d3e" -> "0x00002d46" [color="#3a96dd"];
        "0x00002d46" -> "0x00002d3e" [color="#13a10e"];
        "0x00002d46" -> "0x00002d5d" [color="#c50f1f"];
        "0x00002d5d" -> "0x00002dcc" [color="#13a10e"];
        "0x00002d5d" -> "0x00002d5f" [color="#c50f1f"];
        "0x00002d5f" -> "0x00002e0d" [color="#13a10e"];
        "0x00002d5f" -> "0x00002d70" [color="#c50f1f"];
        "0x00002d70" -> "0x00002d76" [color="#3a96dd"];
        "0x00002d76" -> "0x00002d94" [color="#13a10e"];
        "0x00002d76" -> "0x00002d83" [color="#c50f1f"];
        "0x00002d83" -> "0x00002d94" [color="#13a10e"];
        "0x00002d83" -> "0x00002d8c" [color="#c50f1f"];
        "0x00002d8c" -> "0x00002d94" [color="#3a96dd"];
        "0x00002d94" -> "0x00002c76" [color="#3a96dd"];
        "0x00002d9e" -> "0x00002d37" [color="#3a96dd"];
        "0x00002dcc" -> "0x00002d76" [color="#3a96dd"];
        "0x00002dff" -> "0x00002b04" [color="#3a96dd"];
        "0x00002e0d" -> "0x00002e66" [color="#13a10e"];
        "0x00002e0d" -> "0x00002e14" [color="#c50f1f"];
        "0x00002e14" -> "0x00002e94" [color="#13a10e"];
        "0x00002e14" -> "0x00002e1a" [color="#c50f1f"];
        "0x00002e1a" -> "0x00002eba" [color="#13a10e"];
        "0x00002e1a" -> "0x00002e27" [color="#c50f1f"];
        "0x00002e27" -> "0x00002d76" [color="#3a96dd"];
        "0x00002e32" -> "0x00002c76" [color="#3a96dd"];
        "0x00002e66" -> "0x00002d76" [color="#3a96dd"];
        "0x00002e94" -> "0x00002e1a" [color="#3a96dd"];
        "0x00002eba" -> "0x00002ee8" [color="#13a10e"];
        "0x00002eba" -> "0x00002ecc" [color="#c50f1f"];
        "0x00002ecc" -> "0x00002e27" [color="#3a96dd"];
        "0x00002ee8" -> "0x00002e27" [color="#3a96dd"];
}
